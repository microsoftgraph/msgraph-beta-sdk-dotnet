// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Relying Party Detailed Summary.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class RelyingPartyDetailedSummary : Entity
    {
    
        /// <summary>
        /// Gets or sets relying party id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "relyingPartyId", Required = Newtonsoft.Json.Required.Default)]
        public string RelyingPartyId { get; set; }
    
        /// <summary>
        /// Gets or sets service id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "serviceId", Required = Newtonsoft.Json.Required.Default)]
        public string ServiceId { get; set; }
    
        /// <summary>
        /// Gets or sets relying party name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "relyingPartyName", Required = Newtonsoft.Json.Required.Default)]
        public string RelyingPartyName { get; set; }
    
        /// <summary>
        /// Gets or sets successful sign in count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "successfulSignInCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? SuccessfulSignInCount { get; set; }
    
        /// <summary>
        /// Gets or sets failed sign in count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "failedSignInCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? FailedSignInCount { get; set; }
    
        /// <summary>
        /// Gets or sets total sign in count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "totalSignInCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? TotalSignInCount { get; set; }
    
        /// <summary>
        /// Gets or sets sign in success rate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "signInSuccessRate", Required = Newtonsoft.Json.Required.Default)]
        public double? SignInSuccessRate { get; set; }
    
        /// <summary>
        /// Gets or sets unique user count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "uniqueUserCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? UniqueUserCount { get; set; }
    
        /// <summary>
        /// Gets or sets migration status.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "migrationStatus", Required = Newtonsoft.Json.Required.Default)]
        public MigrationStatus? MigrationStatus { get; set; }
    
        /// <summary>
        /// Gets or sets migration validation details.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "migrationValidationDetails", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<KeyValuePair> MigrationValidationDetails { get; set; }
    
        /// <summary>
        /// Gets or sets reply urls.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "replyUrls", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> ReplyUrls { get; set; }
    
    }
}

