// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type TeleconferenceDeviceMediaQuality.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public abstract partial class TeleconferenceDeviceMediaQuality
    {

        /// <summary>
        /// Gets or sets channelIndex.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "channelIndex", Required = Newtonsoft.Json.Required.Default)]
        public Int64? ChannelIndex { get; set; }
    
        /// <summary>
        /// Gets or sets mediaDuration.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaDuration", Required = Newtonsoft.Json.Required.Default)]
        public Duration MediaDuration { get; set; }
    
        /// <summary>
        /// Gets or sets networkLinkSpeedInBytes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "networkLinkSpeedInBytes", Required = Newtonsoft.Json.Required.Default)]
        public Int64? NetworkLinkSpeedInBytes { get; set; }
    
        /// <summary>
        /// Gets or sets localIPAddress.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "localIPAddress", Required = Newtonsoft.Json.Required.Default)]
        public string LocalIPAddress { get; set; }
    
        /// <summary>
        /// Gets or sets localPort.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "localPort", Required = Newtonsoft.Json.Required.Default)]
        public Int64? LocalPort { get; set; }
    
        /// <summary>
        /// Gets or sets remoteIPAddress.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "remoteIPAddress", Required = Newtonsoft.Json.Required.Default)]
        public string RemoteIPAddress { get; set; }
    
        /// <summary>
        /// Gets or sets remotePort.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "remotePort", Required = Newtonsoft.Json.Required.Default)]
        public Int64? RemotePort { get; set; }
    
        /// <summary>
        /// Gets or sets inboundPackets.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "inboundPackets", Required = Newtonsoft.Json.Required.Default)]
        public Int64? InboundPackets { get; set; }
    
        /// <summary>
        /// Gets or sets outboundPackets.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "outboundPackets", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OutboundPackets { get; set; }
    
        /// <summary>
        /// Gets or sets averageInboundPacketLossRateInPercentage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "averageInboundPacketLossRateInPercentage", Required = Newtonsoft.Json.Required.Default)]
        public double? AverageInboundPacketLossRateInPercentage { get; set; }
    
        /// <summary>
        /// Gets or sets averageOutboundPacketLossRateInPercentage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "averageOutboundPacketLossRateInPercentage", Required = Newtonsoft.Json.Required.Default)]
        public double? AverageOutboundPacketLossRateInPercentage { get; set; }
    
        /// <summary>
        /// Gets or sets maximumInboundPacketLossRateInPercentage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "maximumInboundPacketLossRateInPercentage", Required = Newtonsoft.Json.Required.Default)]
        public double? MaximumInboundPacketLossRateInPercentage { get; set; }
    
        /// <summary>
        /// Gets or sets maximumOutboundPacketLossRateInPercentage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "maximumOutboundPacketLossRateInPercentage", Required = Newtonsoft.Json.Required.Default)]
        public double? MaximumOutboundPacketLossRateInPercentage { get; set; }
    
        /// <summary>
        /// Gets or sets averageInboundRoundTripDelay.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "averageInboundRoundTripDelay", Required = Newtonsoft.Json.Required.Default)]
        public Duration AverageInboundRoundTripDelay { get; set; }
    
        /// <summary>
        /// Gets or sets averageOutboundRoundTripDelay.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "averageOutboundRoundTripDelay", Required = Newtonsoft.Json.Required.Default)]
        public Duration AverageOutboundRoundTripDelay { get; set; }
    
        /// <summary>
        /// Gets or sets maximumInboundRoundTripDelay.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "maximumInboundRoundTripDelay", Required = Newtonsoft.Json.Required.Default)]
        public Duration MaximumInboundRoundTripDelay { get; set; }
    
        /// <summary>
        /// Gets or sets maximumOutboundRoundTripDelay.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "maximumOutboundRoundTripDelay", Required = Newtonsoft.Json.Required.Default)]
        public Duration MaximumOutboundRoundTripDelay { get; set; }
    
        /// <summary>
        /// Gets or sets averageInboundJitter.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "averageInboundJitter", Required = Newtonsoft.Json.Required.Default)]
        public Duration AverageInboundJitter { get; set; }
    
        /// <summary>
        /// Gets or sets averageOutboundJitter.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "averageOutboundJitter", Required = Newtonsoft.Json.Required.Default)]
        public Duration AverageOutboundJitter { get; set; }
    
        /// <summary>
        /// Gets or sets maximumInboundJitter.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "maximumInboundJitter", Required = Newtonsoft.Json.Required.Default)]
        public Duration MaximumInboundJitter { get; set; }
    
        /// <summary>
        /// Gets or sets maximumOutboundJitter.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "maximumOutboundJitter", Required = Newtonsoft.Json.Required.Default)]
        public Duration MaximumOutboundJitter { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
