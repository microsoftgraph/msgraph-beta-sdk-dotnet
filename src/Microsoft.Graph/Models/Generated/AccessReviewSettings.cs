// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type AccessReviewSettings.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class AccessReviewSettings
    {

        /// <summary>
        /// Gets or sets mailNotificationsEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mailNotificationsEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? MailNotificationsEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets remindersEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "remindersEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? RemindersEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets justificationRequiredOnApproval.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "justificationRequiredOnApproval", Required = Newtonsoft.Json.Required.Default)]
        public bool? JustificationRequiredOnApproval { get; set; }
    
        /// <summary>
        /// Gets or sets recurrenceSettings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "recurrenceSettings", Required = Newtonsoft.Json.Required.Default)]
        public AccessReviewRecurrenceSettings RecurrenceSettings { get; set; }
    
        /// <summary>
        /// Gets or sets autoReviewEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "autoReviewEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? AutoReviewEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets activityDurationInDays.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "activityDurationInDays", Required = Newtonsoft.Json.Required.Default)]
        public Int32? ActivityDurationInDays { get; set; }
    
        /// <summary>
        /// Gets or sets autoReviewSettings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "autoReviewSettings", Required = Newtonsoft.Json.Required.Default)]
        public AutoReviewSettings AutoReviewSettings { get; set; }
    
        /// <summary>
        /// Gets or sets autoApplyReviewResultsEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "autoApplyReviewResultsEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? AutoApplyReviewResultsEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets accessRecommendationsEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "accessRecommendationsEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? AccessRecommendationsEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
