// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Iosik Ev2Vpn Configuration.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class IosikEv2VpnConfiguration : IosVpnConfiguration
    {
    
        /// <summary>
        /// Gets or sets child security association parameters.
        /// Child Security Association Parameters
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "childSecurityAssociationParameters", Required = Newtonsoft.Json.Required.Default)]
        public IosVpnSecurityAssociationParameters ChildSecurityAssociationParameters { get; set; }
    
        /// <summary>
        /// Gets or sets client authentication type.
        /// Type of Client Authentication the VPN client will use.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "clientAuthenticationType", Required = Newtonsoft.Json.Required.Default)]
        public VpnClientAuthenticationType? ClientAuthenticationType { get; set; }
    
        /// <summary>
        /// Gets or sets dead peer detection rate.
        /// Determine how often to check if a peer connection is still active. 
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deadPeerDetectionRate", Required = Newtonsoft.Json.Required.Default)]
        public VpnDeadPeerDetectionRate? DeadPeerDetectionRate { get; set; }
    
        /// <summary>
        /// Gets or sets disable mobility and multihoming.
        /// Disable MOBIKE
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "disableMobilityAndMultihoming", Required = Newtonsoft.Json.Required.Default)]
        public bool? DisableMobilityAndMultihoming { get; set; }
    
        /// <summary>
        /// Gets or sets disable redirect.
        /// Disable Redirect
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "disableRedirect", Required = Newtonsoft.Json.Required.Default)]
        public bool? DisableRedirect { get; set; }
    
        /// <summary>
        /// Gets or sets enable certificate revocation check.
        /// Enables a best-effort revocation check; server response timeouts will not cause it to fail
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enableCertificateRevocationCheck", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnableCertificateRevocationCheck { get; set; }
    
        /// <summary>
        /// Gets or sets enable eap.
        /// Enables EAP only authentication
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enableEAP", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnableEAP { get; set; }
    
        /// <summary>
        /// Gets or sets enable perfect forward secrecy.
        /// Enable Perfect Forward Secrecy (PFS).
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enablePerfectForwardSecrecy", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnablePerfectForwardSecrecy { get; set; }
    
        /// <summary>
        /// Gets or sets enable use internal subnet attributes.
        /// Enable Use Internal Subnet Attributes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enableUseInternalSubnetAttributes", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnableUseInternalSubnetAttributes { get; set; }
    
        /// <summary>
        /// Gets or sets local identifier.
        /// Method of identifying the client that is trying to connect via VPN. 
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "localIdentifier", Required = Newtonsoft.Json.Required.Default)]
        public VpnLocalIdentifier? LocalIdentifier { get; set; }
    
        /// <summary>
        /// Gets or sets remote identifier.
        /// Address of the IKEv2 server. Must be a FQDN, UserFQDN, network address, or ASN1DN
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "remoteIdentifier", Required = Newtonsoft.Json.Required.Default)]
        public string RemoteIdentifier { get; set; }
    
        /// <summary>
        /// Gets or sets security association parameters.
        /// Security Association Parameters
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "securityAssociationParameters", Required = Newtonsoft.Json.Required.Default)]
        public IosVpnSecurityAssociationParameters SecurityAssociationParameters { get; set; }
    
        /// <summary>
        /// Gets or sets server certificate common name.
        /// Common name of the IKEv2 Server Certificate used in Server Authentication
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "serverCertificateCommonName", Required = Newtonsoft.Json.Required.Default)]
        public string ServerCertificateCommonName { get; set; }
    
        /// <summary>
        /// Gets or sets server certificate issuer common name.
        /// Issuer Common name of the IKEv2 Server Certificate issuer used in Authentication
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "serverCertificateIssuerCommonName", Required = Newtonsoft.Json.Required.Default)]
        public string ServerCertificateIssuerCommonName { get; set; }
    
        /// <summary>
        /// Gets or sets server certificate type.
        /// The type of certificate the VPN server will present to the VPN client for authentication.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "serverCertificateType", Required = Newtonsoft.Json.Required.Default)]
        public VpnServerCertificateType? ServerCertificateType { get; set; }
    
        /// <summary>
        /// Gets or sets shared secret.
        /// Used when Shared Secret Authentication is selected
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "sharedSecret", Required = Newtonsoft.Json.Required.Default)]
        public string SharedSecret { get; set; }
    
        /// <summary>
        /// Gets or sets tls maximum version.
        /// The maximum TLS version to be used with EAP-TLS authentication
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "tlsMaximumVersion", Required = Newtonsoft.Json.Required.Default)]
        public string TlsMaximumVersion { get; set; }
    
        /// <summary>
        /// Gets or sets tls minimum version.
        /// The minimum TLS version to be used with EAP-TLS authentication
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "tlsMinimumVersion", Required = Newtonsoft.Json.Required.Default)]
        public string TlsMinimumVersion { get; set; }
    
        /// <summary>
        /// Gets or sets allow default security association parameters.
        /// Allows the use of security association parameters by setting all parameters to the device's default unless explicitly specified.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "allowDefaultSecurityAssociationParameters", Required = Newtonsoft.Json.Required.Default)]
        public bool? AllowDefaultSecurityAssociationParameters { get; set; }
    
        /// <summary>
        /// Gets or sets allow default child security association parameters.
        /// Allows the use of child security association parameters by setting all parameters to the device's default unless explicitly specified.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "allowDefaultChildSecurityAssociationParameters", Required = Newtonsoft.Json.Required.Default)]
        public bool? AllowDefaultChildSecurityAssociationParameters { get; set; }
    
    }
}

