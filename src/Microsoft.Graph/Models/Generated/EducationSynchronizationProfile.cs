// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Education Synchronization Profile.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class EducationSynchronizationProfile : Entity
    {
    
        /// <summary>
        /// Gets or sets display name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "displayName", Required = Newtonsoft.Json.Required.Default)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets data provider.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "dataProvider", Required = Newtonsoft.Json.Required.Default)]
        public EducationSynchronizationDataProvider DataProvider { get; set; }
    
        /// <summary>
        /// Gets or sets identity synchronization configuration.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "identitySynchronizationConfiguration", Required = Newtonsoft.Json.Required.Default)]
        public EducationIdentitySynchronizationConfiguration IdentitySynchronizationConfiguration { get; set; }
    
        /// <summary>
        /// Gets or sets licenses to assign.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "licensesToAssign", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<EducationSynchronizationLicenseAssignment> LicensesToAssign { get; set; }
    
        /// <summary>
        /// Gets or sets state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "state", Required = Newtonsoft.Json.Required.Default)]
        public EducationSynchronizationProfileState? State { get; set; }
    
        /// <summary>
        /// Gets or sets handle special character constraint.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "handleSpecialCharacterConstraint", Required = Newtonsoft.Json.Required.Default)]
        public bool? HandleSpecialCharacterConstraint { get; set; }
    
        /// <summary>
        /// Gets or sets errors.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "errors", Required = Newtonsoft.Json.Required.Default)]
        public IEducationSynchronizationProfileErrorsCollectionPage Errors { get; set; }
    
        /// <summary>
        /// Gets or sets profile status.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "profileStatus", Required = Newtonsoft.Json.Required.Default)]
        public EducationSynchronizationProfileStatus ProfileStatus { get; set; }
    
    }
}

