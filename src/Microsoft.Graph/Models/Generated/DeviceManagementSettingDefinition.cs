// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Device Management Setting Definition.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class DeviceManagementSettingDefinition : Entity
    {
    
		///<summary>
		/// The DeviceManagementSettingDefinition constructor
		///</summary>
        public DeviceManagementSettingDefinition()
        {
            this.ODataType = "microsoft.graph.deviceManagementSettingDefinition";
        }
	
        /// <summary>
        /// Gets or sets value type.
        /// The data type of the value
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "valueType", Required = Newtonsoft.Json.Required.Default)]
        public DeviceManangementIntentValueType? ValueType { get; set; }
    
        /// <summary>
        /// Gets or sets display name.
        /// The setting's display name
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "displayName", Required = Newtonsoft.Json.Required.Default)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets is top level.
        /// If the setting is top level, it can be configured without the need to be wrapped in a collection or complex setting
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isTopLevel", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsTopLevel { get; set; }
    
        /// <summary>
        /// Gets or sets description.
        /// The setting's description
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "description", Required = Newtonsoft.Json.Required.Default)]
        public string Description { get; set; }
    
        /// <summary>
        /// Gets or sets placeholder text.
        /// Placeholder text as an example of valid input
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "placeholderText", Required = Newtonsoft.Json.Required.Default)]
        public string PlaceholderText { get; set; }
    
        /// <summary>
        /// Gets or sets documentation url.
        /// Url to setting documentation
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "documentationUrl", Required = Newtonsoft.Json.Required.Default)]
        public string DocumentationUrl { get; set; }
    
        /// <summary>
        /// Gets or sets keywords.
        /// Keywords associated with the setting
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "keywords", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> Keywords { get; set; }
    
        /// <summary>
        /// Gets or sets constraints.
        /// Collection of constraints for the setting value
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "constraints", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<DeviceManagementConstraint> Constraints { get; set; }
    
        /// <summary>
        /// Gets or sets dependencies.
        /// Collection of dependencies on other settings
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "dependencies", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<DeviceManagementSettingDependency> Dependencies { get; set; }
    
    }
}

