// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type ImageInfo.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class ImageInfo
    {

        /// <summary>
        /// Gets or sets iconUrl.
        /// Optional; URI that points to an icon which represents the application used to generate the activity
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iconUrl", Required = Newtonsoft.Json.Required.Default)]
        public string IconUrl { get; set; }
    
        /// <summary>
        /// Gets or sets alternativeText.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "alternativeText", Required = Newtonsoft.Json.Required.Default)]
        public string AlternativeText { get; set; }
    
        /// <summary>
        /// Gets or sets alternateText.
        /// Optional; alt-text accessible content for the image
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "alternateText", Required = Newtonsoft.Json.Required.Default)]
        public string AlternateText { get; set; }
    
        /// <summary>
        /// Gets or sets addImageQuery.
        /// Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For example â€“ a high contrast image
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "addImageQuery", Required = Newtonsoft.Json.Required.Default)]
        public bool? AddImageQuery { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
