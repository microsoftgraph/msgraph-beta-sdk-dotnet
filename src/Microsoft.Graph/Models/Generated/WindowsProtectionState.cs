// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Windows Protection State.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class WindowsProtectionState : Entity
    {
    
        /// <summary>
        /// Gets or sets malware protection enabled.
        /// Anti malware is enabled or not
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "malwareProtectionEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? MalwareProtectionEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets device state.
        /// Computer's state (like clean or pending full scan or pending reboot etc)
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceState", Required = Newtonsoft.Json.Required.Default)]
        public WindowsDeviceHealthState? DeviceState { get; set; }
    
        /// <summary>
        /// Gets or sets real time protection enabled.
        /// Real time protection is enabled or not?
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "realTimeProtectionEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? RealTimeProtectionEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets network inspection system enabled.
        /// Network inspection system enabled or not?
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "networkInspectionSystemEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? NetworkInspectionSystemEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets quick scan overdue.
        /// Quick scan overdue or not?
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "quickScanOverdue", Required = Newtonsoft.Json.Required.Default)]
        public bool? QuickScanOverdue { get; set; }
    
        /// <summary>
        /// Gets or sets full scan overdue.
        /// Full scan overdue or not?
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "fullScanOverdue", Required = Newtonsoft.Json.Required.Default)]
        public bool? FullScanOverdue { get; set; }
    
        /// <summary>
        /// Gets or sets signature update overdue.
        /// Signature out of date or not?
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "signatureUpdateOverdue", Required = Newtonsoft.Json.Required.Default)]
        public bool? SignatureUpdateOverdue { get; set; }
    
        /// <summary>
        /// Gets or sets reboot required.
        /// Reboot required or not?
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "rebootRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? RebootRequired { get; set; }
    
        /// <summary>
        /// Gets or sets full scan required.
        /// Full scan required or not?
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "fullScanRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? FullScanRequired { get; set; }
    
        /// <summary>
        /// Gets or sets engine version.
        /// Current endpoint protection engine's version
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "engineVersion", Required = Newtonsoft.Json.Required.Default)]
        public string EngineVersion { get; set; }
    
        /// <summary>
        /// Gets or sets signature version.
        /// Current malware definitions version
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "signatureVersion", Required = Newtonsoft.Json.Required.Default)]
        public string SignatureVersion { get; set; }
    
        /// <summary>
        /// Gets or sets anti malware version.
        /// Current anti malware version
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "antiMalwareVersion", Required = Newtonsoft.Json.Required.Default)]
        public string AntiMalwareVersion { get; set; }
    
        /// <summary>
        /// Gets or sets last quick scan date time.
        /// Last quick scan datetime
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastQuickScanDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastQuickScanDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets last full scan date time.
        /// Last quick scan datetime
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastFullScanDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastFullScanDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets last quick scan signature version.
        /// Last quick scan signature version
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastQuickScanSignatureVersion", Required = Newtonsoft.Json.Required.Default)]
        public string LastQuickScanSignatureVersion { get; set; }
    
        /// <summary>
        /// Gets or sets last full scan signature version.
        /// Last full scan signature version
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastFullScanSignatureVersion", Required = Newtonsoft.Json.Required.Default)]
        public string LastFullScanSignatureVersion { get; set; }
    
        /// <summary>
        /// Gets or sets last reported date time.
        /// Last device health status reported time
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastReportedDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastReportedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets detected malware state.
        /// Device malware list
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "detectedMalwareState", Required = Newtonsoft.Json.Required.Default)]
        public IWindowsProtectionStateDetectedMalwareStateCollectionPage DetectedMalwareState { get; set; }
    
    }
}

