// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Device Shell Script.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class DeviceShellScript : Entity
    {
    
		///<summary>
		/// The DeviceShellScript constructor
		///</summary>
        public DeviceShellScript()
        {
            this.ODataType = "microsoft.graph.deviceShellScript";
        }
	
        /// <summary>
        /// Gets or sets execution frequency.
        /// The interval for script to run. If not defined the script will run once
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "executionFrequency", Required = Newtonsoft.Json.Required.Default)]
        public Duration ExecutionFrequency { get; set; }
    
        /// <summary>
        /// Gets or sets retry count.
        /// Number of times for the script to be retried if it fails
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "retryCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? RetryCount { get; set; }
    
        /// <summary>
        /// Gets or sets block execution notifications.
        /// Does not notify the user a script is being executed
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "blockExecutionNotifications", Required = Newtonsoft.Json.Required.Default)]
        public bool? BlockExecutionNotifications { get; set; }
    
        /// <summary>
        /// Gets or sets display name.
        /// Name of the device management script.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "displayName", Required = Newtonsoft.Json.Required.Default)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets description.
        /// Optional description for the device management script.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "description", Required = Newtonsoft.Json.Required.Default)]
        public string Description { get; set; }
    
        /// <summary>
        /// Gets or sets script content.
        /// The script content.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "scriptContent", Required = Newtonsoft.Json.Required.Default)]
        public byte[] ScriptContent { get; set; }
    
        /// <summary>
        /// Gets or sets created date time.
        /// The date and time the device management script was created. This property is read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "createdDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? CreatedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets last modified date time.
        /// The date and time the device management script was last modified. This property is read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastModifiedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets run as account.
        /// Indicates the type of execution context.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "runAsAccount", Required = Newtonsoft.Json.Required.Default)]
        public RunAsAccountType? RunAsAccount { get; set; }
    
        /// <summary>
        /// Gets or sets file name.
        /// Script file name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "fileName", Required = Newtonsoft.Json.Required.Default)]
        public string FileName { get; set; }
    
        /// <summary>
        /// Gets or sets role scope tag ids.
        /// List of Scope Tag IDs for this PowerShellScript instance.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "roleScopeTagIds", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> RoleScopeTagIds { get; set; }
    
        /// <summary>
        /// Gets or sets group assignments.
        /// The list of group assignments for the device management script.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "groupAssignments", Required = Newtonsoft.Json.Required.Default)]
        public IDeviceShellScriptGroupAssignmentsCollectionPage GroupAssignments { get; set; }
    
        /// <summary>
        /// Gets or sets assignments.
        /// The list of group assignments for the device management script.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "assignments", Required = Newtonsoft.Json.Required.Default)]
        public IDeviceShellScriptAssignmentsCollectionPage Assignments { get; set; }
    
        /// <summary>
        /// Gets or sets run summary.
        /// Run summary for device management script.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "runSummary", Required = Newtonsoft.Json.Required.Default)]
        public DeviceManagementScriptRunSummary RunSummary { get; set; }
    
        /// <summary>
        /// Gets or sets device run states.
        /// List of run states for this script across all devices.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceRunStates", Required = Newtonsoft.Json.Required.Default)]
        public IDeviceShellScriptDeviceRunStatesCollectionPage DeviceRunStates { get; set; }
    
        /// <summary>
        /// Gets or sets user run states.
        /// List of run states for this script across all users.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "userRunStates", Required = Newtonsoft.Json.Required.Default)]
        public IDeviceShellScriptUserRunStatesCollectionPage UserRunStates { get; set; }
    
    }
}

