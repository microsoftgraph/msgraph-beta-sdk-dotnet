// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type SiteCollection.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class SiteCollection
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteCollection"/> class.
        /// </summary>
        public SiteCollection()
        {
            this.ODataType = "microsoft.graph.siteCollection";
        }

        /// <summary>
        /// Gets or sets dataLocationCode.
        /// The geographic region code for where this site collection resides. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "dataLocationCode", Required = Newtonsoft.Json.Required.Default)]
        public string DataLocationCode { get; set; }
    
        /// <summary>
        /// Gets or sets hostname.
        /// The hostname for the site collection. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "hostname", Required = Newtonsoft.Json.Required.Default)]
        public string Hostname { get; set; }
    
        /// <summary>
        /// Gets or sets root.
        /// If present, indicates that this is a root site collection in SharePoint. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "root", Required = Newtonsoft.Json.Required.Default)]
        public Root Root { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
