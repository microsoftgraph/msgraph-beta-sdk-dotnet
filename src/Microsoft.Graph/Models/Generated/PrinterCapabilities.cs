// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type PrinterCapabilities.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class PrinterCapabilities
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrinterCapabilities"/> class.
        /// </summary>
        public PrinterCapabilities()
        {
            this.ODataType = "microsoft.graph.printerCapabilities";
        }

        /// <summary>
        /// Gets or sets isColorPrintingSupported.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isColorPrintingSupported", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsColorPrintingSupported { get; set; }
    
        /// <summary>
        /// Gets or sets supportsFitPdfToPage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportsFitPdfToPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SupportsFitPdfToPage { get; set; }
    
        /// <summary>
        /// Gets or sets supportedCopiesPerJob.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedCopiesPerJob", Required = Newtonsoft.Json.Required.Default)]
        public IntegerRange SupportedCopiesPerJob { get; set; }
    
        /// <summary>
        /// Gets or sets supportedDocumentMimeTypes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedDocumentMimeTypes", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> SupportedDocumentMimeTypes { get; set; }
    
        /// <summary>
        /// Gets or sets supportedFinishings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedFinishings", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<PrintFinishing> SupportedFinishings { get; set; }
    
        /// <summary>
        /// Gets or sets supportedMediaColors.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedMediaColors", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> SupportedMediaColors { get; set; }
    
        /// <summary>
        /// Gets or sets supportedMediaTypes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedMediaTypes", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<PrintMediaType> SupportedMediaTypes { get; set; }
    
        /// <summary>
        /// Gets or sets supportedDuplexConfigurations.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedDuplexConfigurations", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<PrintDuplexConfiguration> SupportedDuplexConfigurations { get; set; }
    
        /// <summary>
        /// Gets or sets supportedMediaSizes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedMediaSizes", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> SupportedMediaSizes { get; set; }
    
        /// <summary>
        /// Gets or sets supportedPagesPerSheet.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedPagesPerSheet", Required = Newtonsoft.Json.Required.Default)]
        public IntegerRange SupportedPagesPerSheet { get; set; }
    
        /// <summary>
        /// Gets or sets supportedOrientations.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedOrientations", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<PrintOrientation> SupportedOrientations { get; set; }
    
        /// <summary>
        /// Gets or sets supportedOutputBins.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedOutputBins", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> SupportedOutputBins { get; set; }
    
        /// <summary>
        /// Gets or sets supportedPresentationDirections.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedPresentationDirections", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<PrintPresentationDirection> SupportedPresentationDirections { get; set; }
    
        /// <summary>
        /// Gets or sets supportedColorConfigurations.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedColorConfigurations", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<PrintColorConfiguration> SupportedColorConfigurations { get; set; }
    
        /// <summary>
        /// Gets or sets supportedPrintQualities.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedPrintQualities", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<PrintQuality> SupportedPrintQualities { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
