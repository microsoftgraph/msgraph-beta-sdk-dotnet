// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type SynchronizationTaskExecution.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class SynchronizationTaskExecution
    {

        /// <summary>
        /// Gets or sets activityIdentifier.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "activityIdentifier", Required = Newtonsoft.Json.Required.Default)]
        public string ActivityIdentifier { get; set; }
    
        /// <summary>
        /// Gets or sets countEntitled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "countEntitled", Required = Newtonsoft.Json.Required.Default)]
        public Int64? CountEntitled { get; set; }
    
        /// <summary>
        /// Gets or sets countEntitledForProvisioning.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "countEntitledForProvisioning", Required = Newtonsoft.Json.Required.Default)]
        public Int64? CountEntitledForProvisioning { get; set; }
    
        /// <summary>
        /// Gets or sets countEscrowed.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "countEscrowed", Required = Newtonsoft.Json.Required.Default)]
        public Int64? CountEscrowed { get; set; }
    
        /// <summary>
        /// Gets or sets countEscrowedRaw.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "countEscrowedRaw", Required = Newtonsoft.Json.Required.Default)]
        public Int64? CountEscrowedRaw { get; set; }
    
        /// <summary>
        /// Gets or sets countExported.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "countExported", Required = Newtonsoft.Json.Required.Default)]
        public Int64? CountExported { get; set; }
    
        /// <summary>
        /// Gets or sets countExports.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "countExports", Required = Newtonsoft.Json.Required.Default)]
        public Int64? CountExports { get; set; }
    
        /// <summary>
        /// Gets or sets countImported.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "countImported", Required = Newtonsoft.Json.Required.Default)]
        public Int64? CountImported { get; set; }
    
        /// <summary>
        /// Gets or sets countImportedDeltas.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "countImportedDeltas", Required = Newtonsoft.Json.Required.Default)]
        public Int64? CountImportedDeltas { get; set; }
    
        /// <summary>
        /// Gets or sets countImportedReferenceDeltas.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "countImportedReferenceDeltas", Required = Newtonsoft.Json.Required.Default)]
        public Int64? CountImportedReferenceDeltas { get; set; }
    
        /// <summary>
        /// Gets or sets state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "state", Required = Newtonsoft.Json.Required.Default)]
        public SynchronizationTaskExecutionResult? State { get; set; }
    
        /// <summary>
        /// Gets or sets error.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "error", Required = Newtonsoft.Json.Required.Default)]
        public SynchronizationError Error { get; set; }
    
        /// <summary>
        /// Gets or sets timeBegan.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "timeBegan", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? TimeBegan { get; set; }
    
        /// <summary>
        /// Gets or sets timeEnded.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "timeEnded", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? TimeEnded { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
