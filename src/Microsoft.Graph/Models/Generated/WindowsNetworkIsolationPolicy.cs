// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type WindowsNetworkIsolationPolicy.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class WindowsNetworkIsolationPolicy
    {

        /// <summary>
        /// Gets or sets enterpriseNetworkDomainNames.
        /// This is the list of domains that comprise the boundaries of the enterprise. Data from one of these domains that is sent to a device will be considered enterprise data and protected. These locations will be considered a safe destination for enterprise data to be shared to.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseNetworkDomainNames", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> EnterpriseNetworkDomainNames { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseCloudResources.
        /// Contains a list of enterprise resource domains hosted in the cloud that need to be protected. Connections to these resources are considered enterprise data. If a proxy is paired with a cloud resource, traffic to the cloud resource will be routed through the enterprise network via the denoted proxy server (on Port 80). A proxy server used for this purpose must also be configured using the EnterpriseInternalProxyServers policy. This collection can contain a maximum of 500 elements.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseCloudResources", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<ProxiedDomain> EnterpriseCloudResources { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseIPRanges.
        /// Sets the enterprise IP ranges that define the computers in the enterprise network. Data that comes from those computers will be considered part of the enterprise and protected. These locations will be considered a safe destination for enterprise data to be shared to. This collection can contain a maximum of 500 elements.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseIPRanges", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<IpRange> EnterpriseIPRanges { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseInternalProxyServers.
        /// This is the comma-separated list of internal proxy servers. For example, "157.54.14.28, 157.54.11.118, 10.202.14.167, 157.53.14.163, 157.69.210.59". These proxies have been configured by the admin to connect to specific resources on the Internet. They are considered to be enterprise network locations. The proxies are only leveraged in configuring the EnterpriseCloudResources policy to force traffic to the matched cloud resources through these proxies.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseInternalProxyServers", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> EnterpriseInternalProxyServers { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseIPRangesAreAuthoritative.
        /// Boolean value that tells the client to accept the configured list and not to use heuristics to attempt to find other subnets. Default is false.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseIPRangesAreAuthoritative", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnterpriseIPRangesAreAuthoritative { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseProxyServers.
        /// This is a list of proxy servers. Any server not on this list is considered non-enterprise.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseProxyServers", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> EnterpriseProxyServers { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseProxyServersAreAuthoritative.
        /// Boolean value that tells the client to accept the configured list of proxies and not try to detect other work proxies. Default is false
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseProxyServersAreAuthoritative", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnterpriseProxyServersAreAuthoritative { get; set; }
    
        /// <summary>
        /// Gets or sets neutralDomainResources.
        /// List of domain names that can used for work or personal resource.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "neutralDomainResources", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> NeutralDomainResources { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
