// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Sales Order Line.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class SalesOrderLine : Entity
    {
    
        /// <summary>
        /// Gets or sets document id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "documentId", Required = Newtonsoft.Json.Required.Default)]
        public Guid? DocumentId { get; set; }
    
        /// <summary>
        /// Gets or sets sequence.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "sequence", Required = Newtonsoft.Json.Required.Default)]
        public Int32? Sequence { get; set; }
    
        /// <summary>
        /// Gets or sets item id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "itemId", Required = Newtonsoft.Json.Required.Default)]
        public Guid? ItemId { get; set; }
    
        /// <summary>
        /// Gets or sets account id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "accountId", Required = Newtonsoft.Json.Required.Default)]
        public Guid? AccountId { get; set; }
    
        /// <summary>
        /// Gets or sets line type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lineType", Required = Newtonsoft.Json.Required.Default)]
        public string LineType { get; set; }
    
        /// <summary>
        /// Gets or sets description.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "description", Required = Newtonsoft.Json.Required.Default)]
        public string Description { get; set; }
    
        /// <summary>
        /// Gets or sets unit of measure id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "unitOfMeasureId", Required = Newtonsoft.Json.Required.Default)]
        public Guid? UnitOfMeasureId { get; set; }
    
        /// <summary>
        /// Gets or sets quantity.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "quantity", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? Quantity { get; set; }
    
        /// <summary>
        /// Gets or sets unit price.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "unitPrice", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? UnitPrice { get; set; }
    
        /// <summary>
        /// Gets or sets discount amount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "discountAmount", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? DiscountAmount { get; set; }
    
        /// <summary>
        /// Gets or sets discount percent.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "discountPercent", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? DiscountPercent { get; set; }
    
        /// <summary>
        /// Gets or sets discount applied before tax.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "discountAppliedBeforeTax", Required = Newtonsoft.Json.Required.Default)]
        public bool? DiscountAppliedBeforeTax { get; set; }
    
        /// <summary>
        /// Gets or sets amount excluding tax.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "amountExcludingTax", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? AmountExcludingTax { get; set; }
    
        /// <summary>
        /// Gets or sets tax code.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "taxCode", Required = Newtonsoft.Json.Required.Default)]
        public string TaxCode { get; set; }
    
        /// <summary>
        /// Gets or sets tax percent.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "taxPercent", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? TaxPercent { get; set; }
    
        /// <summary>
        /// Gets or sets total tax amount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "totalTaxAmount", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? TotalTaxAmount { get; set; }
    
        /// <summary>
        /// Gets or sets amount including tax.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "amountIncludingTax", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? AmountIncludingTax { get; set; }
    
        /// <summary>
        /// Gets or sets invoice discount allocation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "invoiceDiscountAllocation", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? InvoiceDiscountAllocation { get; set; }
    
        /// <summary>
        /// Gets or sets net amount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "netAmount", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? NetAmount { get; set; }
    
        /// <summary>
        /// Gets or sets net tax amount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "netTaxAmount", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? NetTaxAmount { get; set; }
    
        /// <summary>
        /// Gets or sets net amount including tax.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "netAmountIncludingTax", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? NetAmountIncludingTax { get; set; }
    
        /// <summary>
        /// Gets or sets shipment date.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "shipmentDate", Required = Newtonsoft.Json.Required.Default)]
        public Date ShipmentDate { get; set; }
    
        /// <summary>
        /// Gets or sets shipped quantity.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "shippedQuantity", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? ShippedQuantity { get; set; }
    
        /// <summary>
        /// Gets or sets invoiced quantity.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "invoicedQuantity", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? InvoicedQuantity { get; set; }
    
        /// <summary>
        /// Gets or sets invoice quantity.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "invoiceQuantity", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? InvoiceQuantity { get; set; }
    
        /// <summary>
        /// Gets or sets ship quantity.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "shipQuantity", Required = Newtonsoft.Json.Required.Default)]
        public Decimal? ShipQuantity { get; set; }
    
        /// <summary>
        /// Gets or sets item.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "item", Required = Newtonsoft.Json.Required.Default)]
        public Item Item { get; set; }
    
        /// <summary>
        /// Gets or sets account.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "account", Required = Newtonsoft.Json.Required.Default)]
        public Account Account { get; set; }
    
    }
}

