// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Windows Device Malware State.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class WindowsDeviceMalwareState : Entity
    {
    
        /// <summary>
        /// Gets or sets display name.
        /// Malware name
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "displayName", Required = Newtonsoft.Json.Required.Default)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets additional information url.
        /// Information URL to learn more about the malware
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "additionalInformationUrl", Required = Newtonsoft.Json.Required.Default)]
        public string AdditionalInformationUrl { get; set; }
    
        /// <summary>
        /// Gets or sets severity.
        /// Severity of the malware
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "severity", Required = Newtonsoft.Json.Required.Default)]
        public WindowsMalwareSeverity? Severity { get; set; }
    
        /// <summary>
        /// Gets or sets catetgory.
        /// Category of the malware
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "catetgory", Required = Newtonsoft.Json.Required.Default)]
        public WindowsMalwareCategory? Catetgory { get; set; }
    
        /// <summary>
        /// Gets or sets execution state.
        /// Execution status of the malware like blocked/executing etc
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "executionState", Required = Newtonsoft.Json.Required.Default)]
        public WindowsMalwareExecutionState? ExecutionState { get; set; }
    
        /// <summary>
        /// Gets or sets state.
        /// Current status of the malware like cleaned/quarantined/allowed etc
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "state", Required = Newtonsoft.Json.Required.Default)]
        public WindowsMalwareState? State { get; set; }
    
        /// <summary>
        /// Gets or sets threat state.
        /// Current status of the malware like cleaned/quarantined/allowed etc
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "threatState", Required = Newtonsoft.Json.Required.Default)]
        public WindowsMalwareThreatState? ThreatState { get; set; }
    
        /// <summary>
        /// Gets or sets initial detection date time.
        /// Initial detection datetime of the malware
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "initialDetectionDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? InitialDetectionDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets last state change date time.
        /// The last time this particular threat was changed
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastStateChangeDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastStateChangeDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets detection count.
        /// Number of times the malware is detected
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "detectionCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? DetectionCount { get; set; }
    
        /// <summary>
        /// Gets or sets category.
        /// Category of the malware
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "category", Required = Newtonsoft.Json.Required.Default)]
        public WindowsMalwareCategory? Category { get; set; }
    
    }
}

