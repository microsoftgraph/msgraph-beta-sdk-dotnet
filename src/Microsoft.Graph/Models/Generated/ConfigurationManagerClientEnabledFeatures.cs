// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type ConfigurationManagerClientEnabledFeatures.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class ConfigurationManagerClientEnabledFeatures
    {

        /// <summary>
        /// Gets or sets inventory.
        /// Whether inventory is managed by Intune
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "inventory", Required = Newtonsoft.Json.Required.Default)]
        public bool? Inventory { get; set; }
    
        /// <summary>
        /// Gets or sets modernApps.
        /// Whether modern application is managed by Intune
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "modernApps", Required = Newtonsoft.Json.Required.Default)]
        public bool? ModernApps { get; set; }
    
        /// <summary>
        /// Gets or sets resourceAccess.
        /// Whether resource access is managed by Intune
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "resourceAccess", Required = Newtonsoft.Json.Required.Default)]
        public bool? ResourceAccess { get; set; }
    
        /// <summary>
        /// Gets or sets deviceConfiguration.
        /// Whether device configuration is managed by Intune
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceConfiguration", Required = Newtonsoft.Json.Required.Default)]
        public bool? DeviceConfiguration { get; set; }
    
        /// <summary>
        /// Gets or sets compliancePolicy.
        /// Whether compliance policy is managed by Intune
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "compliancePolicy", Required = Newtonsoft.Json.Required.Default)]
        public bool? CompliancePolicy { get; set; }
    
        /// <summary>
        /// Gets or sets windowsUpdateForBusiness.
        /// Whether Windows Update for Business is managed by Intune
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsUpdateForBusiness", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsUpdateForBusiness { get; set; }
    
        /// <summary>
        /// Gets or sets endpointProtection.
        /// Whether Endpoint Protection is managed by Intune
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "endpointProtection", Required = Newtonsoft.Json.Required.Default)]
        public bool? EndpointProtection { get; set; }
    
        /// <summary>
        /// Gets or sets officeApps.
        /// Whether Office application is managed by Intune
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "officeApps", Required = Newtonsoft.Json.Required.Default)]
        public bool? OfficeApps { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
