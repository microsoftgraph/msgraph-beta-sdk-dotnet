// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type ItemActionSet.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class ItemActionSet
    {

        /// <summary>
        /// Gets or sets comment.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "comment", Required = Newtonsoft.Json.Required.Default)]
        public CommentAction Comment { get; set; }
    
        /// <summary>
        /// Gets or sets create.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "create", Required = Newtonsoft.Json.Required.Default)]
        public CreateAction Create { get; set; }
    
        /// <summary>
        /// Gets or sets delete.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "delete", Required = Newtonsoft.Json.Required.Default)]
        public DeleteAction Delete { get; set; }
    
        /// <summary>
        /// Gets or sets edit.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edit", Required = Newtonsoft.Json.Required.Default)]
        public EditAction Edit { get; set; }
    
        /// <summary>
        /// Gets or sets mention.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mention", Required = Newtonsoft.Json.Required.Default)]
        public MentionAction Mention { get; set; }
    
        /// <summary>
        /// Gets or sets move.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "move", Required = Newtonsoft.Json.Required.Default)]
        public MoveAction Move { get; set; }
    
        /// <summary>
        /// Gets or sets rename.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "rename", Required = Newtonsoft.Json.Required.Default)]
        public RenameAction Rename { get; set; }
    
        /// <summary>
        /// Gets or sets restore.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "restore", Required = Newtonsoft.Json.Required.Default)]
        public RestoreAction Restore { get; set; }
    
        /// <summary>
        /// Gets or sets share.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "share", Required = Newtonsoft.Json.Required.Default)]
        public ShareAction Share { get; set; }
    
        /// <summary>
        /// Gets or sets version.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "version", Required = Newtonsoft.Json.Required.Default)]
        public VersionAction Version { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
