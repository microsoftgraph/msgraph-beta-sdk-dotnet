// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type HardwareInformation.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class HardwareInformation
    {

        /// <summary>
        /// Gets or sets serialNumber.
        /// Serial number.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "serialNumber", Required = Newtonsoft.Json.Required.Default)]
        public string SerialNumber { get; set; }
    
        /// <summary>
        /// Gets or sets totalStorageSpace.
        /// Total storage space of the device.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "totalStorageSpace", Required = Newtonsoft.Json.Required.Default)]
        public Int64? TotalStorageSpace { get; set; }
    
        /// <summary>
        /// Gets or sets freeStorageSpace.
        /// Free storage space of the device.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "freeStorageSpace", Required = Newtonsoft.Json.Required.Default)]
        public Int64? FreeStorageSpace { get; set; }
    
        /// <summary>
        /// Gets or sets imei.
        /// IMEI
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "imei", Required = Newtonsoft.Json.Required.Default)]
        public string Imei { get; set; }
    
        /// <summary>
        /// Gets or sets meid.
        /// MEID
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "meid", Required = Newtonsoft.Json.Required.Default)]
        public string Meid { get; set; }
    
        /// <summary>
        /// Gets or sets manufacturer.
        /// Manufacturer of the device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "manufacturer", Required = Newtonsoft.Json.Required.Default)]
        public string Manufacturer { get; set; }
    
        /// <summary>
        /// Gets or sets model.
        /// Model of the device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "model", Required = Newtonsoft.Json.Required.Default)]
        public string Model { get; set; }
    
        /// <summary>
        /// Gets or sets phoneNumber.
        /// Phone number of the device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "phoneNumber", Required = Newtonsoft.Json.Required.Default)]
        public string PhoneNumber { get; set; }
    
        /// <summary>
        /// Gets or sets subscriberCarrier.
        /// Subscriber carrier of the device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "subscriberCarrier", Required = Newtonsoft.Json.Required.Default)]
        public string SubscriberCarrier { get; set; }
    
        /// <summary>
        /// Gets or sets cellularTechnology.
        /// Cellular technology of the device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularTechnology", Required = Newtonsoft.Json.Required.Default)]
        public string CellularTechnology { get; set; }
    
        /// <summary>
        /// Gets or sets wifiMac.
        /// WiFi MAC address of the device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wifiMac", Required = Newtonsoft.Json.Required.Default)]
        public string WifiMac { get; set; }
    
        /// <summary>
        /// Gets or sets operatingSystemLanguage.
        /// Operating system language of the device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "operatingSystemLanguage", Required = Newtonsoft.Json.Required.Default)]
        public string OperatingSystemLanguage { get; set; }
    
        /// <summary>
        /// Gets or sets isSupervised.
        /// Supervised mode of the device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isSupervised", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsSupervised { get; set; }
    
        /// <summary>
        /// Gets or sets isEncrypted.
        /// Encryption status of the device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isEncrypted", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsEncrypted { get; set; }
    
        /// <summary>
        /// Gets or sets isSharedDevice.
        /// Shared iPad
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isSharedDevice", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsSharedDevice { get; set; }
    
        /// <summary>
        /// Gets or sets sharedDeviceCachedUsers.
        /// All users on the shared Apple device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "sharedDeviceCachedUsers", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<SharedAppleDeviceUser> SharedDeviceCachedUsers { get; set; }
    
        /// <summary>
        /// Gets or sets tpmSpecificationVersion.
        /// String that specifies the specification version.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "tpmSpecificationVersion", Required = Newtonsoft.Json.Required.Default)]
        public string TpmSpecificationVersion { get; set; }
    
        /// <summary>
        /// Gets or sets operatingSystemEdition.
        /// String that specifies the OS edition.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "operatingSystemEdition", Required = Newtonsoft.Json.Required.Default)]
        public string OperatingSystemEdition { get; set; }
    
        /// <summary>
        /// Gets or sets deviceFullQualifiedDomainName.
        /// Returns the fully qualified domain name of the device (if any). If the device is not domain-joined, it returns an empty string. 
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceFullQualifiedDomainName", Required = Newtonsoft.Json.Required.Default)]
        public string DeviceFullQualifiedDomainName { get; set; }
    
        /// <summary>
        /// Gets or sets deviceGuardVirtualizationBasedSecurityHardwareRequirementState.
        /// Virtualization-based security hardware requirement status.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceGuardVirtualizationBasedSecurityHardwareRequirementState", Required = Newtonsoft.Json.Required.Default)]
        public DeviceGuardVirtualizationBasedSecurityHardwareRequirementState? DeviceGuardVirtualizationBasedSecurityHardwareRequirementState { get; set; }
    
        /// <summary>
        /// Gets or sets deviceGuardVirtualizationBasedSecurityState.
        /// Virtualization-based security status. 
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceGuardVirtualizationBasedSecurityState", Required = Newtonsoft.Json.Required.Default)]
        public DeviceGuardVirtualizationBasedSecurityState? DeviceGuardVirtualizationBasedSecurityState { get; set; }
    
        /// <summary>
        /// Gets or sets deviceGuardLocalSystemAuthorityCredentialGuardState.
        /// Local System Authority (LSA) credential guard status. 
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceGuardLocalSystemAuthorityCredentialGuardState", Required = Newtonsoft.Json.Required.Default)]
        public DeviceGuardLocalSystemAuthorityCredentialGuardState? DeviceGuardLocalSystemAuthorityCredentialGuardState { get; set; }
    
        /// <summary>
        /// Gets or sets osBuildNumber.
        /// Operating System Build Number on Android device
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "osBuildNumber", Required = Newtonsoft.Json.Required.Default)]
        public string OsBuildNumber { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
