// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Service Principal.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class ServicePrincipal : DirectoryObject
    {
    
		///<summary>
		/// The ServicePrincipal constructor
		///</summary>
        public ServicePrincipal()
        {
            this.ODataType = "microsoft.graph.servicePrincipal";
        }
	
        /// <summary>
        /// Gets or sets account enabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "accountEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? AccountEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets add ins.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "addIns", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<AddIn> AddIns { get; set; }
    
        /// <summary>
        /// Gets or sets alternative names.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "alternativeNames", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> AlternativeNames { get; set; }
    
        /// <summary>
        /// Gets or sets app display name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appDisplayName", Required = Newtonsoft.Json.Required.Default)]
        public string AppDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets app id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appId", Required = Newtonsoft.Json.Required.Default)]
        public string AppId { get; set; }
    
        /// <summary>
        /// Gets or sets application template id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "applicationTemplateId", Required = Newtonsoft.Json.Required.Default)]
        public string ApplicationTemplateId { get; set; }
    
        /// <summary>
        /// Gets or sets app owner organization id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appOwnerOrganizationId", Required = Newtonsoft.Json.Required.Default)]
        public Guid? AppOwnerOrganizationId { get; set; }
    
        /// <summary>
        /// Gets or sets app role assignment required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appRoleAssignmentRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppRoleAssignmentRequired { get; set; }
    
        /// <summary>
        /// Gets or sets app roles.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appRoles", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<AppRole> AppRoles { get; set; }
    
        /// <summary>
        /// Gets or sets display name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "displayName", Required = Newtonsoft.Json.Required.Default)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets error url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "errorUrl", Required = Newtonsoft.Json.Required.Default)]
        public string ErrorUrl { get; set; }
    
        /// <summary>
        /// Gets or sets homepage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "homepage", Required = Newtonsoft.Json.Required.Default)]
        public string Homepage { get; set; }
    
        /// <summary>
        /// Gets or sets info.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "info", Required = Newtonsoft.Json.Required.Default)]
        public InformationalUrl Info { get; set; }
    
        /// <summary>
        /// Gets or sets key credentials.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "keyCredentials", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<KeyCredential> KeyCredentials { get; set; }
    
        /// <summary>
        /// Gets or sets login url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "loginUrl", Required = Newtonsoft.Json.Required.Default)]
        public string LoginUrl { get; set; }
    
        /// <summary>
        /// Gets or sets logout url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "logoutUrl", Required = Newtonsoft.Json.Required.Default)]
        public string LogoutUrl { get; set; }
    
        /// <summary>
        /// Gets or sets notification email addresses.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "notificationEmailAddresses", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> NotificationEmailAddresses { get; set; }
    
        /// <summary>
        /// Gets or sets published permission scopes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "publishedPermissionScopes", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<PermissionScope> PublishedPermissionScopes { get; set; }
    
        /// <summary>
        /// Gets or sets password credentials.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordCredentials", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<PasswordCredential> PasswordCredentials { get; set; }
    
        /// <summary>
        /// Gets or sets preferred token signing key end date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "preferredTokenSigningKeyEndDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? PreferredTokenSigningKeyEndDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets preferred token signing key thumbprint.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "preferredTokenSigningKeyThumbprint", Required = Newtonsoft.Json.Required.Default)]
        public string PreferredTokenSigningKeyThumbprint { get; set; }
    
        /// <summary>
        /// Gets or sets preferred single sign on mode.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "preferredSingleSignOnMode", Required = Newtonsoft.Json.Required.Default)]
        public string PreferredSingleSignOnMode { get; set; }
    
        /// <summary>
        /// Gets or sets publisher name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "publisherName", Required = Newtonsoft.Json.Required.Default)]
        public string PublisherName { get; set; }
    
        /// <summary>
        /// Gets or sets reply urls.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "replyUrls", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> ReplyUrls { get; set; }
    
        /// <summary>
        /// Gets or sets saml metadata url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "samlMetadataUrl", Required = Newtonsoft.Json.Required.Default)]
        public string SamlMetadataUrl { get; set; }
    
        /// <summary>
        /// Gets or sets saml single sign on settings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "samlSingleSignOnSettings", Required = Newtonsoft.Json.Required.Default)]
        public SamlSingleSignOnSettings SamlSingleSignOnSettings { get; set; }
    
        /// <summary>
        /// Gets or sets service principal names.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "servicePrincipalNames", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> ServicePrincipalNames { get; set; }
    
        /// <summary>
        /// Gets or sets service principal type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "servicePrincipalType", Required = Newtonsoft.Json.Required.Default)]
        public string ServicePrincipalType { get; set; }
    
        /// <summary>
        /// Gets or sets sign in audience.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "signInAudience", Required = Newtonsoft.Json.Required.Default)]
        public string SignInAudience { get; set; }
    
        /// <summary>
        /// Gets or sets tags.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "tags", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> Tags { get; set; }
    
        /// <summary>
        /// Gets or sets token encryption key id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "tokenEncryptionKeyId", Required = Newtonsoft.Json.Required.Default)]
        public Guid? TokenEncryptionKeyId { get; set; }
    
        /// <summary>
        /// Gets or sets app role assigned to.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appRoleAssignedTo", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalAppRoleAssignedToCollectionPage AppRoleAssignedTo { get; set; }
    
        /// <summary>
        /// Gets or sets app role assignments.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appRoleAssignments", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalAppRoleAssignmentsCollectionPage AppRoleAssignments { get; set; }
    
        /// <summary>
        /// Gets or sets claims mapping policies.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "claimsMappingPolicies", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalClaimsMappingPoliciesCollectionWithReferencesPage ClaimsMappingPolicies { get; set; }
    
        /// <summary>
        /// Gets or sets home realm discovery policies.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "homeRealmDiscoveryPolicies", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalHomeRealmDiscoveryPoliciesCollectionWithReferencesPage HomeRealmDiscoveryPolicies { get; set; }
    
        /// <summary>
        /// Gets or sets endpoints.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "endpoints", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalEndpointsCollectionPage Endpoints { get; set; }
    
        /// <summary>
        /// Gets or sets oauth2permission grants.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "oauth2PermissionGrants", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalOauth2PermissionGrantsCollectionWithReferencesPage Oauth2PermissionGrants { get; set; }
    
        /// <summary>
        /// Gets or sets member of.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "memberOf", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalMemberOfCollectionWithReferencesPage MemberOf { get; set; }
    
        /// <summary>
        /// Gets or sets transitive member of.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "transitiveMemberOf", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalTransitiveMemberOfCollectionWithReferencesPage TransitiveMemberOf { get; set; }
    
        /// <summary>
        /// Gets or sets created objects.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "createdObjects", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalCreatedObjectsCollectionWithReferencesPage CreatedObjects { get; set; }
    
        /// <summary>
        /// Gets or sets license details.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "licenseDetails", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalLicenseDetailsCollectionPage LicenseDetails { get; set; }
    
        /// <summary>
        /// Gets or sets owners.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "owners", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalOwnersCollectionWithReferencesPage Owners { get; set; }
    
        /// <summary>
        /// Gets or sets owned objects.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "ownedObjects", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalOwnedObjectsCollectionWithReferencesPage OwnedObjects { get; set; }
    
        /// <summary>
        /// Gets or sets token issuance policies.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "tokenIssuancePolicies", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalTokenIssuancePoliciesCollectionWithReferencesPage TokenIssuancePolicies { get; set; }
    
        /// <summary>
        /// Gets or sets token lifetime policies.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "tokenLifetimePolicies", Required = Newtonsoft.Json.Required.Default)]
        public IServicePrincipalTokenLifetimePoliciesCollectionWithReferencesPage TokenLifetimePolicies { get; set; }
    
        /// <summary>
        /// Gets or sets synchronization.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "synchronization", Required = Newtonsoft.Json.Required.Default)]
        public Synchronization Synchronization { get; set; }
    
    }
}

