// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Item Activity Stat.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class ItemActivityStat : Entity
    {
    
        /// <summary>
        /// Gets or sets start date time.
        /// When the interval starts. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? StartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets end date time.
        /// When the interval ends. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "endDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? EndDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets access.
        /// Statistics about the access actions in this interval. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "access", Required = Newtonsoft.Json.Required.Default)]
        public ItemActionStat Access { get; set; }
    
        /// <summary>
        /// Gets or sets create.
        /// Statistics about the create actions in this interval. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "create", Required = Newtonsoft.Json.Required.Default)]
        public ItemActionStat Create { get; set; }
    
        /// <summary>
        /// Gets or sets delete.
        /// Statistics about the delete actions in this interval. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "delete", Required = Newtonsoft.Json.Required.Default)]
        public ItemActionStat Delete { get; set; }
    
        /// <summary>
        /// Gets or sets edit.
        /// Statistics about the edit actions in this interval. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edit", Required = Newtonsoft.Json.Required.Default)]
        public ItemActionStat Edit { get; set; }
    
        /// <summary>
        /// Gets or sets move.
        /// Statistics about the move actions in this interval. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "move", Required = Newtonsoft.Json.Required.Default)]
        public ItemActionStat Move { get; set; }
    
        /// <summary>
        /// Gets or sets is trending.
        /// Indicates whether the item is 'trending.' Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isTrending", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsTrending { get; set; }
    
        /// <summary>
        /// Gets or sets incomplete data.
        /// Indicates that the statistics in this interval are based on incomplete data. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "incompleteData", Required = Newtonsoft.Json.Required.Default)]
        public IncompleteData IncompleteData { get; set; }
    
        /// <summary>
        /// Gets or sets activities.
        /// Exposes the itemActivities represented in this itemActivityStat resource.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "activities", Required = Newtonsoft.Json.Required.Default)]
        public IItemActivityStatActivitiesCollectionPage Activities { get; set; }
    
    }
}

