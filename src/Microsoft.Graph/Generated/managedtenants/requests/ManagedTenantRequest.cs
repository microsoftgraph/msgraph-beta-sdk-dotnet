// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityRequest.cs.tt

namespace Microsoft.Graph.ManagedTenants
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The type ManagedTenantRequest.
    /// </summary>
    public partial class ManagedTenantRequest : Microsoft.Graph.BaseRequest, IManagedTenantRequest
    {
        /// <summary>
        /// Constructs a new ManagedTenantRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="Microsoft.Graph.IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public ManagedTenantRequest(
            string requestUrl,
            Microsoft.Graph.IBaseClient client,
            IEnumerable<Microsoft.Graph.Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Creates the specified ManagedTenant using POST.
        /// </summary>
        /// <param name="managedTenantToCreate">The ManagedTenant to create.</param>
        /// <returns>The created ManagedTenant.</returns>
        public System.Threading.Tasks.Task<ManagedTenant> CreateAsync(ManagedTenant managedTenantToCreate)
        {
            return this.CreateAsync(managedTenantToCreate, CancellationToken.None);
        }

        /// <summary>
        /// Creates the specified ManagedTenant using POST.
        /// </summary>
        /// <param name="managedTenantToCreate">The ManagedTenant to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created ManagedTenant.</returns>
        public async System.Threading.Tasks.Task<ManagedTenant> CreateAsync(ManagedTenant managedTenantToCreate, CancellationToken cancellationToken)
        {
            this.ContentType = "application/json";
            this.Method = "POST";
            var newEntity = await this.SendAsync<ManagedTenant>(managedTenantToCreate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }

        /// <summary>
        /// Deletes the specified ManagedTenant.
        /// </summary>
        /// <returns>The task to await.</returns>
        public System.Threading.Tasks.Task DeleteAsync()
        {
            return this.DeleteAsync(CancellationToken.None);
        }

        /// <summary>
        /// Deletes the specified ManagedTenant.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken)
        {
            this.Method = "DELETE";
            await this.SendAsync<ManagedTenant>(null, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified ManagedTenant.
        /// </summary>
        /// <returns>The ManagedTenant.</returns>
        public System.Threading.Tasks.Task<ManagedTenant> GetAsync()
        {
            return this.GetAsync(CancellationToken.None);
        }

        /// <summary>
        /// Gets the specified ManagedTenant.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The ManagedTenant.</returns>
        public async System.Threading.Tasks.Task<ManagedTenant> GetAsync(CancellationToken cancellationToken)
        {
            this.Method = "GET";
            var retrievedEntity = await this.SendAsync<ManagedTenant>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Updates the specified ManagedTenant using PATCH.
        /// </summary>
        /// <param name="managedTenantToUpdate">The ManagedTenant to update.</param>
        /// <returns>The updated ManagedTenant.</returns>
        public System.Threading.Tasks.Task<ManagedTenant> UpdateAsync(ManagedTenant managedTenantToUpdate)
        {
            return this.UpdateAsync(managedTenantToUpdate, CancellationToken.None);
        }

        /// <summary>
        /// Updates the specified ManagedTenant using PATCH.
        /// </summary>
        /// <param name="managedTenantToUpdate">The ManagedTenant to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="Microsoft.Graph.ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated ManagedTenant.</returns>
        public async System.Threading.Tasks.Task<ManagedTenant> UpdateAsync(ManagedTenant managedTenantToUpdate, CancellationToken cancellationToken)
        {
			if (managedTenantToUpdate.AdditionalData != null)
			{
				if (managedTenantToUpdate.AdditionalData.ContainsKey(Microsoft.Graph.Constants.HttpPropertyNames.ResponseHeaders) ||
					managedTenantToUpdate.AdditionalData.ContainsKey(Microsoft.Graph.Constants.HttpPropertyNames.StatusCode))
				{
					throw new Microsoft.Graph.ClientException(
						new Microsoft.Graph.Error
						{
							Code = Microsoft.Graph.GeneratedErrorConstants.Codes.NotAllowed,
							Message = String.Format(Microsoft.Graph.GeneratedErrorConstants.Messages.ResponseObjectUsedForUpdate, managedTenantToUpdate.GetType().Name)
						});
				}
			}
            if (managedTenantToUpdate.AdditionalData != null)
            {
                if (managedTenantToUpdate.AdditionalData.ContainsKey(Microsoft.Graph.Constants.HttpPropertyNames.ResponseHeaders) ||
                    managedTenantToUpdate.AdditionalData.ContainsKey(Microsoft.Graph.Constants.HttpPropertyNames.StatusCode))
                {
                    throw new Microsoft.Graph.ClientException(
                        new Microsoft.Graph.Error
                        {
                            Code = Microsoft.Graph.GeneratedErrorConstants.Codes.NotAllowed,
                            Message = String.Format(Microsoft.Graph.GeneratedErrorConstants.Messages.ResponseObjectUsedForUpdate, managedTenantToUpdate.GetType().Name)
                        });
                }
            }
            this.ContentType = "application/json";
            this.Method = "PATCH";
            var updatedEntity = await this.SendAsync<ManagedTenant>(managedTenantToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public IManagedTenantRequest Expand(string value)
        {
            this.QueryOptions.Add(new Microsoft.Graph.QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        public IManagedTenantRequest Expand(Expression<Func<ManagedTenant, object>> expandExpression)
        {
		    if (expandExpression == null)
            {
                throw new ArgumentNullException(nameof(expandExpression));
            }
            string error;
            string value = Microsoft.Graph.ExpressionExtractHelper.ExtractMembers(expandExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(expandExpression));
            }
            else
            {
                this.QueryOptions.Add(new Microsoft.Graph.QueryOption("$expand", value));
            }
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public IManagedTenantRequest Select(string value)
        {
            this.QueryOptions.Add(new Microsoft.Graph.QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        public IManagedTenantRequest Select(Expression<Func<ManagedTenant, object>> selectExpression)
        {
            if (selectExpression == null)
            {
                throw new ArgumentNullException(nameof(selectExpression));
            }
            string error;
            string value = Microsoft.Graph.ExpressionExtractHelper.ExtractMembers(selectExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(selectExpression));
            }
            else
            {
                this.QueryOptions.Add(new Microsoft.Graph.QueryOption("$select", value));
            }
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="managedTenantToInitialize">The <see cref="ManagedTenant"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(ManagedTenant managedTenantToInitialize)
        {

            if (managedTenantToInitialize != null && managedTenantToInitialize.AdditionalData != null)
            {

                if (managedTenantToInitialize.AggregatedPolicyCompliances != null && managedTenantToInitialize.AggregatedPolicyCompliances.CurrentPage != null)
                {
                    managedTenantToInitialize.AggregatedPolicyCompliances.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("aggregatedPolicyCompliances@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.AggregatedPolicyCompliances.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.CloudPcConnections != null && managedTenantToInitialize.CloudPcConnections.CurrentPage != null)
                {
                    managedTenantToInitialize.CloudPcConnections.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("cloudPcConnections@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.CloudPcConnections.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.CloudPcDevices != null && managedTenantToInitialize.CloudPcDevices.CurrentPage != null)
                {
                    managedTenantToInitialize.CloudPcDevices.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("cloudPcDevices@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.CloudPcDevices.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.CloudPcsOverview != null && managedTenantToInitialize.CloudPcsOverview.CurrentPage != null)
                {
                    managedTenantToInitialize.CloudPcsOverview.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("cloudPcsOverview@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.CloudPcsOverview.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.ConditionalAccessPolicyCoverages != null && managedTenantToInitialize.ConditionalAccessPolicyCoverages.CurrentPage != null)
                {
                    managedTenantToInitialize.ConditionalAccessPolicyCoverages.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("conditionalAccessPolicyCoverages@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.ConditionalAccessPolicyCoverages.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.CredentialUserRegistrationsSummaries != null && managedTenantToInitialize.CredentialUserRegistrationsSummaries.CurrentPage != null)
                {
                    managedTenantToInitialize.CredentialUserRegistrationsSummaries.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("credentialUserRegistrationsSummaries@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.CredentialUserRegistrationsSummaries.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.DeviceCompliancePolicySettingStateSummaries != null && managedTenantToInitialize.DeviceCompliancePolicySettingStateSummaries.CurrentPage != null)
                {
                    managedTenantToInitialize.DeviceCompliancePolicySettingStateSummaries.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("deviceCompliancePolicySettingStateSummaries@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.DeviceCompliancePolicySettingStateSummaries.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.ManagedDeviceCompliances != null && managedTenantToInitialize.ManagedDeviceCompliances.CurrentPage != null)
                {
                    managedTenantToInitialize.ManagedDeviceCompliances.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("managedDeviceCompliances@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.ManagedDeviceCompliances.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.ManagedDeviceComplianceTrends != null && managedTenantToInitialize.ManagedDeviceComplianceTrends.CurrentPage != null)
                {
                    managedTenantToInitialize.ManagedDeviceComplianceTrends.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("managedDeviceComplianceTrends@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.ManagedDeviceComplianceTrends.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.ManagementActions != null && managedTenantToInitialize.ManagementActions.CurrentPage != null)
                {
                    managedTenantToInitialize.ManagementActions.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("managementActions@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.ManagementActions.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.ManagementActionTenantDeploymentStatuses != null && managedTenantToInitialize.ManagementActionTenantDeploymentStatuses.CurrentPage != null)
                {
                    managedTenantToInitialize.ManagementActionTenantDeploymentStatuses.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("managementActionTenantDeploymentStatuses@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.ManagementActionTenantDeploymentStatuses.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.ManagementIntents != null && managedTenantToInitialize.ManagementIntents.CurrentPage != null)
                {
                    managedTenantToInitialize.ManagementIntents.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("managementIntents@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.ManagementIntents.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.ManagementTemplates != null && managedTenantToInitialize.ManagementTemplates.CurrentPage != null)
                {
                    managedTenantToInitialize.ManagementTemplates.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("managementTemplates@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.ManagementTemplates.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.RiskyUsers != null && managedTenantToInitialize.RiskyUsers.CurrentPage != null)
                {
                    managedTenantToInitialize.RiskyUsers.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("riskyUsers@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.RiskyUsers.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.TenantGroups != null && managedTenantToInitialize.TenantGroups.CurrentPage != null)
                {
                    managedTenantToInitialize.TenantGroups.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("tenantGroups@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.TenantGroups.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.Tenants != null && managedTenantToInitialize.Tenants.CurrentPage != null)
                {
                    managedTenantToInitialize.Tenants.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("tenants@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.Tenants.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.TenantsCustomizedInformation != null && managedTenantToInitialize.TenantsCustomizedInformation.CurrentPage != null)
                {
                    managedTenantToInitialize.TenantsCustomizedInformation.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("tenantsCustomizedInformation@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.TenantsCustomizedInformation.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.TenantsDetailedInformation != null && managedTenantToInitialize.TenantsDetailedInformation.CurrentPage != null)
                {
                    managedTenantToInitialize.TenantsDetailedInformation.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("tenantsDetailedInformation@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.TenantsDetailedInformation.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.TenantTags != null && managedTenantToInitialize.TenantTags.CurrentPage != null)
                {
                    managedTenantToInitialize.TenantTags.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("tenantTags@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.TenantTags.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.WindowsDeviceMalwareStates != null && managedTenantToInitialize.WindowsDeviceMalwareStates.CurrentPage != null)
                {
                    managedTenantToInitialize.WindowsDeviceMalwareStates.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("windowsDeviceMalwareStates@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.WindowsDeviceMalwareStates.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (managedTenantToInitialize.WindowsProtectionStates != null && managedTenantToInitialize.WindowsProtectionStates.CurrentPage != null)
                {
                    managedTenantToInitialize.WindowsProtectionStates.AdditionalData = managedTenantToInitialize.AdditionalData;

                    object nextPageLink;
                    managedTenantToInitialize.AdditionalData.TryGetValue("windowsProtectionStates@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        managedTenantToInitialize.WindowsProtectionStates.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

            }


        }
    }
}
