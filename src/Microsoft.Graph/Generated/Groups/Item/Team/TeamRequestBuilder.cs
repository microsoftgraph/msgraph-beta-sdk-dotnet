// <auto-generated/>
using Microsoft.Graph.Beta.Groups.Item.Team.AllChannels;
using Microsoft.Graph.Beta.Groups.Item.Team.Archive;
using Microsoft.Graph.Beta.Groups.Item.Team.Channels;
using Microsoft.Graph.Beta.Groups.Item.Team.Clone;
using Microsoft.Graph.Beta.Groups.Item.Team.CompleteMigration;
using Microsoft.Graph.Beta.Groups.Item.Team.Group;
using Microsoft.Graph.Beta.Groups.Item.Team.IncomingChannels;
using Microsoft.Graph.Beta.Groups.Item.Team.InstalledApps;
using Microsoft.Graph.Beta.Groups.Item.Team.Members;
using Microsoft.Graph.Beta.Groups.Item.Team.Operations;
using Microsoft.Graph.Beta.Groups.Item.Team.Owners;
using Microsoft.Graph.Beta.Groups.Item.Team.PermissionGrants;
using Microsoft.Graph.Beta.Groups.Item.Team.Photo;
using Microsoft.Graph.Beta.Groups.Item.Team.PrimaryChannel;
using Microsoft.Graph.Beta.Groups.Item.Team.Schedule;
using Microsoft.Graph.Beta.Groups.Item.Team.SendActivityNotification;
using Microsoft.Graph.Beta.Groups.Item.Team.Tags;
using Microsoft.Graph.Beta.Groups.Item.Team.Template;
using Microsoft.Graph.Beta.Groups.Item.Team.TemplateDefinition;
using Microsoft.Graph.Beta.Groups.Item.Team.Unarchive;
using Microsoft.Graph.Beta.Models.ODataErrors;
using Microsoft.Graph.Beta.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Microsoft.Graph.Beta.Groups.Item.Team
{
    /// <summary>
    /// Provides operations to manage the team property of the microsoft.graph.group entity.
    /// </summary>
    public class TeamRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Provides operations to manage the allChannels property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.AllChannels.AllChannelsRequestBuilder AllChannels
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.AllChannels.AllChannelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the archive method.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Archive.ArchiveRequestBuilder Archive
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Archive.ArchiveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the channels property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Channels.ChannelsRequestBuilder Channels
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Channels.ChannelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the clone method.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Clone.CloneRequestBuilder Clone
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Clone.CloneRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the completeMigration method.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.CompleteMigration.CompleteMigrationRequestBuilder CompleteMigration
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.CompleteMigration.CompleteMigrationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the group property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Group.GroupRequestBuilder Group
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Group.GroupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the incomingChannels property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.IncomingChannels.IncomingChannelsRequestBuilder IncomingChannels
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.IncomingChannels.IncomingChannelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the installedApps property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.InstalledApps.InstalledAppsRequestBuilder InstalledApps
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.InstalledApps.InstalledAppsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the members property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Members.MembersRequestBuilder Members
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Members.MembersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the operations property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Operations.OperationsRequestBuilder Operations
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Operations.OperationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the owners property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Owners.OwnersRequestBuilder Owners
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Owners.OwnersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the permissionGrants property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.PermissionGrants.PermissionGrantsRequestBuilder PermissionGrants
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.PermissionGrants.PermissionGrantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the photo property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Photo.PhotoRequestBuilder Photo
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Photo.PhotoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the primaryChannel property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.PrimaryChannel.PrimaryChannelRequestBuilder PrimaryChannel
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.PrimaryChannel.PrimaryChannelRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the schedule property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Schedule.ScheduleRequestBuilder Schedule
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Schedule.ScheduleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the sendActivityNotification method.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.SendActivityNotification.SendActivityNotificationRequestBuilder SendActivityNotification
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.SendActivityNotification.SendActivityNotificationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the tags property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Tags.TagsRequestBuilder Tags
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Tags.TagsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the template property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Template.TemplateRequestBuilder Template
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Template.TemplateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the templateDefinition property of the microsoft.graph.team entity.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.TemplateDefinition.TemplateDefinitionRequestBuilder TemplateDefinition
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.TemplateDefinition.TemplateDefinitionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the unarchive method.</summary>
        public Microsoft.Graph.Beta.Groups.Item.Team.Unarchive.UnarchiveRequestBuilder Unarchive
        {
            get => new Microsoft.Graph.Beta.Groups.Item.Team.Unarchive.UnarchiveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TeamRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/groups/{group%2Did}/team{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TeamRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/groups/{group%2Did}/team{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Delete navigation property team for groups
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The team associated with this group.
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.Team"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Microsoft.Graph.Beta.Models.Team?> GetAsync(Action<RequestConfiguration<Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder.TeamRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Microsoft.Graph.Beta.Models.Team> GetAsync(Action<RequestConfiguration<Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder.TeamRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<Microsoft.Graph.Beta.Models.Team>(requestInfo, Microsoft.Graph.Beta.Models.Team.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a new team from a group. In order to create a team, the group must have a least one owner. If the creation of the team call is delayed, you can retry the call up to three times before you have to wait for 15 minutes due to a propagation delay. If the group was created less than 15 minutes ago, the call might fail with a 404 error code due to replication delays. If the group was created less than 15 minutes ago, it&apos;s possible for a call to create a team to fail with a 404 error code, due to ongoing replication delays.The recommended pattern is to retry the Create team call three times, with a 10 second delay between calls.
        /// Find more info here <see href="https://learn.microsoft.com/graph/api/team-put-teams?view=graph-rest-beta" />
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.Team"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Microsoft.Graph.Beta.Models.Team?> PutAsync(Microsoft.Graph.Beta.Models.Team body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Microsoft.Graph.Beta.Models.Team> PutAsync(Microsoft.Graph.Beta.Models.Team body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<Microsoft.Graph.Beta.Models.Team>(requestInfo, Microsoft.Graph.Beta.Models.Team.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete navigation property team for groups
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// The team associated with this group.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder.TeamRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder.TeamRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new team from a group. In order to create a team, the group must have a least one owner. If the creation of the team call is delayed, you can retry the call up to three times before you have to wait for 15 minutes due to a propagation delay. If the group was created less than 15 minutes ago, the call might fail with a 404 error code due to replication delays. If the group was created less than 15 minutes ago, it&apos;s possible for a call to create a team to fail with a 404 error code, due to ongoing replication delays.The recommended pattern is to retry the Create team call three times, with a 10 second delay between calls.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(Microsoft.Graph.Beta.Models.Team body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(Microsoft.Graph.Beta.Models.Team body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder WithUrl(string rawUrl)
        {
            return new Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class TeamRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// The team associated with this group.
        /// </summary>
        public class TeamRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class TeamRequestBuilderGetRequestConfiguration : RequestConfiguration<Microsoft.Graph.Beta.Groups.Item.Team.TeamRequestBuilder.TeamRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class TeamRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
