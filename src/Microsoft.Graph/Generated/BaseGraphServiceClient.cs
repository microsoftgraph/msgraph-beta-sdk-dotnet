// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Graph.Beta.AccessReviewDecisions;
using Microsoft.Graph.Beta.AccessReviews;
using Microsoft.Graph.Beta.Activitystatistics;
using Microsoft.Graph.Beta.Admin;
using Microsoft.Graph.Beta.AdministrativeUnits;
using Microsoft.Graph.Beta.AgreementAcceptances;
using Microsoft.Graph.Beta.Agreements;
using Microsoft.Graph.Beta.AllowedDataLocations;
using Microsoft.Graph.Beta.App;
using Microsoft.Graph.Beta.AppCatalogs;
using Microsoft.Graph.Beta.AppRoleAssignments;
using Microsoft.Graph.Beta.ApplicationTemplates;
using Microsoft.Graph.Beta.Applications;
using Microsoft.Graph.Beta.ApplicationsWithAppId;
using Microsoft.Graph.Beta.ApplicationsWithUniqueName;
using Microsoft.Graph.Beta.ApprovalWorkflowProviders;
using Microsoft.Graph.Beta.AuditLogs;
using Microsoft.Graph.Beta.AuthenticationMethodConfigurations;
using Microsoft.Graph.Beta.AuthenticationMethodsPolicy;
using Microsoft.Graph.Beta.BookingBusinesses;
using Microsoft.Graph.Beta.BookingCurrencies;
using Microsoft.Graph.Beta.BusinessFlowTemplates;
using Microsoft.Graph.Beta.CertificateBasedAuthConfiguration;
using Microsoft.Graph.Beta.Chats;
using Microsoft.Graph.Beta.Commands;
using Microsoft.Graph.Beta.Communications;
using Microsoft.Graph.Beta.Compliance;
using Microsoft.Graph.Beta.Connections;
using Microsoft.Graph.Beta.Contacts;
using Microsoft.Graph.Beta.Contracts;
using Microsoft.Graph.Beta.DataClassification;
using Microsoft.Graph.Beta.DataPolicyOperations;
using Microsoft.Graph.Beta.DeviceAppManagement;
using Microsoft.Graph.Beta.DeviceManagement;
using Microsoft.Graph.Beta.Devices;
using Microsoft.Graph.Beta.DevicesWithDeviceId;
using Microsoft.Graph.Beta.DirectoryNamespace;
using Microsoft.Graph.Beta.DirectoryObjects;
using Microsoft.Graph.Beta.DirectoryRoleTemplates;
using Microsoft.Graph.Beta.DirectoryRoles;
using Microsoft.Graph.Beta.DirectoryRolesWithRoleTemplateId;
using Microsoft.Graph.Beta.DirectorySettingTemplates;
using Microsoft.Graph.Beta.DomainDnsRecords;
using Microsoft.Graph.Beta.Domains;
using Microsoft.Graph.Beta.Drives;
using Microsoft.Graph.Beta.Education;
using Microsoft.Graph.Beta.EmployeeExperience;
using Microsoft.Graph.Beta.External;
using Microsoft.Graph.Beta.FilterOperators;
using Microsoft.Graph.Beta.FilteringPolicies;
using Microsoft.Graph.Beta.Financials;
using Microsoft.Graph.Beta.Functions;
using Microsoft.Graph.Beta.GovernanceResources;
using Microsoft.Graph.Beta.GovernanceRoleAssignmentRequests;
using Microsoft.Graph.Beta.GovernanceRoleAssignments;
using Microsoft.Graph.Beta.GovernanceRoleDefinitions;
using Microsoft.Graph.Beta.GovernanceRoleSettings;
using Microsoft.Graph.Beta.GovernanceSubjects;
using Microsoft.Graph.Beta.GroupLifecyclePolicies;
using Microsoft.Graph.Beta.Groups;
using Microsoft.Graph.Beta.GroupsWithUniqueName;
using Microsoft.Graph.Beta.Identity;
using Microsoft.Graph.Beta.IdentityGovernance;
using Microsoft.Graph.Beta.IdentityProtection;
using Microsoft.Graph.Beta.IdentityProviders;
using Microsoft.Graph.Beta.InformationProtection;
using Microsoft.Graph.Beta.Invitations;
using Microsoft.Graph.Beta.Me;
using Microsoft.Graph.Beta.MessageEvents;
using Microsoft.Graph.Beta.MessageRecipients;
using Microsoft.Graph.Beta.MessageTraces;
using Microsoft.Graph.Beta.MobilityManagementPolicies;
using Microsoft.Graph.Beta.Monitoring;
using Microsoft.Graph.Beta.Network;
using Microsoft.Graph.Beta.NetworkAccess;
using Microsoft.Graph.Beta.Oauth2PermissionGrants;
using Microsoft.Graph.Beta.OnPremisesPublishingProfiles;
using Microsoft.Graph.Beta.Organization;
using Microsoft.Graph.Beta.PayloadResponse;
using Microsoft.Graph.Beta.PermissionGrants;
using Microsoft.Graph.Beta.Places;
using Microsoft.Graph.Beta.PlacesWithPlaceId;
using Microsoft.Graph.Beta.Planner;
using Microsoft.Graph.Beta.Policies;
using Microsoft.Graph.Beta.Print;
using Microsoft.Graph.Beta.Privacy;
using Microsoft.Graph.Beta.PrivilegedAccess;
using Microsoft.Graph.Beta.PrivilegedApproval;
using Microsoft.Graph.Beta.PrivilegedOperationEvents;
using Microsoft.Graph.Beta.PrivilegedRoleAssignmentRequests;
using Microsoft.Graph.Beta.PrivilegedRoleAssignments;
using Microsoft.Graph.Beta.PrivilegedRoles;
using Microsoft.Graph.Beta.PrivilegedSignupStatus;
using Microsoft.Graph.Beta.ProgramControlTypes;
using Microsoft.Graph.Beta.ProgramControls;
using Microsoft.Graph.Beta.Programs;
using Microsoft.Graph.Beta.Reports;
using Microsoft.Graph.Beta.RiskDetections;
using Microsoft.Graph.Beta.RiskyUsers;
using Microsoft.Graph.Beta.RoleManagement;
using Microsoft.Graph.Beta.SchemaExtensions;
using Microsoft.Graph.Beta.ScopedRoleMemberships;
using Microsoft.Graph.Beta.Search;
using Microsoft.Graph.Beta.Security;
using Microsoft.Graph.Beta.ServicePrincipals;
using Microsoft.Graph.Beta.ServicePrincipalsWithAppId;
using Microsoft.Graph.Beta.Settings;
using Microsoft.Graph.Beta.Shares;
using Microsoft.Graph.Beta.Sites;
using Microsoft.Graph.Beta.Solutions;
using Microsoft.Graph.Beta.Storage;
using Microsoft.Graph.Beta.SubscribedSkus;
using Microsoft.Graph.Beta.Subscriptions;
using Microsoft.Graph.Beta.TeamTemplateDefinition;
using Microsoft.Graph.Beta.Teams;
using Microsoft.Graph.Beta.TeamsTemplates;
using Microsoft.Graph.Beta.Teamwork;
using Microsoft.Graph.Beta.TenantRelationships;
using Microsoft.Graph.Beta.TermStore;
using Microsoft.Graph.Beta.ThreatSubmission;
using Microsoft.Graph.Beta.TrustFramework;
using Microsoft.Graph.Beta.Users;
using Microsoft.Graph.Beta.Workplace;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Store;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Microsoft.Graph.Beta
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BaseGraphServiceClient : BaseRequestBuilder
    {
        /// <summary>Provides operations to manage the collection of accessReviewDecision entities.</summary>
        public global::Microsoft.Graph.Beta.AccessReviewDecisions.AccessReviewDecisionsRequestBuilder AccessReviewDecisions
        {
            get => new global::Microsoft.Graph.Beta.AccessReviewDecisions.AccessReviewDecisionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of accessReview entities.</summary>
        public global::Microsoft.Graph.Beta.AccessReviews.AccessReviewsRequestBuilder AccessReviews
        {
            get => new global::Microsoft.Graph.Beta.AccessReviews.AccessReviewsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of activityStatistics entities.</summary>
        public global::Microsoft.Graph.Beta.Activitystatistics.ActivitystatisticsRequestBuilder Activitystatistics
        {
            get => new global::Microsoft.Graph.Beta.Activitystatistics.ActivitystatisticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the admin singleton.</summary>
        public global::Microsoft.Graph.Beta.Admin.AdminRequestBuilder Admin
        {
            get => new global::Microsoft.Graph.Beta.Admin.AdminRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of administrativeUnit entities.</summary>
        public global::Microsoft.Graph.Beta.AdministrativeUnits.AdministrativeUnitsRequestBuilder AdministrativeUnits
        {
            get => new global::Microsoft.Graph.Beta.AdministrativeUnits.AdministrativeUnitsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of agreementAcceptance entities.</summary>
        public global::Microsoft.Graph.Beta.AgreementAcceptances.AgreementAcceptancesRequestBuilder AgreementAcceptances
        {
            get => new global::Microsoft.Graph.Beta.AgreementAcceptances.AgreementAcceptancesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of agreement entities.</summary>
        public global::Microsoft.Graph.Beta.Agreements.AgreementsRequestBuilder Agreements
        {
            get => new global::Microsoft.Graph.Beta.Agreements.AgreementsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of allowedDataLocation entities.</summary>
        public global::Microsoft.Graph.Beta.AllowedDataLocations.AllowedDataLocationsRequestBuilder AllowedDataLocations
        {
            get => new global::Microsoft.Graph.Beta.AllowedDataLocations.AllowedDataLocationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the commsApplication singleton.</summary>
        public global::Microsoft.Graph.Beta.App.AppRequestBuilder App
        {
            get => new global::Microsoft.Graph.Beta.App.AppRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the appCatalogs singleton.</summary>
        public global::Microsoft.Graph.Beta.AppCatalogs.AppCatalogsRequestBuilder AppCatalogs
        {
            get => new global::Microsoft.Graph.Beta.AppCatalogs.AppCatalogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of application entities.</summary>
        public global::Microsoft.Graph.Beta.Applications.ApplicationsRequestBuilder Applications
        {
            get => new global::Microsoft.Graph.Beta.Applications.ApplicationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of applicationTemplate entities.</summary>
        public global::Microsoft.Graph.Beta.ApplicationTemplates.ApplicationTemplatesRequestBuilder ApplicationTemplates
        {
            get => new global::Microsoft.Graph.Beta.ApplicationTemplates.ApplicationTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of appRoleAssignment entities.</summary>
        public global::Microsoft.Graph.Beta.AppRoleAssignments.AppRoleAssignmentsRequestBuilder AppRoleAssignments
        {
            get => new global::Microsoft.Graph.Beta.AppRoleAssignments.AppRoleAssignmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of approvalWorkflowProvider entities.</summary>
        public global::Microsoft.Graph.Beta.ApprovalWorkflowProviders.ApprovalWorkflowProvidersRequestBuilder ApprovalWorkflowProviders
        {
            get => new global::Microsoft.Graph.Beta.ApprovalWorkflowProviders.ApprovalWorkflowProvidersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the auditLogRoot singleton.</summary>
        public global::Microsoft.Graph.Beta.AuditLogs.AuditLogsRequestBuilder AuditLogs
        {
            get => new global::Microsoft.Graph.Beta.AuditLogs.AuditLogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of authenticationMethodConfiguration entities.</summary>
        public global::Microsoft.Graph.Beta.AuthenticationMethodConfigurations.AuthenticationMethodConfigurationsRequestBuilder AuthenticationMethodConfigurations
        {
            get => new global::Microsoft.Graph.Beta.AuthenticationMethodConfigurations.AuthenticationMethodConfigurationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the authenticationMethodsPolicy singleton.</summary>
        public global::Microsoft.Graph.Beta.AuthenticationMethodsPolicy.AuthenticationMethodsPolicyRequestBuilder AuthenticationMethodsPolicy
        {
            get => new global::Microsoft.Graph.Beta.AuthenticationMethodsPolicy.AuthenticationMethodsPolicyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of bookingBusiness entities.</summary>
        public global::Microsoft.Graph.Beta.BookingBusinesses.BookingBusinessesRequestBuilder BookingBusinesses
        {
            get => new global::Microsoft.Graph.Beta.BookingBusinesses.BookingBusinessesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of bookingCurrency entities.</summary>
        public global::Microsoft.Graph.Beta.BookingCurrencies.BookingCurrenciesRequestBuilder BookingCurrencies
        {
            get => new global::Microsoft.Graph.Beta.BookingCurrencies.BookingCurrenciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of businessFlowTemplate entities.</summary>
        public global::Microsoft.Graph.Beta.BusinessFlowTemplates.BusinessFlowTemplatesRequestBuilder BusinessFlowTemplates
        {
            get => new global::Microsoft.Graph.Beta.BusinessFlowTemplates.BusinessFlowTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of certificateBasedAuthConfiguration entities.</summary>
        public global::Microsoft.Graph.Beta.CertificateBasedAuthConfiguration.CertificateBasedAuthConfigurationRequestBuilder CertificateBasedAuthConfiguration
        {
            get => new global::Microsoft.Graph.Beta.CertificateBasedAuthConfiguration.CertificateBasedAuthConfigurationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of chat entities.</summary>
        public global::Microsoft.Graph.Beta.Chats.ChatsRequestBuilder Chats
        {
            get => new global::Microsoft.Graph.Beta.Chats.ChatsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of command entities.</summary>
        public global::Microsoft.Graph.Beta.Commands.CommandsRequestBuilder Commands
        {
            get => new global::Microsoft.Graph.Beta.Commands.CommandsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the cloudCommunications singleton.</summary>
        public global::Microsoft.Graph.Beta.Communications.CommunicationsRequestBuilder Communications
        {
            get => new global::Microsoft.Graph.Beta.Communications.CommunicationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the compliance singleton.</summary>
        public global::Microsoft.Graph.Beta.Compliance.ComplianceRequestBuilder Compliance
        {
            get => new global::Microsoft.Graph.Beta.Compliance.ComplianceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of externalConnection entities.</summary>
        public global::Microsoft.Graph.Beta.Connections.ConnectionsRequestBuilder Connections
        {
            get => new global::Microsoft.Graph.Beta.Connections.ConnectionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of orgContact entities.</summary>
        public global::Microsoft.Graph.Beta.Contacts.ContactsRequestBuilder Contacts
        {
            get => new global::Microsoft.Graph.Beta.Contacts.ContactsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of contract entities.</summary>
        public global::Microsoft.Graph.Beta.Contracts.ContractsRequestBuilder Contracts
        {
            get => new global::Microsoft.Graph.Beta.Contracts.ContractsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the dataClassificationService singleton.</summary>
        public global::Microsoft.Graph.Beta.DataClassification.DataClassificationRequestBuilder DataClassification
        {
            get => new global::Microsoft.Graph.Beta.DataClassification.DataClassificationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of dataPolicyOperation entities.</summary>
        public global::Microsoft.Graph.Beta.DataPolicyOperations.DataPolicyOperationsRequestBuilder DataPolicyOperations
        {
            get => new global::Microsoft.Graph.Beta.DataPolicyOperations.DataPolicyOperationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the deviceAppManagement singleton.</summary>
        public global::Microsoft.Graph.Beta.DeviceAppManagement.DeviceAppManagementRequestBuilder DeviceAppManagement
        {
            get => new global::Microsoft.Graph.Beta.DeviceAppManagement.DeviceAppManagementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the deviceManagement singleton.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.DeviceManagementRequestBuilder DeviceManagement
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.DeviceManagementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of device entities.</summary>
        public global::Microsoft.Graph.Beta.Devices.DevicesRequestBuilder Devices
        {
            get => new global::Microsoft.Graph.Beta.Devices.DevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the directory singleton.</summary>
        public global::Microsoft.Graph.Beta.DirectoryNamespace.DirectoryRequestBuilder Directory
        {
            get => new global::Microsoft.Graph.Beta.DirectoryNamespace.DirectoryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of directoryObject entities.</summary>
        public global::Microsoft.Graph.Beta.DirectoryObjects.DirectoryObjectsRequestBuilder DirectoryObjects
        {
            get => new global::Microsoft.Graph.Beta.DirectoryObjects.DirectoryObjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of directoryRole entities.</summary>
        public global::Microsoft.Graph.Beta.DirectoryRoles.DirectoryRolesRequestBuilder DirectoryRoles
        {
            get => new global::Microsoft.Graph.Beta.DirectoryRoles.DirectoryRolesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of directoryRoleTemplate entities.</summary>
        public global::Microsoft.Graph.Beta.DirectoryRoleTemplates.DirectoryRoleTemplatesRequestBuilder DirectoryRoleTemplates
        {
            get => new global::Microsoft.Graph.Beta.DirectoryRoleTemplates.DirectoryRoleTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of directorySettingTemplate entities.</summary>
        public global::Microsoft.Graph.Beta.DirectorySettingTemplates.DirectorySettingTemplatesRequestBuilder DirectorySettingTemplates
        {
            get => new global::Microsoft.Graph.Beta.DirectorySettingTemplates.DirectorySettingTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of domainDnsRecord entities.</summary>
        public global::Microsoft.Graph.Beta.DomainDnsRecords.DomainDnsRecordsRequestBuilder DomainDnsRecords
        {
            get => new global::Microsoft.Graph.Beta.DomainDnsRecords.DomainDnsRecordsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of domain entities.</summary>
        public global::Microsoft.Graph.Beta.Domains.DomainsRequestBuilder Domains
        {
            get => new global::Microsoft.Graph.Beta.Domains.DomainsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of drive entities.</summary>
        public global::Microsoft.Graph.Beta.Drives.DrivesRequestBuilder Drives
        {
            get => new global::Microsoft.Graph.Beta.Drives.DrivesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the educationRoot singleton.</summary>
        public global::Microsoft.Graph.Beta.Education.EducationRequestBuilder Education
        {
            get => new global::Microsoft.Graph.Beta.Education.EducationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the employeeExperience singleton.</summary>
        public global::Microsoft.Graph.Beta.EmployeeExperience.EmployeeExperienceRequestBuilder EmployeeExperience
        {
            get => new global::Microsoft.Graph.Beta.EmployeeExperience.EmployeeExperienceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the external singleton.</summary>
        public global::Microsoft.Graph.Beta.External.ExternalRequestBuilder External
        {
            get => new global::Microsoft.Graph.Beta.External.ExternalRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of filteringPolicy entities.</summary>
        public global::Microsoft.Graph.Beta.FilteringPolicies.FilteringPoliciesRequestBuilder FilteringPolicies
        {
            get => new global::Microsoft.Graph.Beta.FilteringPolicies.FilteringPoliciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of filterOperatorSchema entities.</summary>
        public global::Microsoft.Graph.Beta.FilterOperators.FilterOperatorsRequestBuilder FilterOperators
        {
            get => new global::Microsoft.Graph.Beta.FilterOperators.FilterOperatorsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the financials singleton.</summary>
        public global::Microsoft.Graph.Beta.Financials.FinancialsRequestBuilder Financials
        {
            get => new global::Microsoft.Graph.Beta.Financials.FinancialsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of attributeMappingFunctionSchema entities.</summary>
        public global::Microsoft.Graph.Beta.Functions.FunctionsRequestBuilder Functions
        {
            get => new global::Microsoft.Graph.Beta.Functions.FunctionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of governanceResource entities.</summary>
        public global::Microsoft.Graph.Beta.GovernanceResources.GovernanceResourcesRequestBuilder GovernanceResources
        {
            get => new global::Microsoft.Graph.Beta.GovernanceResources.GovernanceResourcesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of governanceRoleAssignmentRequest entities.</summary>
        public global::Microsoft.Graph.Beta.GovernanceRoleAssignmentRequests.GovernanceRoleAssignmentRequestsRequestBuilder GovernanceRoleAssignmentRequests
        {
            get => new global::Microsoft.Graph.Beta.GovernanceRoleAssignmentRequests.GovernanceRoleAssignmentRequestsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of governanceRoleAssignment entities.</summary>
        public global::Microsoft.Graph.Beta.GovernanceRoleAssignments.GovernanceRoleAssignmentsRequestBuilder GovernanceRoleAssignments
        {
            get => new global::Microsoft.Graph.Beta.GovernanceRoleAssignments.GovernanceRoleAssignmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of governanceRoleDefinition entities.</summary>
        public global::Microsoft.Graph.Beta.GovernanceRoleDefinitions.GovernanceRoleDefinitionsRequestBuilder GovernanceRoleDefinitions
        {
            get => new global::Microsoft.Graph.Beta.GovernanceRoleDefinitions.GovernanceRoleDefinitionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of governanceRoleSetting entities.</summary>
        public global::Microsoft.Graph.Beta.GovernanceRoleSettings.GovernanceRoleSettingsRequestBuilder GovernanceRoleSettings
        {
            get => new global::Microsoft.Graph.Beta.GovernanceRoleSettings.GovernanceRoleSettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of governanceSubject entities.</summary>
        public global::Microsoft.Graph.Beta.GovernanceSubjects.GovernanceSubjectsRequestBuilder GovernanceSubjects
        {
            get => new global::Microsoft.Graph.Beta.GovernanceSubjects.GovernanceSubjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of groupLifecyclePolicy entities.</summary>
        public global::Microsoft.Graph.Beta.GroupLifecyclePolicies.GroupLifecyclePoliciesRequestBuilder GroupLifecyclePolicies
        {
            get => new global::Microsoft.Graph.Beta.GroupLifecyclePolicies.GroupLifecyclePoliciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of group entities.</summary>
        public global::Microsoft.Graph.Beta.Groups.GroupsRequestBuilder Groups
        {
            get => new global::Microsoft.Graph.Beta.Groups.GroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the identityContainer singleton.</summary>
        public global::Microsoft.Graph.Beta.Identity.IdentityRequestBuilder Identity
        {
            get => new global::Microsoft.Graph.Beta.Identity.IdentityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the identityGovernance singleton.</summary>
        public global::Microsoft.Graph.Beta.IdentityGovernance.IdentityGovernanceRequestBuilder IdentityGovernance
        {
            get => new global::Microsoft.Graph.Beta.IdentityGovernance.IdentityGovernanceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the identityProtectionRoot singleton.</summary>
        public global::Microsoft.Graph.Beta.IdentityProtection.IdentityProtectionRequestBuilder IdentityProtection
        {
            get => new global::Microsoft.Graph.Beta.IdentityProtection.IdentityProtectionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of identityProvider entities.</summary>
        public global::Microsoft.Graph.Beta.IdentityProviders.IdentityProvidersRequestBuilder IdentityProviders
        {
            get => new global::Microsoft.Graph.Beta.IdentityProviders.IdentityProvidersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the informationProtection singleton.</summary>
        public global::Microsoft.Graph.Beta.InformationProtection.InformationProtectionRequestBuilder InformationProtection
        {
            get => new global::Microsoft.Graph.Beta.InformationProtection.InformationProtectionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of invitation entities.</summary>
        public global::Microsoft.Graph.Beta.Invitations.InvitationsRequestBuilder Invitations
        {
            get => new global::Microsoft.Graph.Beta.Invitations.InvitationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the user singleton.</summary>
        public global::Microsoft.Graph.Beta.Me.MeRequestBuilder Me
        {
            get => new global::Microsoft.Graph.Beta.Me.MeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of messageEvent entities.</summary>
        public global::Microsoft.Graph.Beta.MessageEvents.MessageEventsRequestBuilder MessageEvents
        {
            get => new global::Microsoft.Graph.Beta.MessageEvents.MessageEventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of messageRecipient entities.</summary>
        public global::Microsoft.Graph.Beta.MessageRecipients.MessageRecipientsRequestBuilder MessageRecipients
        {
            get => new global::Microsoft.Graph.Beta.MessageRecipients.MessageRecipientsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of messageTrace entities.</summary>
        public global::Microsoft.Graph.Beta.MessageTraces.MessageTracesRequestBuilder MessageTraces
        {
            get => new global::Microsoft.Graph.Beta.MessageTraces.MessageTracesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of mobilityManagementPolicy entities.</summary>
        public global::Microsoft.Graph.Beta.MobilityManagementPolicies.MobilityManagementPoliciesRequestBuilder MobilityManagementPolicies
        {
            get => new global::Microsoft.Graph.Beta.MobilityManagementPolicies.MobilityManagementPoliciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the monitoring singleton.</summary>
        public global::Microsoft.Graph.Beta.Monitoring.MonitoringRequestBuilder Monitoring
        {
            get => new global::Microsoft.Graph.Beta.Monitoring.MonitoringRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the network singleton.</summary>
        public global::Microsoft.Graph.Beta.Network.NetworkRequestBuilder Network
        {
            get => new global::Microsoft.Graph.Beta.Network.NetworkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the networkAccessRoot singleton.</summary>
        public global::Microsoft.Graph.Beta.NetworkAccess.NetworkAccessRequestBuilder NetworkAccess
        {
            get => new global::Microsoft.Graph.Beta.NetworkAccess.NetworkAccessRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of oAuth2PermissionGrant entities.</summary>
        public global::Microsoft.Graph.Beta.Oauth2PermissionGrants.Oauth2PermissionGrantsRequestBuilder Oauth2PermissionGrants
        {
            get => new global::Microsoft.Graph.Beta.Oauth2PermissionGrants.Oauth2PermissionGrantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of onPremisesPublishingProfile entities.</summary>
        public global::Microsoft.Graph.Beta.OnPremisesPublishingProfiles.OnPremisesPublishingProfilesRequestBuilder OnPremisesPublishingProfiles
        {
            get => new global::Microsoft.Graph.Beta.OnPremisesPublishingProfiles.OnPremisesPublishingProfilesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of organization entities.</summary>
        public global::Microsoft.Graph.Beta.Organization.OrganizationRequestBuilder Organization
        {
            get => new global::Microsoft.Graph.Beta.Organization.OrganizationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of payloadResponse entities.</summary>
        public global::Microsoft.Graph.Beta.PayloadResponse.PayloadResponseRequestBuilder PayloadResponse
        {
            get => new global::Microsoft.Graph.Beta.PayloadResponse.PayloadResponseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of resourceSpecificPermissionGrant entities.</summary>
        public global::Microsoft.Graph.Beta.PermissionGrants.PermissionGrantsRequestBuilder PermissionGrants
        {
            get => new global::Microsoft.Graph.Beta.PermissionGrants.PermissionGrantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The places property</summary>
        public global::Microsoft.Graph.Beta.Places.PlacesRequestBuilder Places
        {
            get => new global::Microsoft.Graph.Beta.Places.PlacesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the planner singleton.</summary>
        public global::Microsoft.Graph.Beta.Planner.PlannerRequestBuilder Planner
        {
            get => new global::Microsoft.Graph.Beta.Planner.PlannerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the policyRoot singleton.</summary>
        public global::Microsoft.Graph.Beta.Policies.PoliciesRequestBuilder Policies
        {
            get => new global::Microsoft.Graph.Beta.Policies.PoliciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the print singleton.</summary>
        public global::Microsoft.Graph.Beta.Print.PrintRequestBuilder Print
        {
            get => new global::Microsoft.Graph.Beta.Print.PrintRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the privacy singleton.</summary>
        public global::Microsoft.Graph.Beta.Privacy.PrivacyRequestBuilder Privacy
        {
            get => new global::Microsoft.Graph.Beta.Privacy.PrivacyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of privilegedAccess entities.</summary>
        public global::Microsoft.Graph.Beta.PrivilegedAccess.PrivilegedAccessRequestBuilder PrivilegedAccess
        {
            get => new global::Microsoft.Graph.Beta.PrivilegedAccess.PrivilegedAccessRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of privilegedApproval entities.</summary>
        public global::Microsoft.Graph.Beta.PrivilegedApproval.PrivilegedApprovalRequestBuilder PrivilegedApproval
        {
            get => new global::Microsoft.Graph.Beta.PrivilegedApproval.PrivilegedApprovalRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of privilegedOperationEvent entities.</summary>
        public global::Microsoft.Graph.Beta.PrivilegedOperationEvents.PrivilegedOperationEventsRequestBuilder PrivilegedOperationEvents
        {
            get => new global::Microsoft.Graph.Beta.PrivilegedOperationEvents.PrivilegedOperationEventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of privilegedRoleAssignmentRequest entities.</summary>
        public global::Microsoft.Graph.Beta.PrivilegedRoleAssignmentRequests.PrivilegedRoleAssignmentRequestsRequestBuilder PrivilegedRoleAssignmentRequests
        {
            get => new global::Microsoft.Graph.Beta.PrivilegedRoleAssignmentRequests.PrivilegedRoleAssignmentRequestsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of privilegedRoleAssignment entities.</summary>
        public global::Microsoft.Graph.Beta.PrivilegedRoleAssignments.PrivilegedRoleAssignmentsRequestBuilder PrivilegedRoleAssignments
        {
            get => new global::Microsoft.Graph.Beta.PrivilegedRoleAssignments.PrivilegedRoleAssignmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of privilegedRole entities.</summary>
        public global::Microsoft.Graph.Beta.PrivilegedRoles.PrivilegedRolesRequestBuilder PrivilegedRoles
        {
            get => new global::Microsoft.Graph.Beta.PrivilegedRoles.PrivilegedRolesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of privilegedSignupStatus entities.</summary>
        public global::Microsoft.Graph.Beta.PrivilegedSignupStatus.PrivilegedSignupStatusRequestBuilder PrivilegedSignupStatus
        {
            get => new global::Microsoft.Graph.Beta.PrivilegedSignupStatus.PrivilegedSignupStatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of programControl entities.</summary>
        public global::Microsoft.Graph.Beta.ProgramControls.ProgramControlsRequestBuilder ProgramControls
        {
            get => new global::Microsoft.Graph.Beta.ProgramControls.ProgramControlsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of programControlType entities.</summary>
        public global::Microsoft.Graph.Beta.ProgramControlTypes.ProgramControlTypesRequestBuilder ProgramControlTypes
        {
            get => new global::Microsoft.Graph.Beta.ProgramControlTypes.ProgramControlTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of program entities.</summary>
        public global::Microsoft.Graph.Beta.Programs.ProgramsRequestBuilder Programs
        {
            get => new global::Microsoft.Graph.Beta.Programs.ProgramsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the reportRoot singleton.</summary>
        public global::Microsoft.Graph.Beta.Reports.ReportsRequestBuilder Reports
        {
            get => new global::Microsoft.Graph.Beta.Reports.ReportsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of riskDetection entities.</summary>
        public global::Microsoft.Graph.Beta.RiskDetections.RiskDetectionsRequestBuilder RiskDetections
        {
            get => new global::Microsoft.Graph.Beta.RiskDetections.RiskDetectionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of riskyUser entities.</summary>
        public global::Microsoft.Graph.Beta.RiskyUsers.RiskyUsersRequestBuilder RiskyUsers
        {
            get => new global::Microsoft.Graph.Beta.RiskyUsers.RiskyUsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the roleManagement singleton.</summary>
        public global::Microsoft.Graph.Beta.RoleManagement.RoleManagementRequestBuilder RoleManagement
        {
            get => new global::Microsoft.Graph.Beta.RoleManagement.RoleManagementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of schemaExtension entities.</summary>
        public global::Microsoft.Graph.Beta.SchemaExtensions.SchemaExtensionsRequestBuilder SchemaExtensions
        {
            get => new global::Microsoft.Graph.Beta.SchemaExtensions.SchemaExtensionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of scopedRoleMembership entities.</summary>
        public global::Microsoft.Graph.Beta.ScopedRoleMemberships.ScopedRoleMembershipsRequestBuilder ScopedRoleMemberships
        {
            get => new global::Microsoft.Graph.Beta.ScopedRoleMemberships.ScopedRoleMembershipsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the searchEntity singleton.</summary>
        public global::Microsoft.Graph.Beta.Search.SearchRequestBuilder Search
        {
            get => new global::Microsoft.Graph.Beta.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the security singleton.</summary>
        public global::Microsoft.Graph.Beta.Security.SecurityRequestBuilder Security
        {
            get => new global::Microsoft.Graph.Beta.Security.SecurityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of servicePrincipal entities.</summary>
        public global::Microsoft.Graph.Beta.ServicePrincipals.ServicePrincipalsRequestBuilder ServicePrincipals
        {
            get => new global::Microsoft.Graph.Beta.ServicePrincipals.ServicePrincipalsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of directorySetting entities.</summary>
        public global::Microsoft.Graph.Beta.Settings.SettingsRequestBuilder Settings
        {
            get => new global::Microsoft.Graph.Beta.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of sharedDriveItem entities.</summary>
        public global::Microsoft.Graph.Beta.Shares.SharesRequestBuilder Shares
        {
            get => new global::Microsoft.Graph.Beta.Shares.SharesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of site entities.</summary>
        public global::Microsoft.Graph.Beta.Sites.SitesRequestBuilder Sites
        {
            get => new global::Microsoft.Graph.Beta.Sites.SitesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the solutionsRoot singleton.</summary>
        public global::Microsoft.Graph.Beta.Solutions.SolutionsRequestBuilder Solutions
        {
            get => new global::Microsoft.Graph.Beta.Solutions.SolutionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the storage singleton.</summary>
        public global::Microsoft.Graph.Beta.Storage.StorageRequestBuilder Storage
        {
            get => new global::Microsoft.Graph.Beta.Storage.StorageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of subscribedSku entities.</summary>
        public global::Microsoft.Graph.Beta.SubscribedSkus.SubscribedSkusRequestBuilder SubscribedSkus
        {
            get => new global::Microsoft.Graph.Beta.SubscribedSkus.SubscribedSkusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of subscription entities.</summary>
        public global::Microsoft.Graph.Beta.Subscriptions.SubscriptionsRequestBuilder Subscriptions
        {
            get => new global::Microsoft.Graph.Beta.Subscriptions.SubscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of team entities.</summary>
        public global::Microsoft.Graph.Beta.Teams.TeamsRequestBuilder Teams
        {
            get => new global::Microsoft.Graph.Beta.Teams.TeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of teamsTemplate entities.</summary>
        public global::Microsoft.Graph.Beta.TeamsTemplates.TeamsTemplatesRequestBuilder TeamsTemplates
        {
            get => new global::Microsoft.Graph.Beta.TeamsTemplates.TeamsTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of teamTemplateDefinition entities.</summary>
        public global::Microsoft.Graph.Beta.TeamTemplateDefinition.TeamTemplateDefinitionRequestBuilder TeamTemplateDefinition
        {
            get => new global::Microsoft.Graph.Beta.TeamTemplateDefinition.TeamTemplateDefinitionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the teamwork singleton.</summary>
        public global::Microsoft.Graph.Beta.Teamwork.TeamworkRequestBuilder Teamwork
        {
            get => new global::Microsoft.Graph.Beta.Teamwork.TeamworkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the tenantRelationship singleton.</summary>
        public global::Microsoft.Graph.Beta.TenantRelationships.TenantRelationshipsRequestBuilder TenantRelationships
        {
            get => new global::Microsoft.Graph.Beta.TenantRelationships.TenantRelationshipsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the store singleton.</summary>
        public global::Microsoft.Graph.Beta.TermStore.TermStoreRequestBuilder TermStore
        {
            get => new global::Microsoft.Graph.Beta.TermStore.TermStoreRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the threatSubmissionRoot singleton.</summary>
        public global::Microsoft.Graph.Beta.ThreatSubmission.ThreatSubmissionRequestBuilder ThreatSubmission
        {
            get => new global::Microsoft.Graph.Beta.ThreatSubmission.ThreatSubmissionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the trustFramework singleton.</summary>
        public global::Microsoft.Graph.Beta.TrustFramework.TrustFrameworkRequestBuilder TrustFramework
        {
            get => new global::Microsoft.Graph.Beta.TrustFramework.TrustFrameworkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of user entities.</summary>
        public global::Microsoft.Graph.Beta.Users.UsersRequestBuilder Users
        {
            get => new global::Microsoft.Graph.Beta.Users.UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the workplace singleton.</summary>
        public global::Microsoft.Graph.Beta.Workplace.WorkplaceRequestBuilder Workplace
        {
            get => new global::Microsoft.Graph.Beta.Workplace.WorkplaceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Provides operations to manage the collection of application entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.ApplicationsWithAppId.ApplicationsWithAppIdRequestBuilder"/></returns>
        /// <param name="appId">Alternate key of application</param>
        public global::Microsoft.Graph.Beta.ApplicationsWithAppId.ApplicationsWithAppIdRequestBuilder ApplicationsWithAppId(string appId)
        {
            if(string.IsNullOrEmpty(appId)) throw new ArgumentNullException(nameof(appId));
            return new global::Microsoft.Graph.Beta.ApplicationsWithAppId.ApplicationsWithAppIdRequestBuilder(PathParameters, RequestAdapter, appId);
        }
        /// <summary>
        /// Provides operations to manage the collection of application entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.ApplicationsWithUniqueName.ApplicationsWithUniqueNameRequestBuilder"/></returns>
        /// <param name="uniqueName">Alternate key of application</param>
        public global::Microsoft.Graph.Beta.ApplicationsWithUniqueName.ApplicationsWithUniqueNameRequestBuilder ApplicationsWithUniqueName(string uniqueName)
        {
            if(string.IsNullOrEmpty(uniqueName)) throw new ArgumentNullException(nameof(uniqueName));
            return new global::Microsoft.Graph.Beta.ApplicationsWithUniqueName.ApplicationsWithUniqueNameRequestBuilder(PathParameters, RequestAdapter, uniqueName);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.BaseGraphServiceClient"/> and sets the default values.
        /// </summary>
        /// <param name="backingStore">The backing store to use for the models.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BaseGraphServiceClient(IRequestAdapter requestAdapter, IBackingStoreFactory backingStore = default) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://graph.microsoft.com/beta";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
            RequestAdapter.EnableBackingStore(backingStore);
        }
        /// <summary>
        /// Provides operations to manage the collection of device entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.DevicesWithDeviceId.DevicesWithDeviceIdRequestBuilder"/></returns>
        /// <param name="deviceId">Alternate key of device</param>
        public global::Microsoft.Graph.Beta.DevicesWithDeviceId.DevicesWithDeviceIdRequestBuilder DevicesWithDeviceId(string deviceId)
        {
            if(string.IsNullOrEmpty(deviceId)) throw new ArgumentNullException(nameof(deviceId));
            return new global::Microsoft.Graph.Beta.DevicesWithDeviceId.DevicesWithDeviceIdRequestBuilder(PathParameters, RequestAdapter, deviceId);
        }
        /// <summary>
        /// Provides operations to manage the collection of directoryRole entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.DirectoryRolesWithRoleTemplateId.DirectoryRolesWithRoleTemplateIdRequestBuilder"/></returns>
        /// <param name="roleTemplateId">Alternate key of directoryRole</param>
        public global::Microsoft.Graph.Beta.DirectoryRolesWithRoleTemplateId.DirectoryRolesWithRoleTemplateIdRequestBuilder DirectoryRolesWithRoleTemplateId(string roleTemplateId)
        {
            if(string.IsNullOrEmpty(roleTemplateId)) throw new ArgumentNullException(nameof(roleTemplateId));
            return new global::Microsoft.Graph.Beta.DirectoryRolesWithRoleTemplateId.DirectoryRolesWithRoleTemplateIdRequestBuilder(PathParameters, RequestAdapter, roleTemplateId);
        }
        /// <summary>
        /// Provides operations to manage the collection of group entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.GroupsWithUniqueName.GroupsWithUniqueNameRequestBuilder"/></returns>
        /// <param name="uniqueName">Alternate key of group</param>
        public global::Microsoft.Graph.Beta.GroupsWithUniqueName.GroupsWithUniqueNameRequestBuilder GroupsWithUniqueName(string uniqueName)
        {
            if(string.IsNullOrEmpty(uniqueName)) throw new ArgumentNullException(nameof(uniqueName));
            return new global::Microsoft.Graph.Beta.GroupsWithUniqueName.GroupsWithUniqueNameRequestBuilder(PathParameters, RequestAdapter, uniqueName);
        }
        /// <summary>
        /// Provides operations to manage the collection of place entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.PlacesWithPlaceId.PlacesWithPlaceIdRequestBuilder"/></returns>
        /// <param name="placeId">Alternate key of place</param>
        public global::Microsoft.Graph.Beta.PlacesWithPlaceId.PlacesWithPlaceIdRequestBuilder PlacesWithPlaceId(string placeId)
        {
            if(string.IsNullOrEmpty(placeId)) throw new ArgumentNullException(nameof(placeId));
            return new global::Microsoft.Graph.Beta.PlacesWithPlaceId.PlacesWithPlaceIdRequestBuilder(PathParameters, RequestAdapter, placeId);
        }
        /// <summary>
        /// Provides operations to manage the collection of servicePrincipal entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.ServicePrincipalsWithAppId.ServicePrincipalsWithAppIdRequestBuilder"/></returns>
        /// <param name="appId">Alternate key of servicePrincipal</param>
        public global::Microsoft.Graph.Beta.ServicePrincipalsWithAppId.ServicePrincipalsWithAppIdRequestBuilder ServicePrincipalsWithAppId(string appId)
        {
            if(string.IsNullOrEmpty(appId)) throw new ArgumentNullException(nameof(appId));
            return new global::Microsoft.Graph.Beta.ServicePrincipalsWithAppId.ServicePrincipalsWithAppIdRequestBuilder(PathParameters, RequestAdapter, appId);
        }
    }
}
#pragma warning restore CS0618
