// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Microsoft Tunnel Configuration.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class MicrosoftTunnelConfiguration : Entity
    {
    
		///<summary>
		/// The MicrosoftTunnelConfiguration constructor
		///</summary>
        public MicrosoftTunnelConfiguration()
        {
            this.ODataType = "microsoft.graph.microsoftTunnelConfiguration";
        }
	
        /// <summary>
        /// Gets or sets advanced settings.
        /// Additional settings that may be applied to the server
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "advancedSettings", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<KeyValuePair> AdvancedSettings { get; set; }
    
        /// <summary>
        /// Gets or sets default domain suffix.
        /// The Default Domain appendix that will be used by the clients
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defaultDomainSuffix", Required = Newtonsoft.Json.Required.Default)]
        public string DefaultDomainSuffix { get; set; }
    
        /// <summary>
        /// Gets or sets description.
        /// The MicrosoftTunnelConfiguration's description
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "description", Required = Newtonsoft.Json.Required.Default)]
        public string Description { get; set; }
    
        /// <summary>
        /// Gets or sets display name.
        /// The MicrosoftTunnelConfiguration's display name
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "displayName", Required = Newtonsoft.Json.Required.Default)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets dns servers.
        /// The DNS servers that will be used by the clients
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "dnsServers", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> DnsServers { get; set; }
    
        /// <summary>
        /// Gets or sets last update date time.
        /// When the MicrosoftTunnelConfiguration was last updated
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastUpdateDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastUpdateDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets listen port.
        /// The port that both TCP and UPD will listen over on the server
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "listenPort", Required = Newtonsoft.Json.Required.Default)]
        public Int32? ListenPort { get; set; }
    
        /// <summary>
        /// Gets or sets network.
        /// The subnet that will be used to allocate virtual address for the clients
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "network", Required = Newtonsoft.Json.Required.Default)]
        public string Network { get; set; }
    
        /// <summary>
        /// Gets or sets role scope tag ids.
        /// List of Scope Tags for this Entity instance.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "roleScopeTagIds", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> RoleScopeTagIds { get; set; }
    
        /// <summary>
        /// Gets or sets routes exclude.
        /// Subsets of the routes that will not be routed by the server
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "routesExclude", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> RoutesExclude { get; set; }
    
        /// <summary>
        /// Gets or sets routes include.
        /// The routs that will be routed by the server
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "routesInclude", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> RoutesInclude { get; set; }
    
        /// <summary>
        /// Gets or sets split dns.
        /// The domains that will be resolved using the provided dns servers
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "splitDNS", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> SplitDNS { get; set; }
    
    }
}

