// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type DeviceManagementConfigurationOptionDefinition.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class DeviceManagementConfigurationOptionDefinition
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceManagementConfigurationOptionDefinition"/> class.
        /// </summary>
        public DeviceManagementConfigurationOptionDefinition()
        {
            this.ODataType = "microsoft.graph.deviceManagementConfigurationOptionDefinition";
        }

        /// <summary>
        /// Gets or sets dependedOnBy.
        /// List of Settings that depends on this option
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "dependedOnBy", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<DeviceManagementConfigurationSettingDependedOnBy> DependedOnBy { get; set; }
    
        /// <summary>
        /// Gets or sets dependentOn.
        /// List of dependent settings for this option
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "dependentOn", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<DeviceManagementConfigurationDependentOn> DependentOn { get; set; }
    
        /// <summary>
        /// Gets or sets description.
        /// Description of the option
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "description", Required = Newtonsoft.Json.Required.Default)]
        public string Description { get; set; }
    
        /// <summary>
        /// Gets or sets displayName.
        /// Friendly name of the option
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "displayName", Required = Newtonsoft.Json.Required.Default)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets helpText.
        /// Help text of the option
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "helpText", Required = Newtonsoft.Json.Required.Default)]
        public string HelpText { get; set; }
    
        /// <summary>
        /// Gets or sets itemId.
        /// Identifier of option
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "itemId", Required = Newtonsoft.Json.Required.Default)]
        public string ItemId { get; set; }
    
        /// <summary>
        /// Gets or sets name.
        /// Name of the option
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "name", Required = Newtonsoft.Json.Required.Default)]
        public string Name { get; set; }
    
        /// <summary>
        /// Gets or sets optionValue.
        /// Value of the option
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "optionValue", Required = Newtonsoft.Json.Required.Default)]
        public DeviceManagementConfigurationSettingValue OptionValue { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
