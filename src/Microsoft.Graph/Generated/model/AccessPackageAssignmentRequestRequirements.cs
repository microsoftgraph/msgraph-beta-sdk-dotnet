// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type AccessPackageAssignmentRequestRequirements.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class AccessPackageAssignmentRequestRequirements
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessPackageAssignmentRequestRequirements"/> class.
        /// </summary>
        public AccessPackageAssignmentRequestRequirements()
        {
            this.ODataType = "microsoft.graph.accessPackageAssignmentRequestRequirements";
        }

        /// <summary>
        /// Gets or sets allowCustomAssignmentSchedule.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "allowCustomAssignmentSchedule", Required = Newtonsoft.Json.Required.Default)]
        public bool? AllowCustomAssignmentSchedule { get; set; }
    
        /// <summary>
        /// Gets or sets existingAnswers.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "existingAnswers", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<AccessPackageAnswer> ExistingAnswers { get; set; }
    
        /// <summary>
        /// Gets or sets isApprovalRequiredForAdd.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isApprovalRequiredForAdd", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsApprovalRequiredForAdd { get; set; }
    
        /// <summary>
        /// Gets or sets isApprovalRequiredForUpdate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isApprovalRequiredForUpdate", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsApprovalRequiredForUpdate { get; set; }
    
        /// <summary>
        /// Gets or sets policyDescription.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "policyDescription", Required = Newtonsoft.Json.Required.Default)]
        public string PolicyDescription { get; set; }
    
        /// <summary>
        /// Gets or sets policyDisplayName.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "policyDisplayName", Required = Newtonsoft.Json.Required.Default)]
        public string PolicyDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets policyId.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "policyId", Required = Newtonsoft.Json.Required.Default)]
        public string PolicyId { get; set; }
    
        /// <summary>
        /// Gets or sets questions.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "questions", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<AccessPackageQuestion> Questions { get; set; }
    
        /// <summary>
        /// Gets or sets schedule.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "schedule", Required = Newtonsoft.Json.Required.Default)]
        public RequestSchedule Schedule { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
