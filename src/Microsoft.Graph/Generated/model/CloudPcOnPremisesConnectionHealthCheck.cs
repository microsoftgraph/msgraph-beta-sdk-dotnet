// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type CloudPcOnPremisesConnectionHealthCheck.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class CloudPcOnPremisesConnectionHealthCheck
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudPcOnPremisesConnectionHealthCheck"/> class.
        /// </summary>
        public CloudPcOnPremisesConnectionHealthCheck()
        {
            this.ODataType = "microsoft.graph.cloudPcOnPremisesConnectionHealthCheck";
        }

        /// <summary>
        /// Gets or sets additionalDetails.
        /// Additional details about the health check or the recommended action.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "additionalDetails", Required = Newtonsoft.Json.Required.Default)]
        public string AdditionalDetails { get; set; }
    
        /// <summary>
        /// Gets or sets displayName.
        /// The display name for this health check item.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "displayName", Required = Newtonsoft.Json.Required.Default)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets endDateTime.
        /// The end time of the health check item. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "endDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? EndDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets errorType.
        /// The type of error that occurred during this health check.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "errorType", Required = Newtonsoft.Json.Required.Default)]
        public CloudPcOnPremisesConnectionHealthCheckErrorType? ErrorType { get; set; }
    
        /// <summary>
        /// Gets or sets recommendedAction.
        /// The recommended action to fix the corresponding error.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "recommendedAction", Required = Newtonsoft.Json.Required.Default)]
        public string RecommendedAction { get; set; }
    
        /// <summary>
        /// Gets or sets startDateTime.
        /// The start time of the health check item. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? StartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets status.
        /// The status of the health check item. Possible values are: pending, running, passed, failed, unknownFutureValue. Read-only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "status", Required = Newtonsoft.Json.Required.Default)]
        public CloudPcOnPremisesConnectionStatus? Status { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
