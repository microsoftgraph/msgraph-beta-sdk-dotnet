// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type SearchHit.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class SearchHit
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchHit"/> class.
        /// </summary>
        public SearchHit()
        {
            this.ODataType = "microsoft.graph.searchHit";
        }

        /// <summary>
        /// Gets or sets contentSource.
        /// The name of the content source which the externalItem is part of .
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "contentSource", Required = Newtonsoft.Json.Required.Default)]
        public string ContentSource { get; set; }
    
        /// <summary>
        /// Gets or sets hitId.
        /// The internal identifier for the item.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "hitId", Required = Newtonsoft.Json.Required.Default)]
        public string HitId { get; set; }
    
        /// <summary>
        /// Gets or sets rank.
        /// The rank or the order of the result.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "rank", Required = Newtonsoft.Json.Required.Default)]
        public Int32? Rank { get; set; }
    
        /// <summary>
        /// Gets or sets summary.
        /// A summary of the result, if a summary is available.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "summary", Required = Newtonsoft.Json.Required.Default)]
        public string Summary { get; set; }
    
        /// <summary>
        /// Gets or sets _id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "_id", Required = Newtonsoft.Json.Required.Default)]
        public string _id { get; set; }
    
        /// <summary>
        /// Gets or sets _score.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "_score", Required = Newtonsoft.Json.Required.Default)]
        public Int32? _score { get; set; }
    
        /// <summary>
        /// Gets or sets _summary.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "_summary", Required = Newtonsoft.Json.Required.Default)]
        public string _summary { get; set; }
    
        /// <summary>
        /// Gets or sets resource.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "resource", Required = Newtonsoft.Json.Required.Default)]
        public Entity Resource { get; set; }
    
        /// <summary>
        /// Gets or sets _source.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "_source", Required = Newtonsoft.Json.Required.Default)]
        public Entity _source { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
