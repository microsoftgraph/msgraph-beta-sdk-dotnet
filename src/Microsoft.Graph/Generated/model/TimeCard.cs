// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Time Card.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class TimeCard : ChangeTrackedEntity
    {
    
		///<summary>
		/// The TimeCard constructor
		///</summary>
        public TimeCard()
        {
            this.ODataType = "microsoft.graph.timeCard";
        }
	
        /// <summary>
        /// Gets or sets breaks.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "breaks", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<TimeCardBreak> Breaks { get; set; }
    
        /// <summary>
        /// Gets or sets clock in event.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "clockInEvent", Required = Newtonsoft.Json.Required.Default)]
        public TimeCardEvent ClockInEvent { get; set; }
    
        /// <summary>
        /// Gets or sets clock out event.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "clockOutEvent", Required = Newtonsoft.Json.Required.Default)]
        public TimeCardEvent ClockOutEvent { get; set; }
    
        /// <summary>
        /// Gets or sets confirmed by.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "confirmedBy", Required = Newtonsoft.Json.Required.Default)]
        public ConfirmedBy? ConfirmedBy { get; set; }
    
        /// <summary>
        /// Gets or sets notes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "notes", Required = Newtonsoft.Json.Required.Default)]
        public ItemBody Notes { get; set; }
    
        /// <summary>
        /// Gets or sets original entry.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "originalEntry", Required = Newtonsoft.Json.Required.Default)]
        public TimeCardEntry OriginalEntry { get; set; }
    
        /// <summary>
        /// Gets or sets state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "state", Required = Newtonsoft.Json.Required.Default)]
        public TimeCardState? State { get; set; }
    
        /// <summary>
        /// Gets or sets user id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "userId", Required = Newtonsoft.Json.Required.Default)]
        public string UserId { get; set; }
    
    }
}

