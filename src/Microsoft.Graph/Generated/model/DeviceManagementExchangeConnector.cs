// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Device Management Exchange Connector.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class DeviceManagementExchangeConnector : Entity
    {
    
		///<summary>
		/// The DeviceManagementExchangeConnector constructor
		///</summary>
        public DeviceManagementExchangeConnector()
        {
            this.ODataType = "microsoft.graph.deviceManagementExchangeConnector";
        }
	
        /// <summary>
        /// Gets or sets connector server name.
        /// The name of the server hosting the Exchange Connector.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "connectorServerName", Required = Newtonsoft.Json.Required.Default)]
        public string ConnectorServerName { get; set; }
    
        /// <summary>
        /// Gets or sets exchange alias.
        /// An alias assigned to the Exchange server
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exchangeAlias", Required = Newtonsoft.Json.Required.Default)]
        public string ExchangeAlias { get; set; }
    
        /// <summary>
        /// Gets or sets exchange connector type.
        /// The type of Exchange Connector Configured. Possible values are: onPremises, hosted, serviceToService, dedicated.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exchangeConnectorType", Required = Newtonsoft.Json.Required.Default)]
        public DeviceManagementExchangeConnectorType? ExchangeConnectorType { get; set; }
    
        /// <summary>
        /// Gets or sets exchange organization.
        /// Exchange Organization to the Exchange server
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exchangeOrganization", Required = Newtonsoft.Json.Required.Default)]
        public string ExchangeOrganization { get; set; }
    
        /// <summary>
        /// Gets or sets last sync date time.
        /// Last sync time for the Exchange Connector
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastSyncDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastSyncDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets primary smtp address.
        /// Email address used to configure the Service To Service Exchange Connector.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "primarySmtpAddress", Required = Newtonsoft.Json.Required.Default)]
        public string PrimarySmtpAddress { get; set; }
    
        /// <summary>
        /// Gets or sets server name.
        /// The name of the Exchange server.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "serverName", Required = Newtonsoft.Json.Required.Default)]
        public string ServerName { get; set; }
    
        /// <summary>
        /// Gets or sets status.
        /// Exchange Connector Status. Possible values are: none, connectionPending, connected, disconnected.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "status", Required = Newtonsoft.Json.Required.Default)]
        public DeviceManagementExchangeConnectorStatus? Status { get; set; }
    
        /// <summary>
        /// Gets or sets version.
        /// The version of the ExchangeConnectorAgent
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "version", Required = Newtonsoft.Json.Required.Default)]
        public string Version { get; set; }
    
    }
}

