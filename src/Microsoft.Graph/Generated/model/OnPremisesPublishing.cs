// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type OnPremisesPublishing.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class OnPremisesPublishing
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnPremisesPublishing"/> class.
        /// </summary>
        public OnPremisesPublishing()
        {
            this.ODataType = "microsoft.graph.onPremisesPublishing";
        }

        /// <summary>
        /// Gets or sets alternateUrl.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "alternateUrl", Required = Newtonsoft.Json.Required.Default)]
        public string AlternateUrl { get; set; }
    
        /// <summary>
        /// Gets or sets applicationServerTimeout.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "applicationServerTimeout", Required = Newtonsoft.Json.Required.Default)]
        public string ApplicationServerTimeout { get; set; }
    
        /// <summary>
        /// Gets or sets applicationType.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "applicationType", Required = Newtonsoft.Json.Required.Default)]
        public string ApplicationType { get; set; }
    
        /// <summary>
        /// Gets or sets externalAuthenticationType.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "externalAuthenticationType", Required = Newtonsoft.Json.Required.Default)]
        public ExternalAuthenticationType? ExternalAuthenticationType { get; set; }
    
        /// <summary>
        /// Gets or sets externalUrl.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "externalUrl", Required = Newtonsoft.Json.Required.Default)]
        public string ExternalUrl { get; set; }
    
        /// <summary>
        /// Gets or sets internalUrl.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "internalUrl", Required = Newtonsoft.Json.Required.Default)]
        public string InternalUrl { get; set; }
    
        /// <summary>
        /// Gets or sets isHttpOnlyCookieEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isHttpOnlyCookieEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsHttpOnlyCookieEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets isOnPremPublishingEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isOnPremPublishingEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsOnPremPublishingEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets isPersistentCookieEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isPersistentCookieEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsPersistentCookieEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets isSecureCookieEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isSecureCookieEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsSecureCookieEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets isTranslateHostHeaderEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isTranslateHostHeaderEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsTranslateHostHeaderEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets isTranslateLinksInBodyEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isTranslateLinksInBodyEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsTranslateLinksInBodyEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets singleSignOnSettings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "singleSignOnSettings", Required = Newtonsoft.Json.Required.Default)]
        public OnPremisesPublishingSingleSignOn SingleSignOnSettings { get; set; }
    
        /// <summary>
        /// Gets or sets useAlternateUrlForTranslationAndRedirect.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "useAlternateUrlForTranslationAndRedirect", Required = Newtonsoft.Json.Required.Default)]
        public bool? UseAlternateUrlForTranslationAndRedirect { get; set; }
    
        /// <summary>
        /// Gets or sets verifiedCustomDomainCertificatesMetadata.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "verifiedCustomDomainCertificatesMetadata", Required = Newtonsoft.Json.Required.Default)]
        public VerifiedCustomDomainCertificatesMetadata VerifiedCustomDomainCertificatesMetadata { get; set; }
    
        /// <summary>
        /// Gets or sets verifiedCustomDomainKeyCredential.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "verifiedCustomDomainKeyCredential", Required = Newtonsoft.Json.Required.Default)]
        public KeyCredential VerifiedCustomDomainKeyCredential { get; set; }
    
        /// <summary>
        /// Gets or sets verifiedCustomDomainPasswordCredential.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "verifiedCustomDomainPasswordCredential", Required = Newtonsoft.Json.Required.Default)]
        public PasswordCredential VerifiedCustomDomainPasswordCredential { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
