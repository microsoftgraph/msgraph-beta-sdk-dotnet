// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Regional And Language Settings.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class RegionalAndLanguageSettings : Entity
    {
    
		///<summary>
		/// The RegionalAndLanguageSettings constructor
		///</summary>
        public RegionalAndLanguageSettings()
        {
            this.ODataType = "microsoft.graph.regionalAndLanguageSettings";
        }
	
        /// <summary>
        /// Gets or sets authoring languages.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "authoringLanguages", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<LocaleInfo> AuthoringLanguages { get; set; }
    
        /// <summary>
        /// Gets or sets default display language.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defaultDisplayLanguage", Required = Newtonsoft.Json.Required.Default)]
        public LocaleInfo DefaultDisplayLanguage { get; set; }
    
        /// <summary>
        /// Gets or sets default regional format.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defaultRegionalFormat", Required = Newtonsoft.Json.Required.Default)]
        public LocaleInfo DefaultRegionalFormat { get; set; }
    
        /// <summary>
        /// Gets or sets default speech input language.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defaultSpeechInputLanguage", Required = Newtonsoft.Json.Required.Default)]
        public LocaleInfo DefaultSpeechInputLanguage { get; set; }
    
        /// <summary>
        /// Gets or sets default translation language.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defaultTranslationLanguage", Required = Newtonsoft.Json.Required.Default)]
        public LocaleInfo DefaultTranslationLanguage { get; set; }
    
        /// <summary>
        /// Gets or sets regional format overrides.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "regionalFormatOverrides", Required = Newtonsoft.Json.Required.Default)]
        public RegionalFormatOverrides RegionalFormatOverrides { get; set; }
    
    }
}

