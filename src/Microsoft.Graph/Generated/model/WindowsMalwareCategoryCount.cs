// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type WindowsMalwareCategoryCount.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class WindowsMalwareCategoryCount
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindowsMalwareCategoryCount"/> class.
        /// </summary>
        public WindowsMalwareCategoryCount()
        {
            this.ODataType = "microsoft.graph.windowsMalwareCategoryCount";
        }

        /// <summary>
        /// Gets or sets activeMalwareDetectionCount.
        /// Count of active malware detections for this malware category. Valid values -2147483648 to 2147483647
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "activeMalwareDetectionCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? ActiveMalwareDetectionCount { get; set; }
    
        /// <summary>
        /// Gets or sets category.
        /// Malware category. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "category", Required = Newtonsoft.Json.Required.Default)]
        public WindowsMalwareCategory? Category { get; set; }
    
        /// <summary>
        /// Gets or sets deviceCount.
        /// Count of devices with malware detections for this malware category
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? DeviceCount { get; set; }
    
        /// <summary>
        /// Gets or sets distinctActiveMalwareCount.
        /// Count of distinct active malwares for this malware category. Valid values -2147483648 to 2147483647
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "distinctActiveMalwareCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? DistinctActiveMalwareCount { get; set; }
    
        /// <summary>
        /// Gets or sets lastUpdateDateTime.
        /// The Timestamp of the last update for the device count in UTC
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastUpdateDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastUpdateDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
