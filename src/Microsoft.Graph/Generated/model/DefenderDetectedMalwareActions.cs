// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type DefenderDetectedMalwareActions.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class DefenderDetectedMalwareActions
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefenderDetectedMalwareActions"/> class.
        /// </summary>
        public DefenderDetectedMalwareActions()
        {
            this.ODataType = "microsoft.graph.defenderDetectedMalwareActions";
        }

        /// <summary>
        /// Gets or sets highSeverity.
        /// Indicates a Defender action to take for high severity Malware threat detected. Possible values are: deviceDefault, clean, quarantine, remove, allow, userDefined, block.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "highSeverity", Required = Newtonsoft.Json.Required.Default)]
        public DefenderThreatAction? HighSeverity { get; set; }
    
        /// <summary>
        /// Gets or sets lowSeverity.
        /// Indicates a Defender action to take for low severity Malware threat detected. Possible values are: deviceDefault, clean, quarantine, remove, allow, userDefined, block.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lowSeverity", Required = Newtonsoft.Json.Required.Default)]
        public DefenderThreatAction? LowSeverity { get; set; }
    
        /// <summary>
        /// Gets or sets moderateSeverity.
        /// Indicates a Defender action to take for moderate severity Malware threat detected. Possible values are: deviceDefault, clean, quarantine, remove, allow, userDefined, block.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "moderateSeverity", Required = Newtonsoft.Json.Required.Default)]
        public DefenderThreatAction? ModerateSeverity { get; set; }
    
        /// <summary>
        /// Gets or sets severeSeverity.
        /// Indicates a Defender action to take for severe severity Malware threat detected. Possible values are: deviceDefault, clean, quarantine, remove, allow, userDefined, block.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "severeSeverity", Required = Newtonsoft.Json.Required.Default)]
        public DefenderThreatAction? SevereSeverity { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
