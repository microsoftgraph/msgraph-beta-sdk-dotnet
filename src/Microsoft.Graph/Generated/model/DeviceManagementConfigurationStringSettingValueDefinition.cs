// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type DeviceManagementConfigurationStringSettingValueDefinition.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class DeviceManagementConfigurationStringSettingValueDefinition : DeviceManagementConfigurationSettingValueDefinition
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceManagementConfigurationStringSettingValueDefinition"/> class.
        /// </summary>
        public DeviceManagementConfigurationStringSettingValueDefinition()
        {
            this.ODataType = "microsoft.graph.deviceManagementConfigurationStringSettingValueDefinition";
        }

        /// <summary>
        /// Gets or sets format.
        /// Pre-defined format of the string
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "format", Required = Newtonsoft.Json.Required.Default)]
        public DeviceManagementConfigurationStringFormat? Format { get; set; }
    
        /// <summary>
        /// Gets or sets inputValidationSchema.
        /// Regular expression or any xml or json schema that the input string should match
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "inputValidationSchema", Required = Newtonsoft.Json.Required.Default)]
        public string InputValidationSchema { get; set; }
    
        /// <summary>
        /// Gets or sets isSecret.
        /// Specifies whether the setting needs to be treated as a secret. Settings marked as yes will be encrypted in transit and at rest and will be displayed as asterisks when represented in the UX.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isSecret", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsSecret { get; set; }
    
        /// <summary>
        /// Gets or sets maximumLength.
        /// Maximum length of string. Valid values 0 to 87516
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "maximumLength", Required = Newtonsoft.Json.Required.Default)]
        public Int64? MaximumLength { get; set; }
    
        /// <summary>
        /// Gets or sets minimumLength.
        /// Minimum length of string. Valid values 0 to 87516
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "minimumLength", Required = Newtonsoft.Json.Required.Default)]
        public Int64? MinimumLength { get; set; }
    
    }
}
