// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type MobileAppRelationshipState.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class MobileAppRelationshipState
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MobileAppRelationshipState"/> class.
        /// </summary>
        public MobileAppRelationshipState()
        {
            this.ODataType = "microsoft.graph.mobileAppRelationshipState";
        }

        /// <summary>
        /// Gets or sets deviceId.
        /// The corresponding device id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceId", Required = Newtonsoft.Json.Required.Default)]
        public string DeviceId { get; set; }
    
        /// <summary>
        /// Gets or sets errorCode.
        /// The error code for install or uninstall failures of target app.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "errorCode", Required = Newtonsoft.Json.Required.Default)]
        public Int32? ErrorCode { get; set; }
    
        /// <summary>
        /// Gets or sets installState.
        /// The install state of the app of target app.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "installState", Required = Newtonsoft.Json.Required.Default)]
        public ResultantAppState? InstallState { get; set; }
    
        /// <summary>
        /// Gets or sets installStateDetail.
        /// The install state detail of the app.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "installStateDetail", Required = Newtonsoft.Json.Required.Default)]
        public ResultantAppStateDetail? InstallStateDetail { get; set; }
    
        /// <summary>
        /// Gets or sets sourceIds.
        /// The collection of source mobile app's ids.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "sourceIds", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> SourceIds { get; set; }
    
        /// <summary>
        /// Gets or sets targetDisplayName.
        /// The related target app's display name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "targetDisplayName", Required = Newtonsoft.Json.Required.Default)]
        public string TargetDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets targetId.
        /// The related target app's id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "targetId", Required = Newtonsoft.Json.Required.Default)]
        public string TargetId { get; set; }
    
        /// <summary>
        /// Gets or sets targetLastSyncDateTime.
        /// The last sync time of the target app.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "targetLastSyncDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? TargetLastSyncDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
