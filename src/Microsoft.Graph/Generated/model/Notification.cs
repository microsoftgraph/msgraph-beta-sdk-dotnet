// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Notification.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<Notification>))]
    public partial class Notification : Entity
    {
    
        /// <summary>
        /// Gets or sets display time to live.
        /// Sets how long (in seconds) this notification content will stay in each platform's notification viewer. For example, when the notification is delivered to a Windows device, the value of this property is passed on to ToastNotification.ExpirationTime, which determines how long the toast notification will stay in the user's Windows Action Center.
        /// </summary>
        [JsonPropertyName("displayTimeToLive")]
        public Int32? DisplayTimeToLive { get; set; }
    
        /// <summary>
        /// Gets or sets expiration date time.
        /// Sets a UTC expiration date and time on a user notification using ISO 8601 format (for example, midnight UTC on Jan 1, 2019 would look like this: '2019-01-01T00:00:00Z'). When time is up, the notification is removed from the Microsoft Graph notification feed store completely and is no longer part of notification history. Max value is 30 days.
        /// </summary>
        [JsonPropertyName("expirationDateTime")]
        public DateTimeOffset? ExpirationDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets group name.
        /// The name of the group that this notification belongs to. It is set by the developer for the purpose of grouping notifications together.
        /// </summary>
        [JsonPropertyName("groupName")]
        public string GroupName { get; set; }
    
        /// <summary>
        /// Gets or sets payload.
        /// This is the data content of a raw or visual user notification that will be delivered to and consumed by the app client receiving this notification.
        /// </summary>
        [JsonPropertyName("payload")]
        public PayloadTypes Payload { get; set; }
    
        /// <summary>
        /// Gets or sets priority.
        /// Indicates the priority of a raw user notification. Visual notifications are sent with high priority by default. Valid values are None, High and Low.
        /// </summary>
        [JsonPropertyName("priority")]
        public Priority? Priority { get; set; }
    
        /// <summary>
        /// Gets or sets target host name.
        /// Represents the host name of the app to which the calling service wants to post the notification, for the given user. If targeting web endpoints (see targetPolicy.platformTypes), ensure that targetHostName is the same as the name used when creating a subscription on the client side within the application JSON property.
        /// </summary>
        [JsonPropertyName("targetHostName")]
        public string TargetHostName { get; set; }
    
        /// <summary>
        /// Gets or sets target policy.
        /// Target policy object handles notification delivery policy for endpoint types that should be targeted (Windows, iOS, Android and WebPush) for the given user.
        /// </summary>
        [JsonPropertyName("targetPolicy")]
        public TargetPolicyEndpoints TargetPolicy { get; set; }
    
    }
}

