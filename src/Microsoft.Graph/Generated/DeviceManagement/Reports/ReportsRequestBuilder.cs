// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Graph.Beta.DeviceManagement.Reports.CachedReportConfigurations;
using Microsoft.Graph.Beta.DeviceManagement.Reports.ExportJobs;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetActiveMalwareReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetActiveMalwareSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetAllCertificatesReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetAppStatusOverviewReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetAppsInstallSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetCachedReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetCertificatesReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePoliciesReportForDevice;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyDeviceSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyDevicesReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyNonComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyNonComplianceSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetComplianceSettingDetailsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetComplianceSettingNonComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetComplianceSettingsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigManagerDevicePolicyStatusReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPoliciesReportForDevice;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyDeviceSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyDevicesReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicySettingsDeviceSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationSettingDetailsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationSettingNonComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationSettingsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceConfigurationPolicySettingsSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceConfigurationPolicyStatusSummary;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceInstallStatusReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceManagementIntentPerSettingContributingProfiles;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceManagementIntentSettingsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceNonComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicePoliciesComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicePolicySettingsComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusByCompliacePolicyReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusByCompliancePolicySettingReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusSummaryByCompliacePolicyReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusSummaryByCompliancePolicySettingsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicesStatusByPolicyPlatformComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicesStatusBySettingReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicesWithoutCompliancePolicyReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetEncryptionReportForDevices;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetEnrollmentConfigurationPoliciesByDevice;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetFailedMobileAppsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetFailedMobileAppsSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetGroupPolicySettingsDeviceSettingsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetHistoricalReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetMalwareSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetMobileApplicationManagementAppConfigurationReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetMobileApplicationManagementAppRegistrationSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetNoncompliantDevicesAndSettingsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetPolicyNonComplianceMetadata;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetPolicyNonComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetPolicyNonComplianceSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetQuietTimePolicyUserSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetQuietTimePolicyUsersReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetRelatedAppsStatusReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetRemoteAssistanceSessionsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetReportFilters;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetSettingNonComplianceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetUnhealthyDefenderAgentsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetUnhealthyFirewallReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetUnhealthyFirewallSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetUserInstallStatusReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsDriverUpdateAlertSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsDriverUpdateAlertsPerPolicyPerDeviceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsQualityUpdateAlertSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsQualityUpdateAlertsPerPolicyPerDeviceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsUpdateAlertSummaryReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsUpdateAlertsPerPolicyPerDeviceReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.GetZebraFotaDeploymentReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.RetrieveSecurityTaskAppsReport;
using Microsoft.Graph.Beta.DeviceManagement.Reports.RetrieveWin32CatalogAppsUpdateReport;
using Microsoft.Graph.Beta.Models.ODataErrors;
using Microsoft.Graph.Beta.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Microsoft.Graph.Beta.DeviceManagement.Reports
{
    /// <summary>
    /// Provides operations to manage the reports property of the microsoft.graph.deviceManagement entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ReportsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Provides operations to manage the cachedReportConfigurations property of the microsoft.graph.deviceManagementReports entity.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.CachedReportConfigurations.CachedReportConfigurationsRequestBuilder CachedReportConfigurations
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.CachedReportConfigurations.CachedReportConfigurationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the exportJobs property of the microsoft.graph.deviceManagementReports entity.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.ExportJobs.ExportJobsRequestBuilder ExportJobs
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.ExportJobs.ExportJobsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getActiveMalwareReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetActiveMalwareReport.GetActiveMalwareReportRequestBuilder GetActiveMalwareReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetActiveMalwareReport.GetActiveMalwareReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getActiveMalwareSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetActiveMalwareSummaryReport.GetActiveMalwareSummaryReportRequestBuilder GetActiveMalwareSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetActiveMalwareSummaryReport.GetActiveMalwareSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getAllCertificatesReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetAllCertificatesReport.GetAllCertificatesReportRequestBuilder GetAllCertificatesReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetAllCertificatesReport.GetAllCertificatesReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getAppsInstallSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetAppsInstallSummaryReport.GetAppsInstallSummaryReportRequestBuilder GetAppsInstallSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetAppsInstallSummaryReport.GetAppsInstallSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getAppStatusOverviewReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetAppStatusOverviewReport.GetAppStatusOverviewReportRequestBuilder GetAppStatusOverviewReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetAppStatusOverviewReport.GetAppStatusOverviewReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getCachedReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCachedReport.GetCachedReportRequestBuilder GetCachedReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCachedReport.GetCachedReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getCertificatesReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCertificatesReport.GetCertificatesReportRequestBuilder GetCertificatesReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCertificatesReport.GetCertificatesReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getCompliancePoliciesReportForDevice method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePoliciesReportForDevice.GetCompliancePoliciesReportForDeviceRequestBuilder GetCompliancePoliciesReportForDevice
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePoliciesReportForDevice.GetCompliancePoliciesReportForDeviceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getCompliancePolicyDevicesReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyDevicesReport.GetCompliancePolicyDevicesReportRequestBuilder GetCompliancePolicyDevicesReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyDevicesReport.GetCompliancePolicyDevicesReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getCompliancePolicyDeviceSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyDeviceSummaryReport.GetCompliancePolicyDeviceSummaryReportRequestBuilder GetCompliancePolicyDeviceSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyDeviceSummaryReport.GetCompliancePolicyDeviceSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getCompliancePolicyNonComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyNonComplianceReport.GetCompliancePolicyNonComplianceReportRequestBuilder GetCompliancePolicyNonComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyNonComplianceReport.GetCompliancePolicyNonComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getCompliancePolicyNonComplianceSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyNonComplianceSummaryReport.GetCompliancePolicyNonComplianceSummaryReportRequestBuilder GetCompliancePolicyNonComplianceSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetCompliancePolicyNonComplianceSummaryReport.GetCompliancePolicyNonComplianceSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getComplianceSettingDetailsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetComplianceSettingDetailsReport.GetComplianceSettingDetailsReportRequestBuilder GetComplianceSettingDetailsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetComplianceSettingDetailsReport.GetComplianceSettingDetailsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getComplianceSettingNonComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetComplianceSettingNonComplianceReport.GetComplianceSettingNonComplianceReportRequestBuilder GetComplianceSettingNonComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetComplianceSettingNonComplianceReport.GetComplianceSettingNonComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getComplianceSettingsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetComplianceSettingsReport.GetComplianceSettingsReportRequestBuilder GetComplianceSettingsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetComplianceSettingsReport.GetComplianceSettingsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigManagerDevicePolicyStatusReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigManagerDevicePolicyStatusReport.GetConfigManagerDevicePolicyStatusReportRequestBuilder GetConfigManagerDevicePolicyStatusReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigManagerDevicePolicyStatusReport.GetConfigManagerDevicePolicyStatusReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigurationPoliciesReportForDevice method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPoliciesReportForDevice.GetConfigurationPoliciesReportForDeviceRequestBuilder GetConfigurationPoliciesReportForDevice
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPoliciesReportForDevice.GetConfigurationPoliciesReportForDeviceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigurationPolicyDevicesReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyDevicesReport.GetConfigurationPolicyDevicesReportRequestBuilder GetConfigurationPolicyDevicesReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyDevicesReport.GetConfigurationPolicyDevicesReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigurationPolicyDeviceSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyDeviceSummaryReport.GetConfigurationPolicyDeviceSummaryReportRequestBuilder GetConfigurationPolicyDeviceSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyDeviceSummaryReport.GetConfigurationPolicyDeviceSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigurationPolicyNonComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceReport.GetConfigurationPolicyNonComplianceReportRequestBuilder GetConfigurationPolicyNonComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceReport.GetConfigurationPolicyNonComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigurationPolicyNonComplianceSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceSummaryReport.GetConfigurationPolicyNonComplianceSummaryReportRequestBuilder GetConfigurationPolicyNonComplianceSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceSummaryReport.GetConfigurationPolicyNonComplianceSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigurationPolicySettingsDeviceSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicySettingsDeviceSummaryReport.GetConfigurationPolicySettingsDeviceSummaryReportRequestBuilder GetConfigurationPolicySettingsDeviceSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationPolicySettingsDeviceSummaryReport.GetConfigurationPolicySettingsDeviceSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigurationSettingDetailsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationSettingDetailsReport.GetConfigurationSettingDetailsReportRequestBuilder GetConfigurationSettingDetailsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationSettingDetailsReport.GetConfigurationSettingDetailsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigurationSettingNonComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationSettingNonComplianceReport.GetConfigurationSettingNonComplianceReportRequestBuilder GetConfigurationSettingNonComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationSettingNonComplianceReport.GetConfigurationSettingNonComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getConfigurationSettingsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationSettingsReport.GetConfigurationSettingsReportRequestBuilder GetConfigurationSettingsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetConfigurationSettingsReport.GetConfigurationSettingsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceConfigurationPolicySettingsSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceConfigurationPolicySettingsSummaryReport.GetDeviceConfigurationPolicySettingsSummaryReportRequestBuilder GetDeviceConfigurationPolicySettingsSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceConfigurationPolicySettingsSummaryReport.GetDeviceConfigurationPolicySettingsSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceConfigurationPolicyStatusSummary method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceConfigurationPolicyStatusSummary.GetDeviceConfigurationPolicyStatusSummaryRequestBuilder GetDeviceConfigurationPolicyStatusSummary
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceConfigurationPolicyStatusSummary.GetDeviceConfigurationPolicyStatusSummaryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceInstallStatusReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceInstallStatusReport.GetDeviceInstallStatusReportRequestBuilder GetDeviceInstallStatusReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceInstallStatusReport.GetDeviceInstallStatusReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceManagementIntentPerSettingContributingProfiles method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceManagementIntentPerSettingContributingProfiles.GetDeviceManagementIntentPerSettingContributingProfilesRequestBuilder GetDeviceManagementIntentPerSettingContributingProfiles
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceManagementIntentPerSettingContributingProfiles.GetDeviceManagementIntentPerSettingContributingProfilesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceManagementIntentSettingsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceManagementIntentSettingsReport.GetDeviceManagementIntentSettingsReportRequestBuilder GetDeviceManagementIntentSettingsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceManagementIntentSettingsReport.GetDeviceManagementIntentSettingsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceNonComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceNonComplianceReport.GetDeviceNonComplianceReportRequestBuilder GetDeviceNonComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceNonComplianceReport.GetDeviceNonComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDevicePoliciesComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicePoliciesComplianceReport.GetDevicePoliciesComplianceReportRequestBuilder GetDevicePoliciesComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicePoliciesComplianceReport.GetDevicePoliciesComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDevicePolicySettingsComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicePolicySettingsComplianceReport.GetDevicePolicySettingsComplianceReportRequestBuilder GetDevicePolicySettingsComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicePolicySettingsComplianceReport.GetDevicePolicySettingsComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDevicesStatusByPolicyPlatformComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicesStatusByPolicyPlatformComplianceReport.GetDevicesStatusByPolicyPlatformComplianceReportRequestBuilder GetDevicesStatusByPolicyPlatformComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicesStatusByPolicyPlatformComplianceReport.GetDevicesStatusByPolicyPlatformComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDevicesStatusBySettingReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicesStatusBySettingReport.GetDevicesStatusBySettingReportRequestBuilder GetDevicesStatusBySettingReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicesStatusBySettingReport.GetDevicesStatusBySettingReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceStatusByCompliacePolicyReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusByCompliacePolicyReport.GetDeviceStatusByCompliacePolicyReportRequestBuilder GetDeviceStatusByCompliacePolicyReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusByCompliacePolicyReport.GetDeviceStatusByCompliacePolicyReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceStatusByCompliancePolicySettingReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusByCompliancePolicySettingReport.GetDeviceStatusByCompliancePolicySettingReportRequestBuilder GetDeviceStatusByCompliancePolicySettingReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusByCompliancePolicySettingReport.GetDeviceStatusByCompliancePolicySettingReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceStatusSummaryByCompliacePolicyReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusSummaryByCompliacePolicyReport.GetDeviceStatusSummaryByCompliacePolicyReportRequestBuilder GetDeviceStatusSummaryByCompliacePolicyReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusSummaryByCompliacePolicyReport.GetDeviceStatusSummaryByCompliacePolicyReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDeviceStatusSummaryByCompliancePolicySettingsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusSummaryByCompliancePolicySettingsReport.GetDeviceStatusSummaryByCompliancePolicySettingsReportRequestBuilder GetDeviceStatusSummaryByCompliancePolicySettingsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDeviceStatusSummaryByCompliancePolicySettingsReport.GetDeviceStatusSummaryByCompliancePolicySettingsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getDevicesWithoutCompliancePolicyReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicesWithoutCompliancePolicyReport.GetDevicesWithoutCompliancePolicyReportRequestBuilder GetDevicesWithoutCompliancePolicyReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetDevicesWithoutCompliancePolicyReport.GetDevicesWithoutCompliancePolicyReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getEncryptionReportForDevices method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetEncryptionReportForDevices.GetEncryptionReportForDevicesRequestBuilder GetEncryptionReportForDevices
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetEncryptionReportForDevices.GetEncryptionReportForDevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getEnrollmentConfigurationPoliciesByDevice method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetEnrollmentConfigurationPoliciesByDevice.GetEnrollmentConfigurationPoliciesByDeviceRequestBuilder GetEnrollmentConfigurationPoliciesByDevice
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetEnrollmentConfigurationPoliciesByDevice.GetEnrollmentConfigurationPoliciesByDeviceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getFailedMobileAppsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetFailedMobileAppsReport.GetFailedMobileAppsReportRequestBuilder GetFailedMobileAppsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetFailedMobileAppsReport.GetFailedMobileAppsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getFailedMobileAppsSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetFailedMobileAppsSummaryReport.GetFailedMobileAppsSummaryReportRequestBuilder GetFailedMobileAppsSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetFailedMobileAppsSummaryReport.GetFailedMobileAppsSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getGroupPolicySettingsDeviceSettingsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetGroupPolicySettingsDeviceSettingsReport.GetGroupPolicySettingsDeviceSettingsReportRequestBuilder GetGroupPolicySettingsDeviceSettingsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetGroupPolicySettingsDeviceSettingsReport.GetGroupPolicySettingsDeviceSettingsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getHistoricalReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetHistoricalReport.GetHistoricalReportRequestBuilder GetHistoricalReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetHistoricalReport.GetHistoricalReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getMalwareSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetMalwareSummaryReport.GetMalwareSummaryReportRequestBuilder GetMalwareSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetMalwareSummaryReport.GetMalwareSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getMobileApplicationManagementAppConfigurationReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetMobileApplicationManagementAppConfigurationReport.GetMobileApplicationManagementAppConfigurationReportRequestBuilder GetMobileApplicationManagementAppConfigurationReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetMobileApplicationManagementAppConfigurationReport.GetMobileApplicationManagementAppConfigurationReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getMobileApplicationManagementAppRegistrationSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetMobileApplicationManagementAppRegistrationSummaryReport.GetMobileApplicationManagementAppRegistrationSummaryReportRequestBuilder GetMobileApplicationManagementAppRegistrationSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetMobileApplicationManagementAppRegistrationSummaryReport.GetMobileApplicationManagementAppRegistrationSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getNoncompliantDevicesAndSettingsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetNoncompliantDevicesAndSettingsReport.GetNoncompliantDevicesAndSettingsReportRequestBuilder GetNoncompliantDevicesAndSettingsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetNoncompliantDevicesAndSettingsReport.GetNoncompliantDevicesAndSettingsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getPolicyNonComplianceMetadata method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetPolicyNonComplianceMetadata.GetPolicyNonComplianceMetadataRequestBuilder GetPolicyNonComplianceMetadata
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetPolicyNonComplianceMetadata.GetPolicyNonComplianceMetadataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getPolicyNonComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetPolicyNonComplianceReport.GetPolicyNonComplianceReportRequestBuilder GetPolicyNonComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetPolicyNonComplianceReport.GetPolicyNonComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getPolicyNonComplianceSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetPolicyNonComplianceSummaryReport.GetPolicyNonComplianceSummaryReportRequestBuilder GetPolicyNonComplianceSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetPolicyNonComplianceSummaryReport.GetPolicyNonComplianceSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getQuietTimePolicyUsersReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetQuietTimePolicyUsersReport.GetQuietTimePolicyUsersReportRequestBuilder GetQuietTimePolicyUsersReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetQuietTimePolicyUsersReport.GetQuietTimePolicyUsersReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getQuietTimePolicyUserSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetQuietTimePolicyUserSummaryReport.GetQuietTimePolicyUserSummaryReportRequestBuilder GetQuietTimePolicyUserSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetQuietTimePolicyUserSummaryReport.GetQuietTimePolicyUserSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getRelatedAppsStatusReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetRelatedAppsStatusReport.GetRelatedAppsStatusReportRequestBuilder GetRelatedAppsStatusReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetRelatedAppsStatusReport.GetRelatedAppsStatusReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getRemoteAssistanceSessionsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetRemoteAssistanceSessionsReport.GetRemoteAssistanceSessionsReportRequestBuilder GetRemoteAssistanceSessionsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetRemoteAssistanceSessionsReport.GetRemoteAssistanceSessionsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getReportFilters method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetReportFilters.GetReportFiltersRequestBuilder GetReportFilters
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetReportFilters.GetReportFiltersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getSettingNonComplianceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetSettingNonComplianceReport.GetSettingNonComplianceReportRequestBuilder GetSettingNonComplianceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetSettingNonComplianceReport.GetSettingNonComplianceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getUnhealthyDefenderAgentsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetUnhealthyDefenderAgentsReport.GetUnhealthyDefenderAgentsReportRequestBuilder GetUnhealthyDefenderAgentsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetUnhealthyDefenderAgentsReport.GetUnhealthyDefenderAgentsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getUnhealthyFirewallReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetUnhealthyFirewallReport.GetUnhealthyFirewallReportRequestBuilder GetUnhealthyFirewallReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetUnhealthyFirewallReport.GetUnhealthyFirewallReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getUnhealthyFirewallSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetUnhealthyFirewallSummaryReport.GetUnhealthyFirewallSummaryReportRequestBuilder GetUnhealthyFirewallSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetUnhealthyFirewallSummaryReport.GetUnhealthyFirewallSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getUserInstallStatusReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetUserInstallStatusReport.GetUserInstallStatusReportRequestBuilder GetUserInstallStatusReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetUserInstallStatusReport.GetUserInstallStatusReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getWindowsDriverUpdateAlertsPerPolicyPerDeviceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsDriverUpdateAlertsPerPolicyPerDeviceReport.GetWindowsDriverUpdateAlertsPerPolicyPerDeviceReportRequestBuilder GetWindowsDriverUpdateAlertsPerPolicyPerDeviceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsDriverUpdateAlertsPerPolicyPerDeviceReport.GetWindowsDriverUpdateAlertsPerPolicyPerDeviceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getWindowsDriverUpdateAlertSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsDriverUpdateAlertSummaryReport.GetWindowsDriverUpdateAlertSummaryReportRequestBuilder GetWindowsDriverUpdateAlertSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsDriverUpdateAlertSummaryReport.GetWindowsDriverUpdateAlertSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getWindowsQualityUpdateAlertsPerPolicyPerDeviceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsQualityUpdateAlertsPerPolicyPerDeviceReport.GetWindowsQualityUpdateAlertsPerPolicyPerDeviceReportRequestBuilder GetWindowsQualityUpdateAlertsPerPolicyPerDeviceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsQualityUpdateAlertsPerPolicyPerDeviceReport.GetWindowsQualityUpdateAlertsPerPolicyPerDeviceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getWindowsQualityUpdateAlertSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsQualityUpdateAlertSummaryReport.GetWindowsQualityUpdateAlertSummaryReportRequestBuilder GetWindowsQualityUpdateAlertSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsQualityUpdateAlertSummaryReport.GetWindowsQualityUpdateAlertSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getWindowsUpdateAlertsPerPolicyPerDeviceReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsUpdateAlertsPerPolicyPerDeviceReport.GetWindowsUpdateAlertsPerPolicyPerDeviceReportRequestBuilder GetWindowsUpdateAlertsPerPolicyPerDeviceReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsUpdateAlertsPerPolicyPerDeviceReport.GetWindowsUpdateAlertsPerPolicyPerDeviceReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getWindowsUpdateAlertSummaryReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsUpdateAlertSummaryReport.GetWindowsUpdateAlertSummaryReportRequestBuilder GetWindowsUpdateAlertSummaryReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetWindowsUpdateAlertSummaryReport.GetWindowsUpdateAlertSummaryReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getZebraFotaDeploymentReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetZebraFotaDeploymentReport.GetZebraFotaDeploymentReportRequestBuilder GetZebraFotaDeploymentReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.GetZebraFotaDeploymentReport.GetZebraFotaDeploymentReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the retrieveSecurityTaskAppsReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.RetrieveSecurityTaskAppsReport.RetrieveSecurityTaskAppsReportRequestBuilder RetrieveSecurityTaskAppsReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.RetrieveSecurityTaskAppsReport.RetrieveSecurityTaskAppsReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the retrieveWin32CatalogAppsUpdateReport method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.RetrieveWin32CatalogAppsUpdateReport.RetrieveWin32CatalogAppsUpdateReportRequestBuilder RetrieveWin32CatalogAppsUpdateReport
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.Reports.RetrieveWin32CatalogAppsUpdateReport.RetrieveWin32CatalogAppsUpdateReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ReportsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/deviceManagement/reports{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ReportsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/deviceManagement/reports{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Delete navigation property reports for deviceManagement
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Reports singleton
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.DeviceManagementReports"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Microsoft.Graph.Beta.Models.DeviceManagementReports?> GetAsync(Action<RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder.ReportsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Microsoft.Graph.Beta.Models.DeviceManagementReports> GetAsync(Action<RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder.ReportsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Microsoft.Graph.Beta.Models.DeviceManagementReports>(requestInfo, global::Microsoft.Graph.Beta.Models.DeviceManagementReports.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update the navigation property reports in deviceManagement
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.DeviceManagementReports"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Microsoft.Graph.Beta.Models.DeviceManagementReports?> PatchAsync(global::Microsoft.Graph.Beta.Models.DeviceManagementReports body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Microsoft.Graph.Beta.Models.DeviceManagementReports> PatchAsync(global::Microsoft.Graph.Beta.Models.DeviceManagementReports body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Microsoft.Graph.Beta.Models.DeviceManagementReports>(requestInfo, global::Microsoft.Graph.Beta.Models.DeviceManagementReports.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete navigation property reports for deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Reports singleton
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder.ReportsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder.ReportsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the navigation property reports in deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Microsoft.Graph.Beta.Models.DeviceManagementReports body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Microsoft.Graph.Beta.Models.DeviceManagementReports body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ReportsRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Reports singleton
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ReportsRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ReportsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.Reports.ReportsRequestBuilder.ReportsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ReportsRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
