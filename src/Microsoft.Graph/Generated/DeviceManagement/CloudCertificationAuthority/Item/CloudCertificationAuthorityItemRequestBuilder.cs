// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.ChangeCloudCertificationAuthorityStatus;
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityLeafCertificate;
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.GetAllCloudCertificationAuthority;
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.GetAllCloudCertificationAuthorityLeafCertificates;
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.GetCloudCertificationAuthority;
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.PatchCloudCertificationAuthority;
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.PostCloudCertificationAuthority;
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.RevokeCloudCertificationAuthorityCertificate;
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.RevokeLeafCertificate;
using Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.UploadExternallySignedCertificationAuthorityCertificate;
using Microsoft.Graph.Beta.Models.ODataErrors;
using Microsoft.Graph.Beta.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item
{
    /// <summary>
    /// Provides operations to manage the cloudCertificationAuthority property of the microsoft.graph.deviceManagement entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CloudCertificationAuthorityItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Provides operations to call the changeCloudCertificationAuthorityStatus method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.ChangeCloudCertificationAuthorityStatus.ChangeCloudCertificationAuthorityStatusRequestBuilder ChangeCloudCertificationAuthorityStatus
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.ChangeCloudCertificationAuthorityStatus.ChangeCloudCertificationAuthorityStatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the cloudCertificationAuthorityLeafCertificate property of the microsoft.graph.cloudCertificationAuthority entity.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityLeafCertificate.CloudCertificationAuthorityLeafCertificateRequestBuilder CloudCertificationAuthorityLeafCertificate
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityLeafCertificate.CloudCertificationAuthorityLeafCertificateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getAllCloudCertificationAuthority method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.GetAllCloudCertificationAuthority.GetAllCloudCertificationAuthorityRequestBuilder GetAllCloudCertificationAuthority
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.GetAllCloudCertificationAuthority.GetAllCloudCertificationAuthorityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getAllCloudCertificationAuthorityLeafCertificates method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.GetAllCloudCertificationAuthorityLeafCertificates.GetAllCloudCertificationAuthorityLeafCertificatesRequestBuilder GetAllCloudCertificationAuthorityLeafCertificates
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.GetAllCloudCertificationAuthorityLeafCertificates.GetAllCloudCertificationAuthorityLeafCertificatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getCloudCertificationAuthority method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.GetCloudCertificationAuthority.GetCloudCertificationAuthorityRequestBuilder GetCloudCertificationAuthority
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.GetCloudCertificationAuthority.GetCloudCertificationAuthorityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the patchCloudCertificationAuthority method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.PatchCloudCertificationAuthority.PatchCloudCertificationAuthorityRequestBuilder PatchCloudCertificationAuthority
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.PatchCloudCertificationAuthority.PatchCloudCertificationAuthorityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the postCloudCertificationAuthority method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.PostCloudCertificationAuthority.PostCloudCertificationAuthorityRequestBuilder PostCloudCertificationAuthority
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.PostCloudCertificationAuthority.PostCloudCertificationAuthorityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the revokeCloudCertificationAuthorityCertificate method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.RevokeCloudCertificationAuthorityCertificate.RevokeCloudCertificationAuthorityCertificateRequestBuilder RevokeCloudCertificationAuthorityCertificate
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.RevokeCloudCertificationAuthorityCertificate.RevokeCloudCertificationAuthorityCertificateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the revokeLeafCertificate method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.RevokeLeafCertificate.RevokeLeafCertificateRequestBuilder RevokeLeafCertificate
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.RevokeLeafCertificate.RevokeLeafCertificateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the uploadExternallySignedCertificationAuthorityCertificate method.</summary>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.UploadExternallySignedCertificationAuthorityCertificate.UploadExternallySignedCertificationAuthorityCertificateRequestBuilder UploadExternallySignedCertificationAuthorityCertificate
        {
            get => new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.UploadExternallySignedCertificationAuthorityCertificate.UploadExternallySignedCertificationAuthorityCertificateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CloudCertificationAuthorityItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/deviceManagement/cloudCertificationAuthority/{cloudCertificationAuthority%2Did}{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CloudCertificationAuthorityItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/deviceManagement/cloudCertificationAuthority/{cloudCertificationAuthority%2Did}{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Delete navigation property cloudCertificationAuthority for deviceManagement
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Collection of CloudCertificationAuthority records associated with account.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority?> GetAsync(Action<RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder.CloudCertificationAuthorityItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority> GetAsync(Action<RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder.CloudCertificationAuthorityItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority>(requestInfo, global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update the navigation property cloudCertificationAuthority in deviceManagement
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority?> PatchAsync(global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority> PatchAsync(global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority>(requestInfo, global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete navigation property cloudCertificationAuthority for deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Collection of CloudCertificationAuthority records associated with account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder.CloudCertificationAuthorityItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder.CloudCertificationAuthorityItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the navigation property cloudCertificationAuthority in deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Microsoft.Graph.Beta.Models.CloudCertificationAuthority body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CloudCertificationAuthorityItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Collection of CloudCertificationAuthority records associated with account.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CloudCertificationAuthorityItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CloudCertificationAuthorityItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Microsoft.Graph.Beta.DeviceManagement.CloudCertificationAuthority.Item.CloudCertificationAuthorityItemRequestBuilder.CloudCertificationAuthorityItemRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CloudCertificationAuthorityItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
