// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Requests\MethodRequestBuilder.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type WorkbookTableItemAtRequestBuilder.
    /// </summary>
    public partial class WorkbookTableItemAtRequestBuilder : BaseFunctionMethodRequestBuilder<IWorkbookTableItemAtRequest>, IWorkbookTableItemAtRequestBuilder
    {
        /// <summary>
        /// Constructs a new <see cref="WorkbookTableItemAtRequestBuilder"/>.
        /// </summary>
        /// <param name="requestUrl">The URL for the request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="index">A index parameter for the OData method call.</param>
        public WorkbookTableItemAtRequestBuilder(
            string requestUrl,
            IBaseClient client,
            Int32 index)
            : base(requestUrl, client)
        {
            this.SetParameter("index", index, false);
            this.SetFunctionParameters();
        }

        /// <summary>
        /// A method used by the base class to construct a request class instance.
        /// </summary>
        /// <param name="functionUrl">The request URL to </param>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>An instance of a specific request class.</returns>
        protected override IWorkbookTableItemAtRequest CreateRequest(string functionUrl, IEnumerable<Option> options)
        {
            var request = new WorkbookTableItemAtRequest(functionUrl, this.Client, options);

            return request;
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableAddRequestBuilder.
        /// </summary>
        /// <param name="hasHeaders">A hasHeaders parameter for the OData method call.</param>
        /// <param name="address">A address parameter for the OData method call.</param>
        /// <returns>The <see cref="IWorkbookTableAddRequestBuilder"/>.</returns>
        public IWorkbookTableAddRequestBuilder Add(
            bool hasHeaders,
            string address)
        {
            return new WorkbookTableAddRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.add"),
                this.Client,
                hasHeaders,
                address);
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableClearFiltersRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableClearFiltersRequestBuilder"/>.</returns>
        public IWorkbookTableClearFiltersRequestBuilder ClearFilters()
        {
            return new WorkbookTableClearFiltersRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.clearFilters"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableConvertToRangeRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableConvertToRangeRequestBuilder"/>.</returns>
        public IWorkbookTableConvertToRangeRequestBuilder ConvertToRange()
        {
            return new WorkbookTableConvertToRangeRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.convertToRange"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableCountRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableCountRequestBuilder"/>.</returns>
        public IWorkbookTableCountRequestBuilder Count()
        {
            return new WorkbookTableCountRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.count"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableDataBodyRangeRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableDataBodyRangeRequestBuilder"/>.</returns>
        public IWorkbookTableDataBodyRangeRequestBuilder DataBodyRange()
        {
            return new WorkbookTableDataBodyRangeRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.dataBodyRange"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableHeaderRowRangeRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableHeaderRowRangeRequestBuilder"/>.</returns>
        public IWorkbookTableHeaderRowRangeRequestBuilder HeaderRowRange()
        {
            return new WorkbookTableHeaderRowRangeRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.headerRowRange"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableItemAtRequestBuilder.
        /// </summary>
        /// <param name="index">A index parameter for the OData method call.</param>
        /// <returns>The <see cref="IWorkbookTableItemAtRequestBuilder"/>.</returns>
        public IWorkbookTableItemAtRequestBuilder ItemAt(
            Int32 index)
        {
            return new WorkbookTableItemAtRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.itemAt"),
                this.Client,
                index);
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableRangeRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableRangeRequestBuilder"/>.</returns>
        public IWorkbookTableRangeRequestBuilder Range()
        {
            return new WorkbookTableRangeRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.range"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableReapplyFiltersRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableReapplyFiltersRequestBuilder"/>.</returns>
        public IWorkbookTableReapplyFiltersRequestBuilder ReapplyFilters()
        {
            return new WorkbookTableReapplyFiltersRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.reapplyFilters"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for WorkbookTableTotalRowRangeRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableTotalRowRangeRequestBuilder"/>.</returns>
        public IWorkbookTableTotalRowRangeRequestBuilder TotalRowRange()
        {
            return new WorkbookTableTotalRowRangeRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.totalRowRange"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for Columns.
        /// Represents a collection of all the columns in the table. Read-only.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableColumnRequestBuilder"/>.</returns>
        public IWorkbookTableColumnRequestBuilder Columns
        {
            get
            {
                return new WorkbookTableColumnRequestBuilder(this.AppendSegmentToRequestUrl("columns"), this.Client);
            }
        }
        /// <summary>
        /// Gets the request builder for Rows.
        /// Represents a collection of all the rows in the table. Read-only.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableRowRequestBuilder"/>.</returns>
        public IWorkbookTableRowRequestBuilder Rows
        {
            get
            {
                return new WorkbookTableRowRequestBuilder(this.AppendSegmentToRequestUrl("rows"), this.Client);
            }
        }
        /// <summary>
        /// Gets the request builder for Sort.
        /// Represents the sorting for the table. Read-only.
        /// </summary>
        /// <returns>The <see cref="IWorkbookTableSortRequestBuilder"/>.</returns>
        public IWorkbookTableSortRequestBuilder Sort
        {
            get
            {
                return new WorkbookTableSortRequestBuilder(this.AppendSegmentToRequestUrl("sort"), this.Client);
            }
        }
        /// <summary>
        /// Gets the request builder for Worksheet.
        /// The worksheet containing the current table. Read-only.
        /// </summary>
        /// <returns>The <see cref="IWorkbookWorksheetRequestBuilder"/>.</returns>
        public IWorkbookWorksheetRequestBuilder Worksheet
        {
            get
            {
                return new WorkbookWorksheetRequestBuilder(this.AppendSegmentToRequestUrl("worksheet"), this.Client);
            }
        }
    }
}
