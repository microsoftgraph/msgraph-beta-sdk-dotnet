// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: MethodRequestBuilder.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type SiteGetApplicableContentTypesForListRequestBuilder.
    /// </summary>
    public partial class SiteGetApplicableContentTypesForListRequestBuilder : BaseFunctionMethodRequestBuilder<ISiteGetApplicableContentTypesForListRequest>, ISiteGetApplicableContentTypesForListRequestBuilder
    {
        /// <summary>
        /// Constructs a new <see cref="SiteGetApplicableContentTypesForListRequestBuilder"/>.
        /// </summary>
        /// <param name="requestUrl">The URL for the request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="listId">A listId parameter for the OData method call.</param>
        public SiteGetApplicableContentTypesForListRequestBuilder(
            string requestUrl,
            IBaseClient client,
            string listId)
            : base(requestUrl, client)
        {
            this.SetParameter("listId", listId, false);
            this.SetFunctionParameters();
        }

        /// <summary>
        /// A method used by the base class to construct a request class instance.
        /// </summary>
        /// <param name="functionUrl">The request URL to </param>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>An instance of a specific request class.</returns>
        protected override ISiteGetApplicableContentTypesForListRequest CreateRequest(string functionUrl, IEnumerable<Option> options)
        {
            var request = new SiteGetApplicableContentTypesForListRequest(functionUrl, this.Client, options);

            return request;
        }
        /// <summary>
        /// Gets the request builder for ContentTypeAddCopyRequestBuilder.
        /// </summary>
        /// <param name="contentType">A contentType parameter for the OData method call.</param>
        /// <returns>The <see cref="IContentTypeAddCopyRequestBuilder"/>.</returns>
        public IContentTypeAddCopyRequestBuilder AddCopy(
            string contentType)
        {
            return new ContentTypeAddCopyRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.addCopy"),
                this.Client,
                contentType);
        }
        /// <summary>
        /// Gets the request builder for ContentTypeAssociateWithHubSitesRequestBuilder.
        /// </summary>
        /// <param name="hubSiteUrls">A hubSiteUrls parameter for the OData method call.</param>
        /// <param name="propagateToExistingLists">A propagateToExistingLists parameter for the OData method call.</param>
        /// <returns>The <see cref="IContentTypeAssociateWithHubSitesRequestBuilder"/>.</returns>
        public IContentTypeAssociateWithHubSitesRequestBuilder AssociateWithHubSites(
            IEnumerable<string> hubSiteUrls,
            bool? propagateToExistingLists)
        {
            return new ContentTypeAssociateWithHubSitesRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.associateWithHubSites"),
                this.Client,
                hubSiteUrls,
                propagateToExistingLists);
        }
        /// <summary>
        /// Gets the request builder for ContentTypeCopyToDefaultContentLocationRequestBuilder.
        /// </summary>
        /// <param name="sourceFile">A sourceFile parameter for the OData method call.</param>
        /// <param name="destinationFileName">A destinationFileName parameter for the OData method call.</param>
        /// <returns>The <see cref="IContentTypeCopyToDefaultContentLocationRequestBuilder"/>.</returns>
        public IContentTypeCopyToDefaultContentLocationRequestBuilder CopyToDefaultContentLocation(
            ItemReference sourceFile,
            string destinationFileName)
        {
            return new ContentTypeCopyToDefaultContentLocationRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.copyToDefaultContentLocation"),
                this.Client,
                sourceFile,
                destinationFileName);
        }
        /// <summary>
        /// Gets the request builder for ContentTypeIsPublishedRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IContentTypeIsPublishedRequestBuilder"/>.</returns>
        public IContentTypeIsPublishedRequestBuilder IsPublished()
        {
            return new ContentTypeIsPublishedRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.isPublished"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for ContentTypePublishRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IContentTypePublishRequestBuilder"/>.</returns>
        public IContentTypePublishRequestBuilder Publish()
        {
            return new ContentTypePublishRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.publish"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for ContentTypeUnpublishRequestBuilder.
        /// </summary>
        /// <returns>The <see cref="IContentTypeUnpublishRequestBuilder"/>.</returns>
        public IContentTypeUnpublishRequestBuilder Unpublish()
        {
            return new ContentTypeUnpublishRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.unpublish"),
                this.Client);
        }
        /// <summary>
        /// Gets the request builder for Base.
        /// Parent contentType from which this content type is derived.
        /// </summary>
        /// <returns>The <see cref="IContentTypeRequestBuilder"/>.</returns>
        public IContentTypeRequestBuilder Base
        {
            get
            {
                return new ContentTypeRequestBuilder(this.AppendSegmentToRequestUrl("base"), this.Client);
            }
        }
        /// <summary>
        /// Gets the request builder for BaseTypes.
        /// The collection of content types that are ancestors of this content type.
        /// </summary>
        /// <returns>The <see cref="IContentTypeRequestBuilder"/>.</returns>
        public IContentTypeRequestBuilder BaseTypes
        {
            get
            {
                return new ContentTypeRequestBuilder(this.AppendSegmentToRequestUrl("baseTypes"), this.Client);
            }
        }
        /// <summary>
        /// Gets the request builder for ColumnLinks.
        /// The collection of columns that are required by this content type
        /// </summary>
        /// <returns>The <see cref="IColumnLinkRequestBuilder"/>.</returns>
        public IColumnLinkRequestBuilder ColumnLinks
        {
            get
            {
                return new ColumnLinkRequestBuilder(this.AppendSegmentToRequestUrl("columnLinks"), this.Client);
            }
        }
        /// <summary>
        /// Gets the request builder for ColumnPositions.
        /// Column order information in a content type.
        /// </summary>
        /// <returns>The <see cref="IColumnDefinitionRequestBuilder"/>.</returns>
        public IColumnDefinitionRequestBuilder ColumnPositions
        {
            get
            {
                return new ColumnDefinitionRequestBuilder(this.AppendSegmentToRequestUrl("columnPositions"), this.Client);
            }
        }
        /// <summary>
        /// Gets the request builder for Columns.
        /// The collection of column definitions for this contentType.
        /// </summary>
        /// <returns>The <see cref="IColumnDefinitionRequestBuilder"/>.</returns>
        public IColumnDefinitionRequestBuilder Columns
        {
            get
            {
                return new ColumnDefinitionRequestBuilder(this.AppendSegmentToRequestUrl("columns"), this.Client);
            }
        }
    }
}
