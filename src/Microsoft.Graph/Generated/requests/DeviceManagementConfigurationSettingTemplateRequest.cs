// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The type DeviceManagementConfigurationSettingTemplateRequest.
    /// </summary>
    public partial class DeviceManagementConfigurationSettingTemplateRequest : BaseRequest, IDeviceManagementConfigurationSettingTemplateRequest
    {
        /// <summary>
        /// Constructs a new DeviceManagementConfigurationSettingTemplateRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public DeviceManagementConfigurationSettingTemplateRequest(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Creates the specified DeviceManagementConfigurationSettingTemplate using POST.
        /// </summary>
        /// <param name="deviceManagementConfigurationSettingTemplateToCreate">The DeviceManagementConfigurationSettingTemplate to create.</param>
        /// <returns>The created DeviceManagementConfigurationSettingTemplate.</returns>
        public System.Threading.Tasks.Task<DeviceManagementConfigurationSettingTemplate> CreateAsync(DeviceManagementConfigurationSettingTemplate deviceManagementConfigurationSettingTemplateToCreate)
        {
            return this.CreateAsync(deviceManagementConfigurationSettingTemplateToCreate, CancellationToken.None);
        }

        /// <summary>
        /// Creates the specified DeviceManagementConfigurationSettingTemplate using POST.
        /// </summary>
        /// <param name="deviceManagementConfigurationSettingTemplateToCreate">The DeviceManagementConfigurationSettingTemplate to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created DeviceManagementConfigurationSettingTemplate.</returns>
        public async System.Threading.Tasks.Task<DeviceManagementConfigurationSettingTemplate> CreateAsync(DeviceManagementConfigurationSettingTemplate deviceManagementConfigurationSettingTemplateToCreate, CancellationToken cancellationToken)
        {
            this.ContentType = "application/json";
            this.Method = "POST";
            var newEntity = await this.SendAsync<DeviceManagementConfigurationSettingTemplate>(deviceManagementConfigurationSettingTemplateToCreate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }

        /// <summary>
        /// Deletes the specified DeviceManagementConfigurationSettingTemplate.
        /// </summary>
        /// <returns>The task to await.</returns>
        public System.Threading.Tasks.Task DeleteAsync()
        {
            return this.DeleteAsync(CancellationToken.None);
        }

        /// <summary>
        /// Deletes the specified DeviceManagementConfigurationSettingTemplate.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken)
        {
            this.Method = "DELETE";
            await this.SendAsync<DeviceManagementConfigurationSettingTemplate>(null, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified DeviceManagementConfigurationSettingTemplate.
        /// </summary>
        /// <returns>The DeviceManagementConfigurationSettingTemplate.</returns>
        public System.Threading.Tasks.Task<DeviceManagementConfigurationSettingTemplate> GetAsync()
        {
            return this.GetAsync(CancellationToken.None);
        }

        /// <summary>
        /// Gets the specified DeviceManagementConfigurationSettingTemplate.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The DeviceManagementConfigurationSettingTemplate.</returns>
        public async System.Threading.Tasks.Task<DeviceManagementConfigurationSettingTemplate> GetAsync(CancellationToken cancellationToken)
        {
            this.Method = "GET";
            var retrievedEntity = await this.SendAsync<DeviceManagementConfigurationSettingTemplate>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Updates the specified DeviceManagementConfigurationSettingTemplate using PATCH.
        /// </summary>
        /// <param name="deviceManagementConfigurationSettingTemplateToUpdate">The DeviceManagementConfigurationSettingTemplate to update.</param>
        /// <returns>The updated DeviceManagementConfigurationSettingTemplate.</returns>
        public System.Threading.Tasks.Task<DeviceManagementConfigurationSettingTemplate> UpdateAsync(DeviceManagementConfigurationSettingTemplate deviceManagementConfigurationSettingTemplateToUpdate)
        {
            return this.UpdateAsync(deviceManagementConfigurationSettingTemplateToUpdate, CancellationToken.None);
        }

        /// <summary>
        /// Updates the specified DeviceManagementConfigurationSettingTemplate using PATCH.
        /// </summary>
        /// <param name="deviceManagementConfigurationSettingTemplateToUpdate">The DeviceManagementConfigurationSettingTemplate to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated DeviceManagementConfigurationSettingTemplate.</returns>
        public async System.Threading.Tasks.Task<DeviceManagementConfigurationSettingTemplate> UpdateAsync(DeviceManagementConfigurationSettingTemplate deviceManagementConfigurationSettingTemplateToUpdate, CancellationToken cancellationToken)
        {
			if (deviceManagementConfigurationSettingTemplateToUpdate.AdditionalData != null)
			{
				if (deviceManagementConfigurationSettingTemplateToUpdate.AdditionalData.ContainsKey(Constants.HttpPropertyNames.ResponseHeaders) ||
					deviceManagementConfigurationSettingTemplateToUpdate.AdditionalData.ContainsKey(Constants.HttpPropertyNames.StatusCode))
				{
					throw new ClientException(
						new Error
						{
							Code = GeneratedErrorConstants.Codes.NotAllowed,
							Message = String.Format(GeneratedErrorConstants.Messages.ResponseObjectUsedForUpdate, deviceManagementConfigurationSettingTemplateToUpdate.GetType().Name)
						});
				}
			}
            if (deviceManagementConfigurationSettingTemplateToUpdate.AdditionalData != null)
            {
                if (deviceManagementConfigurationSettingTemplateToUpdate.AdditionalData.ContainsKey(Constants.HttpPropertyNames.ResponseHeaders) ||
                    deviceManagementConfigurationSettingTemplateToUpdate.AdditionalData.ContainsKey(Constants.HttpPropertyNames.StatusCode))
                {
                    throw new ClientException(
                        new Error
                        {
                            Code = GeneratedErrorConstants.Codes.NotAllowed,
                            Message = String.Format(GeneratedErrorConstants.Messages.ResponseObjectUsedForUpdate, deviceManagementConfigurationSettingTemplateToUpdate.GetType().Name)
                        });
                }
            }
            this.ContentType = "application/json";
            this.Method = "PATCH";
            var updatedEntity = await this.SendAsync<DeviceManagementConfigurationSettingTemplate>(deviceManagementConfigurationSettingTemplateToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public IDeviceManagementConfigurationSettingTemplateRequest Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        public IDeviceManagementConfigurationSettingTemplateRequest Expand(Expression<Func<DeviceManagementConfigurationSettingTemplate, object>> expandExpression)
        {
		    if (expandExpression == null)
            {
                throw new ArgumentNullException(nameof(expandExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(expandExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(expandExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$expand", value));
            }
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public IDeviceManagementConfigurationSettingTemplateRequest Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        public IDeviceManagementConfigurationSettingTemplateRequest Select(Expression<Func<DeviceManagementConfigurationSettingTemplate, object>> selectExpression)
        {
            if (selectExpression == null)
            {
                throw new ArgumentNullException(nameof(selectExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(selectExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(selectExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$select", value));
            }
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="deviceManagementConfigurationSettingTemplateToInitialize">The <see cref="DeviceManagementConfigurationSettingTemplate"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(DeviceManagementConfigurationSettingTemplate deviceManagementConfigurationSettingTemplateToInitialize)
        {

            if (deviceManagementConfigurationSettingTemplateToInitialize != null && deviceManagementConfigurationSettingTemplateToInitialize.AdditionalData != null)
            {

                if (deviceManagementConfigurationSettingTemplateToInitialize.SettingDefinitions != null && deviceManagementConfigurationSettingTemplateToInitialize.SettingDefinitions.CurrentPage != null)
                {
                    deviceManagementConfigurationSettingTemplateToInitialize.SettingDefinitions.AdditionalData = deviceManagementConfigurationSettingTemplateToInitialize.AdditionalData;

                    object nextPageLink;
                    deviceManagementConfigurationSettingTemplateToInitialize.AdditionalData.TryGetValue("settingDefinitions@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        deviceManagementConfigurationSettingTemplateToInitialize.SettingDefinitions.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

            }


        }
    }
}
