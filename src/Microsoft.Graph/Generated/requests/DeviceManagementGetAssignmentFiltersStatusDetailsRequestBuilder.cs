// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: MethodRequestBuilder.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type DeviceManagementGetAssignmentFiltersStatusDetailsRequestBuilder.
    /// </summary>
    public partial class DeviceManagementGetAssignmentFiltersStatusDetailsRequestBuilder : BaseActionMethodRequestBuilder<IDeviceManagementGetAssignmentFiltersStatusDetailsRequest>, IDeviceManagementGetAssignmentFiltersStatusDetailsRequestBuilder
    {
        /// <summary>
        /// Constructs a new <see cref="DeviceManagementGetAssignmentFiltersStatusDetailsRequestBuilder"/>.
        /// </summary>
        /// <param name="requestUrl">The URL for the request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="managedDeviceId">A managedDeviceId parameter for the OData method call.</param>
        /// <param name="payloadId">A payloadId parameter for the OData method call.</param>
        /// <param name="userId">A userId parameter for the OData method call.</param>
        /// <param name="assignmentFilterIds">A assignmentFilterIds parameter for the OData method call.</param>
        /// <param name="top">A top parameter for the OData method call.</param>
        /// <param name="skip">A skip parameter for the OData method call.</param>
        public DeviceManagementGetAssignmentFiltersStatusDetailsRequestBuilder(
            string requestUrl,
            IBaseClient client,
            string managedDeviceId,
            string payloadId,
            string userId,
            IEnumerable<string> assignmentFilterIds,
            Int32? top,
            Int32? skip)
            : base(requestUrl, client)
        {
            this.SetParameter("managedDeviceId", managedDeviceId, true);
            this.SetParameter("payloadId", payloadId, true);
            this.SetParameter("userId", userId, true);
            this.SetParameter("assignmentFilterIds", assignmentFilterIds, true);
            this.SetParameter("top", top, true);
            this.SetParameter("skip", skip, true);
        }

        /// <summary>
        /// A method used by the base class to construct a request class instance.
        /// </summary>
        /// <param name="functionUrl">The request URL to </param>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>An instance of a specific request class.</returns>
        protected override IDeviceManagementGetAssignmentFiltersStatusDetailsRequest CreateRequest(string functionUrl, IEnumerable<Option> options)
        {
            var request = new DeviceManagementGetAssignmentFiltersStatusDetailsRequest(functionUrl, this.Client, options);

            if (this.HasParameter("managedDeviceId"))
            {
                request.RequestBody.ManagedDeviceId = this.GetParameter<string>("managedDeviceId");
            }

            if (this.HasParameter("payloadId"))
            {
                request.RequestBody.PayloadId = this.GetParameter<string>("payloadId");
            }

            if (this.HasParameter("userId"))
            {
                request.RequestBody.UserId = this.GetParameter<string>("userId");
            }

            if (this.HasParameter("assignmentFilterIds"))
            {
                request.RequestBody.AssignmentFilterIds = this.GetParameter<IEnumerable<string>>("assignmentFilterIds");
            }

            if (this.HasParameter("top"))
            {
                request.RequestBody.Top = this.GetParameter<Int32?>("top");
            }

            if (this.HasParameter("skip"))
            {
                request.RequestBody.Skip = this.GetParameter<Int32?>("skip");
            }

            return request;
        }
    }
}
