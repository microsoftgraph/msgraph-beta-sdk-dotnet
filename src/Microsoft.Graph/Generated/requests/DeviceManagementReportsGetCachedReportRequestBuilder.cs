// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: MethodRequestBuilder.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type DeviceManagementReportsGetCachedReportRequestBuilder.
    /// </summary>
    public partial class DeviceManagementReportsGetCachedReportRequestBuilder : BaseActionMethodRequestBuilder<IDeviceManagementReportsGetCachedReportRequest>, IDeviceManagementReportsGetCachedReportRequestBuilder
    {
        /// <summary>
        /// Constructs a new <see cref="DeviceManagementReportsGetCachedReportRequestBuilder"/>.
        /// </summary>
        /// <param name="requestUrl">The URL for the request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="id">A id parameter for the OData method call.</param>
        /// <param name="select">A select parameter for the OData method call.</param>
        /// <param name="search">A search parameter for the OData method call.</param>
        /// <param name="groupBy">A groupBy parameter for the OData method call.</param>
        /// <param name="orderBy">A orderBy parameter for the OData method call.</param>
        /// <param name="skip">A skip parameter for the OData method call.</param>
        /// <param name="top">A top parameter for the OData method call.</param>
        public DeviceManagementReportsGetCachedReportRequestBuilder(
            string requestUrl,
            IBaseClient client,
            string id,
            IEnumerable<string> select,
            string search,
            IEnumerable<string> groupBy,
            IEnumerable<string> orderBy,
            Int32? skip,
            Int32? top)
            : base(requestUrl, client)
        {
            this.SetParameter("id", id, true);
            this.SetParameter("select", select, true);
            this.SetParameter("search", search, true);
            this.SetParameter("groupBy", groupBy, true);
            this.SetParameter("orderBy", orderBy, true);
            this.SetParameter("skip", skip, true);
            this.SetParameter("top", top, true);
        }

        /// <summary>
        /// A method used by the base class to construct a request class instance.
        /// </summary>
        /// <param name="functionUrl">The request URL to </param>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>An instance of a specific request class.</returns>
        protected override IDeviceManagementReportsGetCachedReportRequest CreateRequest(string functionUrl, IEnumerable<Option> options)
        {
            var request = new DeviceManagementReportsGetCachedReportRequest(functionUrl, this.Client, options);

            if (this.HasParameter("id"))
            {
                request.RequestBody.Id = this.GetParameter<string>("id");
            }

            if (this.HasParameter("select"))
            {
                request.RequestBody.Select = this.GetParameter<IEnumerable<string>>("select");
            }

            if (this.HasParameter("search"))
            {
                request.RequestBody.Search = this.GetParameter<string>("search");
            }

            if (this.HasParameter("groupBy"))
            {
                request.RequestBody.GroupBy = this.GetParameter<IEnumerable<string>>("groupBy");
            }

            if (this.HasParameter("orderBy"))
            {
                request.RequestBody.OrderBy = this.GetParameter<IEnumerable<string>>("orderBy");
            }

            if (this.HasParameter("skip"))
            {
                request.RequestBody.Skip = this.GetParameter<Int32?>("skip");
            }

            if (this.HasParameter("top"))
            {
                request.RequestBody.Top = this.GetParameter<Int32?>("top");
            }

            return request;
        }
    }
}
