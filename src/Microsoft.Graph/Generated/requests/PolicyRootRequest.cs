// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The type PolicyRootRequest.
    /// </summary>
    public partial class PolicyRootRequest : BaseRequest, IPolicyRootRequest
    {
        /// <summary>
        /// Constructs a new PolicyRootRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public PolicyRootRequest(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Creates the specified PolicyRoot using POST.
        /// </summary>
        /// <param name="policyRootToCreate">The PolicyRoot to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created PolicyRoot.</returns>
        public async System.Threading.Tasks.Task<PolicyRoot> CreateAsync(PolicyRoot policyRootToCreate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.POST;
            var newEntity = await this.SendAsync<PolicyRoot>(policyRootToCreate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }

        /// <summary>
        /// Creates the specified PolicyRoot using POST and returns a <see cref="GraphResponse{PolicyRoot}"/> object.
        /// </summary>
        /// <param name="policyRootToCreate">The PolicyRoot to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{PolicyRoot}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<PolicyRoot>> CreateResponseAsync(PolicyRoot policyRootToCreate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.POST;
            return this.SendAsyncWithGraphResponse<PolicyRoot>(policyRootToCreate, cancellationToken);
        }

        /// <summary>
        /// Deletes the specified PolicyRoot.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.DELETE;
            await this.SendAsync<PolicyRoot>(null, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes the specified PolicyRoot and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        public System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.DELETE;
            return this.SendAsyncWithGraphResponse(null, cancellationToken);
        }

        /// <summary>
        /// Gets the specified PolicyRoot.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The PolicyRoot.</returns>
        public async System.Threading.Tasks.Task<PolicyRoot> GetAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.GET;
            var retrievedEntity = await this.SendAsync<PolicyRoot>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Gets the specified PolicyRoot and returns a <see cref="GraphResponse{PolicyRoot}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{PolicyRoot}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<PolicyRoot>> GetResponseAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.GET;
            return this.SendAsyncWithGraphResponse<PolicyRoot>(null, cancellationToken);
        }

        /// <summary>
        /// Updates the specified PolicyRoot using PATCH.
        /// </summary>
        /// <param name="policyRootToUpdate">The PolicyRoot to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated PolicyRoot.</returns>
        public async System.Threading.Tasks.Task<PolicyRoot> UpdateAsync(PolicyRoot policyRootToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            var updatedEntity = await this.SendAsync<PolicyRoot>(policyRootToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified PolicyRoot using PATCH and returns a <see cref="GraphResponse{PolicyRoot}"/> object.
        /// </summary>
        /// <param name="policyRootToUpdate">The PolicyRoot to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{PolicyRoot}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<PolicyRoot>> UpdateResponseAsync(PolicyRoot policyRootToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            return this.SendAsyncWithGraphResponse<PolicyRoot>(policyRootToUpdate, cancellationToken);
        }

        /// <summary>
        /// Updates the specified PolicyRoot using PUT.
        /// </summary>
        /// <param name="policyRootToUpdate">The PolicyRoot object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task<PolicyRoot> PutAsync(PolicyRoot policyRootToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            var updatedEntity = await this.SendAsync<PolicyRoot>(policyRootToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified PolicyRoot using PUT and returns a <see cref="GraphResponse{PolicyRoot}"/> object.
        /// </summary>
        /// <param name="policyRootToUpdate">The PolicyRoot object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await of <see cref="GraphResponse{PolicyRoot}"/>.</returns>
        public System.Threading.Tasks.Task<GraphResponse<PolicyRoot>> PutResponseAsync(PolicyRoot policyRootToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            return this.SendAsyncWithGraphResponse<PolicyRoot>(policyRootToUpdate, cancellationToken);
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public IPolicyRootRequest Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        public IPolicyRootRequest Expand(Expression<Func<PolicyRoot, object>> expandExpression)
        {
		    if (expandExpression == null)
            {
                throw new ArgumentNullException(nameof(expandExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(expandExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(expandExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$expand", value));
            }
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public IPolicyRootRequest Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        public IPolicyRootRequest Select(Expression<Func<PolicyRoot, object>> selectExpression)
        {
            if (selectExpression == null)
            {
                throw new ArgumentNullException(nameof(selectExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(selectExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(selectExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$select", value));
            }
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="policyRootToInitialize">The <see cref="PolicyRoot"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(PolicyRoot policyRootToInitialize)
        {

            if (policyRootToInitialize != null)
            {
                if (policyRootToInitialize.ActivityBasedTimeoutPolicies != null && policyRootToInitialize.ActivityBasedTimeoutPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.ActivityBasedTimeoutPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.ActivityBasedTimeoutPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.ActivityBasedTimeoutPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.AppManagementPolicies != null && policyRootToInitialize.AppManagementPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.AppManagementPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.AppManagementPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.AppManagementPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.AuthorizationPolicy != null && policyRootToInitialize.AuthorizationPolicy.CurrentPage != null)
                {
                    policyRootToInitialize.AuthorizationPolicy.InitializeNextPageRequest(this.Client, policyRootToInitialize.AuthorizationPolicyNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.AuthorizationPolicy.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.ClaimsMappingPolicies != null && policyRootToInitialize.ClaimsMappingPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.ClaimsMappingPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.ClaimsMappingPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.ClaimsMappingPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.HomeRealmDiscoveryPolicies != null && policyRootToInitialize.HomeRealmDiscoveryPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.HomeRealmDiscoveryPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.HomeRealmDiscoveryPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.HomeRealmDiscoveryPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.PermissionGrantPolicies != null && policyRootToInitialize.PermissionGrantPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.PermissionGrantPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.PermissionGrantPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.PermissionGrantPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.TokenIssuancePolicies != null && policyRootToInitialize.TokenIssuancePolicies.CurrentPage != null)
                {
                    policyRootToInitialize.TokenIssuancePolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.TokenIssuancePoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.TokenIssuancePolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.TokenLifetimePolicies != null && policyRootToInitialize.TokenLifetimePolicies.CurrentPage != null)
                {
                    policyRootToInitialize.TokenLifetimePolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.TokenLifetimePoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.TokenLifetimePolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.FeatureRolloutPolicies != null && policyRootToInitialize.FeatureRolloutPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.FeatureRolloutPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.FeatureRolloutPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.FeatureRolloutPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.ConditionalAccessPolicies != null && policyRootToInitialize.ConditionalAccessPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.ConditionalAccessPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.ConditionalAccessPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.ConditionalAccessPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.MobileAppManagementPolicies != null && policyRootToInitialize.MobileAppManagementPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.MobileAppManagementPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.MobileAppManagementPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.MobileAppManagementPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.MobileDeviceManagementPolicies != null && policyRootToInitialize.MobileDeviceManagementPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.MobileDeviceManagementPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.MobileDeviceManagementPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.MobileDeviceManagementPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.RoleManagementPolicies != null && policyRootToInitialize.RoleManagementPolicies.CurrentPage != null)
                {
                    policyRootToInitialize.RoleManagementPolicies.InitializeNextPageRequest(this.Client, policyRootToInitialize.RoleManagementPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.RoleManagementPolicies.AdditionalData = policyRootToInitialize.AdditionalData;
                }
                if (policyRootToInitialize.RoleManagementPolicyAssignments != null && policyRootToInitialize.RoleManagementPolicyAssignments.CurrentPage != null)
                {
                    policyRootToInitialize.RoleManagementPolicyAssignments.InitializeNextPageRequest(this.Client, policyRootToInitialize.RoleManagementPolicyAssignmentsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    policyRootToInitialize.RoleManagementPolicyAssignments.AdditionalData = policyRootToInitialize.AdditionalData;
                }

            }


        }
    }
}
