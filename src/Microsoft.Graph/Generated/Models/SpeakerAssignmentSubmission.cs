// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SpeakerAssignmentSubmission : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>ID of the assignment with which this submission is associated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssignmentId
        {
            get { return BackingStore?.Get<string?>("assignmentId"); }
            set { BackingStore?.Set("assignmentId", value); }
        }
#nullable restore
#else
        public string AssignmentId
        {
            get { return BackingStore?.Get<string>("assignmentId"); }
            set { BackingStore?.Set("assignmentId", value); }
        }
#endif
        /// <summary>The average speaking pace of the student, measured in words per minute.</summary>
        public long? AverageWordsPerMinutePace
        {
            get { return BackingStore?.Get<long?>("averageWordsPerMinutePace"); }
            set { BackingStore?.Set("averageWordsPerMinutePace", value); }
        }
        /// <summary>ID of the class this speaker progress is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClassId
        {
            get { return BackingStore?.Get<string?>("classId"); }
            set { BackingStore?.Set("classId", value); }
        }
#nullable restore
#else
        public string ClassId
        {
            get { return BackingStore?.Get<string>("classId"); }
            set { BackingStore?.Set("classId", value); }
        }
#endif
        /// <summary>The number of times the student was flagged by Speaker Coach for using a filler word.</summary>
        public long? FillerWordsOccurrencesCount
        {
            get { return BackingStore?.Get<long?>("fillerWordsOccurrencesCount"); }
            set { BackingStore?.Set("fillerWordsOccurrencesCount", value); }
        }
        /// <summary>The number of times the student was flagged by Speaker Coach for being either too close or too far away from the camera.</summary>
        public long? IncorrectCameraDistanceOccurrencesCount
        {
            get { return BackingStore?.Get<long?>("incorrectCameraDistanceOccurrencesCount"); }
            set { BackingStore?.Set("incorrectCameraDistanceOccurrencesCount", value); }
        }
        /// <summary>The length of the student submission in seconds.</summary>
        public double? LengthOfSubmissionInSeconds
        {
            get { return BackingStore?.Get<double?>("lengthOfSubmissionInSeconds"); }
            set { BackingStore?.Set("lengthOfSubmissionInSeconds", value); }
        }
        /// <summary>The number of times the student was flagged by Speaker Coach for losing eye contact with the camera.</summary>
        public long? LostEyeContactOccurrencesCount
        {
            get { return BackingStore?.Get<long?>("lostEyeContactOccurrencesCount"); }
            set { BackingStore?.Set("lostEyeContactOccurrencesCount", value); }
        }
        /// <summary>The number of times the student was flagged by Speaker Coach for speaking in monotone.</summary>
        public long? MonotoneOccurrencesCount
        {
            get { return BackingStore?.Get<long?>("monotoneOccurrencesCount"); }
            set { BackingStore?.Set("monotoneOccurrencesCount", value); }
        }
        /// <summary>The number of times the student was flagged by Speaker Coach for using non-inclusive or sensitive language.</summary>
        public long? NonInclusiveLanguageOccurrencesCount
        {
            get { return BackingStore?.Get<long?>("nonInclusiveLanguageOccurrencesCount"); }
            set { BackingStore?.Set("nonInclusiveLanguageOccurrencesCount", value); }
        }
        /// <summary>The number of times the student was flagged by Speaker Coach for obstructing the view of their face.</summary>
        public long? ObstructedViewOccurrencesCount
        {
            get { return BackingStore?.Get<long?>("obstructedViewOccurrencesCount"); }
            set { BackingStore?.Set("obstructedViewOccurrencesCount", value); }
        }
        /// <summary>The number of times the student was flagged by Speaker Coach for using repetitive language.</summary>
        public long? RepetitiveLanguageOccurrencesCount
        {
            get { return BackingStore?.Get<long?>("repetitiveLanguageOccurrencesCount"); }
            set { BackingStore?.Set("repetitiveLanguageOccurrencesCount", value); }
        }
        /// <summary>ID of the user this speaker progress is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StudentId
        {
            get { return BackingStore?.Get<string?>("studentId"); }
            set { BackingStore?.Set("studentId", value); }
        }
#nullable restore
#else
        public string StudentId
        {
            get { return BackingStore?.Get<string>("studentId"); }
            set { BackingStore?.Set("studentId", value); }
        }
#endif
        /// <summary>Date and time of the submission this speaker progress is associated with. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? SubmissionDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("submissionDateTime"); }
            set { BackingStore?.Set("submissionDateTime", value); }
        }
        /// <summary>ID of the submission this speaker progress is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmissionId
        {
            get { return BackingStore?.Get<string?>("submissionId"); }
            set { BackingStore?.Set("submissionId", value); }
        }
#nullable restore
#else
        public string SubmissionId
        {
            get { return BackingStore?.Get<string>("submissionId"); }
            set { BackingStore?.Set("submissionId", value); }
        }
#endif
        /// <summary>The filler words used most by the student.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TopFillerWords
        {
            get { return BackingStore?.Get<List<string>?>("topFillerWords"); }
            set { BackingStore?.Set("topFillerWords", value); }
        }
#nullable restore
#else
        public List<string> TopFillerWords
        {
            get { return BackingStore?.Get<List<string>>("topFillerWords"); }
            set { BackingStore?.Set("topFillerWords", value); }
        }
#endif
        /// <summary>The words mispronounced most by the student.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TopMispronouncedWords
        {
            get { return BackingStore?.Get<List<string>?>("topMispronouncedWords"); }
            set { BackingStore?.Set("topMispronouncedWords", value); }
        }
#nullable restore
#else
        public List<string> TopMispronouncedWords
        {
            get { return BackingStore?.Get<List<string>>("topMispronouncedWords"); }
            set { BackingStore?.Set("topMispronouncedWords", value); }
        }
#endif
        /// <summary>The non-inclusive or sensitive words and phrases most used by the student.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TopNonInclusiveWordsAndPhrases
        {
            get { return BackingStore?.Get<List<string>?>("topNonInclusiveWordsAndPhrases"); }
            set { BackingStore?.Set("topNonInclusiveWordsAndPhrases", value); }
        }
#nullable restore
#else
        public List<string> TopNonInclusiveWordsAndPhrases
        {
            get { return BackingStore?.Get<List<string>>("topNonInclusiveWordsAndPhrases"); }
            set { BackingStore?.Set("topNonInclusiveWordsAndPhrases", value); }
        }
#endif
        /// <summary>The words and phrases most repeated by the student.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TopRepetitiveWordsAndPhrases
        {
            get { return BackingStore?.Get<List<string>?>("topRepetitiveWordsAndPhrases"); }
            set { BackingStore?.Set("topRepetitiveWordsAndPhrases", value); }
        }
#nullable restore
#else
        public List<string> TopRepetitiveWordsAndPhrases
        {
            get { return BackingStore?.Get<List<string>>("topRepetitiveWordsAndPhrases"); }
            set { BackingStore?.Set("topRepetitiveWordsAndPhrases", value); }
        }
#endif
        /// <summary>Total number of words spoken by the student in the submission.</summary>
        public long? WordsSpokenCount
        {
            get { return BackingStore?.Get<long?>("wordsSpokenCount"); }
            set { BackingStore?.Set("wordsSpokenCount", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.SpeakerAssignmentSubmission"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.SpeakerAssignmentSubmission CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.SpeakerAssignmentSubmission();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "assignmentId", n => { AssignmentId = n.GetStringValue(); } },
                { "averageWordsPerMinutePace", n => { AverageWordsPerMinutePace = n.GetLongValue(); } },
                { "classId", n => { ClassId = n.GetStringValue(); } },
                { "fillerWordsOccurrencesCount", n => { FillerWordsOccurrencesCount = n.GetLongValue(); } },
                { "incorrectCameraDistanceOccurrencesCount", n => { IncorrectCameraDistanceOccurrencesCount = n.GetLongValue(); } },
                { "lengthOfSubmissionInSeconds", n => { LengthOfSubmissionInSeconds = n.GetDoubleValue(); } },
                { "lostEyeContactOccurrencesCount", n => { LostEyeContactOccurrencesCount = n.GetLongValue(); } },
                { "monotoneOccurrencesCount", n => { MonotoneOccurrencesCount = n.GetLongValue(); } },
                { "nonInclusiveLanguageOccurrencesCount", n => { NonInclusiveLanguageOccurrencesCount = n.GetLongValue(); } },
                { "obstructedViewOccurrencesCount", n => { ObstructedViewOccurrencesCount = n.GetLongValue(); } },
                { "repetitiveLanguageOccurrencesCount", n => { RepetitiveLanguageOccurrencesCount = n.GetLongValue(); } },
                { "studentId", n => { StudentId = n.GetStringValue(); } },
                { "submissionDateTime", n => { SubmissionDateTime = n.GetDateTimeOffsetValue(); } },
                { "submissionId", n => { SubmissionId = n.GetStringValue(); } },
                { "topFillerWords", n => { TopFillerWords = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "topMispronouncedWords", n => { TopMispronouncedWords = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "topNonInclusiveWordsAndPhrases", n => { TopNonInclusiveWordsAndPhrases = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "topRepetitiveWordsAndPhrases", n => { TopRepetitiveWordsAndPhrases = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "wordsSpokenCount", n => { WordsSpokenCount = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("assignmentId", AssignmentId);
            writer.WriteLongValue("averageWordsPerMinutePace", AverageWordsPerMinutePace);
            writer.WriteStringValue("classId", ClassId);
            writer.WriteLongValue("fillerWordsOccurrencesCount", FillerWordsOccurrencesCount);
            writer.WriteLongValue("incorrectCameraDistanceOccurrencesCount", IncorrectCameraDistanceOccurrencesCount);
            writer.WriteDoubleValue("lengthOfSubmissionInSeconds", LengthOfSubmissionInSeconds);
            writer.WriteLongValue("lostEyeContactOccurrencesCount", LostEyeContactOccurrencesCount);
            writer.WriteLongValue("monotoneOccurrencesCount", MonotoneOccurrencesCount);
            writer.WriteLongValue("nonInclusiveLanguageOccurrencesCount", NonInclusiveLanguageOccurrencesCount);
            writer.WriteLongValue("obstructedViewOccurrencesCount", ObstructedViewOccurrencesCount);
            writer.WriteLongValue("repetitiveLanguageOccurrencesCount", RepetitiveLanguageOccurrencesCount);
            writer.WriteStringValue("studentId", StudentId);
            writer.WriteDateTimeOffsetValue("submissionDateTime", SubmissionDateTime);
            writer.WriteStringValue("submissionId", SubmissionId);
            writer.WriteCollectionOfPrimitiveValues<string>("topFillerWords", TopFillerWords);
            writer.WriteCollectionOfPrimitiveValues<string>("topMispronouncedWords", TopMispronouncedWords);
            writer.WriteCollectionOfPrimitiveValues<string>("topNonInclusiveWordsAndPhrases", TopNonInclusiveWordsAndPhrases);
            writer.WriteCollectionOfPrimitiveValues<string>("topRepetitiveWordsAndPhrases", TopRepetitiveWordsAndPhrases);
            writer.WriteLongValue("wordsSpokenCount", WordsSpokenCount);
        }
    }
}
#pragma warning restore CS0618
