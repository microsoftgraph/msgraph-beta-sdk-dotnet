// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ReflectCheckInResponse : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Identifier for the Reflect check-in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CheckInId
        {
            get { return BackingStore?.Get<string?>("checkInId"); }
            set { BackingStore?.Set("checkInId", value); }
        }
#nullable restore
#else
        public string CheckInId
        {
            get { return BackingStore?.Get<string>("checkInId"); }
            set { BackingStore?.Set("checkInId", value); }
        }
#endif
        /// <summary>The question or prompt of the Reflect check-in that this response addresses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CheckInTitle
        {
            get { return BackingStore?.Get<string?>("checkInTitle"); }
            set { BackingStore?.Set("checkInTitle", value); }
        }
#nullable restore
#else
        public string CheckInTitle
        {
            get { return BackingStore?.Get<string>("checkInTitle"); }
            set { BackingStore?.Set("checkInTitle", value); }
        }
#endif
        /// <summary>ID of the class associated with the Reflect check-in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClassId
        {
            get { return BackingStore?.Get<string?>("classId"); }
            set { BackingStore?.Set("classId", value); }
        }
#nullable restore
#else
        public string ClassId
        {
            get { return BackingStore?.Get<string>("classId"); }
            set { BackingStore?.Set("classId", value); }
        }
#endif
        /// <summary>Date and time when the Reflect check-in was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>ID of the user who created the Reflect check-in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatorId
        {
            get { return BackingStore?.Get<string?>("creatorId"); }
            set { BackingStore?.Set("creatorId", value); }
        }
#nullable restore
#else
        public string CreatorId
        {
            get { return BackingStore?.Get<string>("creatorId"); }
            set { BackingStore?.Set("creatorId", value); }
        }
#endif
        /// <summary>Indicates whether the Reflect check-in is closed (true) or open (false).</summary>
        public bool? IsClosed
        {
            get { return BackingStore?.Get<bool?>("isClosed"); }
            set { BackingStore?.Set("isClosed", value); }
        }
        /// <summary>ID of the user who responded to the Reflect check-in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResponderId
        {
            get { return BackingStore?.Get<string?>("responderId"); }
            set { BackingStore?.Set("responderId", value); }
        }
#nullable restore
#else
        public string ResponderId
        {
            get { return BackingStore?.Get<string>("responderId"); }
            set { BackingStore?.Set("responderId", value); }
        }
#endif
        /// <summary>The responseEmotion property</summary>
        public global::Microsoft.Graph.Beta.Models.ResponseEmotionType? ResponseEmotion
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ResponseEmotionType?>("responseEmotion"); }
            set { BackingStore?.Set("responseEmotion", value); }
        }
        /// <summary>The responseFeedback property</summary>
        public global::Microsoft.Graph.Beta.Models.ResponseFeedbackType? ResponseFeedback
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ResponseFeedbackType?>("responseFeedback"); }
            set { BackingStore?.Set("responseFeedback", value); }
        }
        /// <summary>Date and time when the response to the Reflect check-in was submitted. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? SubmitDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("submitDateTime"); }
            set { BackingStore?.Set("submitDateTime", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.ReflectCheckInResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.ReflectCheckInResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.ReflectCheckInResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "checkInId", n => { CheckInId = n.GetStringValue(); } },
                { "checkInTitle", n => { CheckInTitle = n.GetStringValue(); } },
                { "classId", n => { ClassId = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "creatorId", n => { CreatorId = n.GetStringValue(); } },
                { "isClosed", n => { IsClosed = n.GetBoolValue(); } },
                { "responderId", n => { ResponderId = n.GetStringValue(); } },
                { "responseEmotion", n => { ResponseEmotion = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ResponseEmotionType>(); } },
                { "responseFeedback", n => { ResponseFeedback = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ResponseFeedbackType>(); } },
                { "submitDateTime", n => { SubmitDateTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("checkInId", CheckInId);
            writer.WriteStringValue("checkInTitle", CheckInTitle);
            writer.WriteStringValue("classId", ClassId);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("creatorId", CreatorId);
            writer.WriteBoolValue("isClosed", IsClosed);
            writer.WriteStringValue("responderId", ResponderId);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ResponseEmotionType>("responseEmotion", ResponseEmotion);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ResponseFeedbackType>("responseFeedback", ResponseFeedback);
            writer.WriteDateTimeOffsetValue("submitDateTime", SubmitDateTime);
        }
    }
}
#pragma warning restore CS0618
