// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class ChannelSharingUpdatedEventMessageDetail : EventMessageDetail, IParsable 
    {
        /// <summary>Initiator of the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IdentitySet? Initiator {
            get { return BackingStore?.Get<IdentitySet?>("initiator"); }
            set { BackingStore?.Set("initiator", value); }
        }
#nullable restore
#else
        public IdentitySet Initiator {
            get { return BackingStore?.Get<IdentitySet>("initiator"); }
            set { BackingStore?.Set("initiator", value); }
        }
#endif
        /// <summary>The ID of the team to which the shared channel belongs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerTeamId {
            get { return BackingStore?.Get<string?>("ownerTeamId"); }
            set { BackingStore?.Set("ownerTeamId", value); }
        }
#nullable restore
#else
        public string OwnerTeamId {
            get { return BackingStore?.Get<string>("ownerTeamId"); }
            set { BackingStore?.Set("ownerTeamId", value); }
        }
#endif
        /// <summary>The ID of the tenant to which the shared channel belongs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerTenantId {
            get { return BackingStore?.Get<string?>("ownerTenantId"); }
            set { BackingStore?.Set("ownerTenantId", value); }
        }
#nullable restore
#else
        public string OwnerTenantId {
            get { return BackingStore?.Get<string>("ownerTenantId"); }
            set { BackingStore?.Set("ownerTenantId", value); }
        }
#endif
        /// <summary>The ID of the shared channel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SharedChannelId {
            get { return BackingStore?.Get<string?>("sharedChannelId"); }
            set { BackingStore?.Set("sharedChannelId", value); }
        }
#nullable restore
#else
        public string SharedChannelId {
            get { return BackingStore?.Get<string>("sharedChannelId"); }
            set { BackingStore?.Set("sharedChannelId", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="ChannelSharingUpdatedEventMessageDetail"/> and sets the default values.
        /// </summary>
        public ChannelSharingUpdatedEventMessageDetail() : base()
        {
            OdataType = "#microsoft.graph.channelSharingUpdatedEventMessageDetail";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ChannelSharingUpdatedEventMessageDetail"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new ChannelSharingUpdatedEventMessageDetail CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ChannelSharingUpdatedEventMessageDetail();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"initiator", n => { Initiator = n.GetObjectValue<IdentitySet>(IdentitySet.CreateFromDiscriminatorValue); } },
                {"ownerTeamId", n => { OwnerTeamId = n.GetStringValue(); } },
                {"ownerTenantId", n => { OwnerTenantId = n.GetStringValue(); } },
                {"sharedChannelId", n => { SharedChannelId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<IdentitySet>("initiator", Initiator);
            writer.WriteStringValue("ownerTeamId", OwnerTeamId);
            writer.WriteStringValue("ownerTenantId", OwnerTenantId);
            writer.WriteStringValue("sharedChannelId", SharedChannelId);
        }
    }
}
