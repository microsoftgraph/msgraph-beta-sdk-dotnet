// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AssignmentReviewSettings : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The default decision to apply if the request isn&apos;t reviewed within the period specified in durationInDays. The possible values are: acceptAccessRecommendation, keepAccess, removeAccess, and unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.AccessReviewTimeoutBehavior? AccessReviewTimeoutBehavior
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AccessReviewTimeoutBehavior?>("accessReviewTimeoutBehavior"); }
            set { BackingStore?.Set("accessReviewTimeoutBehavior", value); }
        }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The number of days within which reviewers should provide input.</summary>
        public int? DurationInDays
        {
            get { return BackingStore?.Get<int?>("durationInDays"); }
            set { BackingStore?.Set("durationInDays", value); }
        }
        /// <summary>Specifies whether to display recommendations to the reviewer. The default value is true</summary>
        public bool? IsAccessRecommendationEnabled
        {
            get { return BackingStore?.Get<bool?>("isAccessRecommendationEnabled"); }
            set { BackingStore?.Set("isAccessRecommendationEnabled", value); }
        }
        /// <summary>Specifies whether the reviewer must provide justification for the approval. The default value is true.</summary>
        public bool? IsApprovalJustificationRequired
        {
            get { return BackingStore?.Get<bool?>("isApprovalJustificationRequired"); }
            set { BackingStore?.Set("isApprovalJustificationRequired", value); }
        }
        /// <summary>If true, access reviews are required for assignments from this policy.</summary>
        public bool? IsEnabled
        {
            get { return BackingStore?.Get<bool?>("isEnabled"); }
            set { BackingStore?.Set("isEnabled", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The interval for recurrence, such as monthly or quarterly.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecurrenceType
        {
            get { return BackingStore?.Get<string?>("recurrenceType"); }
            set { BackingStore?.Set("recurrenceType", value); }
        }
#nullable restore
#else
        public string RecurrenceType
        {
            get { return BackingStore?.Get<string>("recurrenceType"); }
            set { BackingStore?.Set("recurrenceType", value); }
        }
#endif
        /// <summary>If the reviewerType is Reviewers, this collection specifies the users who will be reviewers, either by ID or as members of a group, using a collection of singleUser and groupMembers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.UserSet>? Reviewers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.UserSet>?>("reviewers"); }
            set { BackingStore?.Set("reviewers", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.UserSet> Reviewers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.UserSet>>("reviewers"); }
            set { BackingStore?.Set("reviewers", value); }
        }
#endif
        /// <summary>Who should be asked to do the review, either Self, Reviewers or Manager.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReviewerType
        {
            get { return BackingStore?.Get<string?>("reviewerType"); }
            set { BackingStore?.Set("reviewerType", value); }
        }
#nullable restore
#else
        public string ReviewerType
        {
            get { return BackingStore?.Get<string>("reviewerType"); }
            set { BackingStore?.Set("reviewerType", value); }
        }
#endif
        /// <summary>When the first review should start.</summary>
        public DateTimeOffset? StartDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("startDateTime"); }
            set { BackingStore?.Set("startDateTime", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.AssignmentReviewSettings"/> and sets the default values.
        /// </summary>
        public AssignmentReviewSettings()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.AssignmentReviewSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.AssignmentReviewSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.AssignmentReviewSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accessReviewTimeoutBehavior", n => { AccessReviewTimeoutBehavior = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.AccessReviewTimeoutBehavior>(); } },
                { "durationInDays", n => { DurationInDays = n.GetIntValue(); } },
                { "isAccessRecommendationEnabled", n => { IsAccessRecommendationEnabled = n.GetBoolValue(); } },
                { "isApprovalJustificationRequired", n => { IsApprovalJustificationRequired = n.GetBoolValue(); } },
                { "isEnabled", n => { IsEnabled = n.GetBoolValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "recurrenceType", n => { RecurrenceType = n.GetStringValue(); } },
                { "reviewerType", n => { ReviewerType = n.GetStringValue(); } },
                { "reviewers", n => { Reviewers = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.UserSet>(global::Microsoft.Graph.Beta.Models.UserSet.CreateFromDiscriminatorValue)?.AsList(); } },
                { "startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.AccessReviewTimeoutBehavior>("accessReviewTimeoutBehavior", AccessReviewTimeoutBehavior);
            writer.WriteIntValue("durationInDays", DurationInDays);
            writer.WriteBoolValue("isAccessRecommendationEnabled", IsAccessRecommendationEnabled);
            writer.WriteBoolValue("isApprovalJustificationRequired", IsApprovalJustificationRequired);
            writer.WriteBoolValue("isEnabled", IsEnabled);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteStringValue("recurrenceType", RecurrenceType);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.UserSet>("reviewers", Reviewers);
            writer.WriteStringValue("reviewerType", ReviewerType);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
