// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class Application : Microsoft.Graph.Beta.Models.DirectoryObject, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Specifies settings for an application that implements a web API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ApiApplication? Api
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ApiApplication?>("api"); }
            set { BackingStore?.Set("api", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ApiApplication Api
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ApiApplication>("api"); }
            set { BackingStore?.Set("api", value); }
        }
#endif
        /// <summary>The unique identifier for the application that is assigned by Microsoft Entra ID. Not nullable. Read-only. Alternate key. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId
        {
            get { return BackingStore?.Get<string?>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#nullable restore
#else
        public string AppId
        {
            get { return BackingStore?.Get<string>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#endif
        /// <summary>The appManagementPolicy applied to this application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.AppManagementPolicy>? AppManagementPolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.AppManagementPolicy>?>("appManagementPolicies"); }
            set { BackingStore?.Set("appManagementPolicies", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.AppManagementPolicy> AppManagementPolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.AppManagementPolicy>>("appManagementPolicies"); }
            set { BackingStore?.Set("appManagementPolicies", value); }
        }
#endif
        /// <summary>The collection of roles defined for the application. With app role assignments, these roles can be assigned to users, groups, or service principals associated with other applications. Not nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.AppRole>? AppRoles
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.AppRole>?>("appRoles"); }
            set { BackingStore?.Set("appRoles", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.AppRole> AppRoles
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.AppRole>>("appRoles"); }
            set { BackingStore?.Set("appRoles", value); }
        }
#endif
        /// <summary>The collection of authentication behaviors set for the application. Authentication behaviors are unset by default and must be explicitly enabled (or disabled). Returned only on $select.  For more information about authentication behaviors, see Manage application authenticationBehaviors to avoid unverified use of email claims for user identification or authorization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AuthenticationBehaviors? AuthenticationBehaviors
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AuthenticationBehaviors?>("authenticationBehaviors"); }
            set { BackingStore?.Set("authenticationBehaviors", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AuthenticationBehaviors AuthenticationBehaviors
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AuthenticationBehaviors>("authenticationBehaviors"); }
            set { BackingStore?.Set("authenticationBehaviors", value); }
        }
#endif
        /// <summary>Specifies the certification status of the application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Certification? Certification
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Certification?>("certification"); }
            set { BackingStore?.Set("certification", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Certification Certification
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Certification>("certification"); }
            set { BackingStore?.Set("certification", value); }
        }
#endif
        /// <summary>The connectorGroup the application is using with Microsoft Entra application proxy. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ConnectorGroup? ConnectorGroup
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ConnectorGroup?>("connectorGroup"); }
            set { BackingStore?.Set("connectorGroup", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ConnectorGroup ConnectorGroup
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ConnectorGroup>("connectorGroup"); }
            set { BackingStore?.Set("connectorGroup", value); }
        }
#endif
        /// <summary>The date and time the application was registered. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.  Supports $filter (eq, ne, not, ge, le, in, and eq on null values) and $orderby.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Supports $filter (/$count eq 0, /$count ne 0). Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.DirectoryObject? CreatedOnBehalfOf
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.DirectoryObject?>("createdOnBehalfOf"); }
            set { BackingStore?.Set("createdOnBehalfOf", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.DirectoryObject CreatedOnBehalfOf
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.DirectoryObject>("createdOnBehalfOf"); }
            set { BackingStore?.Set("createdOnBehalfOf", value); }
        }
#endif
        /// <summary>The default redirect URI. If specified and there&apos;s no explicit redirect URI in the sign-in request for SAML and OIDC flows, Microsoft Entra ID sends the token to this redirect URI. Microsoft Entra ID also sends the token to this default URI in SAML IdP-initiated single sign-on. The value must match one of the configured redirect URIs for the application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultRedirectUri
        {
            get { return BackingStore?.Get<string?>("defaultRedirectUri"); }
            set { BackingStore?.Set("defaultRedirectUri", value); }
        }
#nullable restore
#else
        public string DefaultRedirectUri
        {
            get { return BackingStore?.Get<string>("defaultRedirectUri"); }
            set { BackingStore?.Set("defaultRedirectUri", value); }
        }
#endif
        /// <summary>Free text field to provide a description of the application object to end users. The maximum allowed size is 1,024 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>Specifies whether Microsoft has disabled the registered application. Possible values are: null (default value), NotDisabled, and DisabledDueToViolationOfServicesAgreement (reasons may include suspicious, abusive, or malicious activity, or a violation of the Microsoft Services Agreement).  Supports $filter (eq, ne, not).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisabledByMicrosoftStatus
        {
            get { return BackingStore?.Get<string?>("disabledByMicrosoftStatus"); }
            set { BackingStore?.Set("disabledByMicrosoftStatus", value); }
        }
#nullable restore
#else
        public string DisabledByMicrosoftStatus
        {
            get { return BackingStore?.Get<string>("disabledByMicrosoftStatus"); }
            set { BackingStore?.Set("disabledByMicrosoftStatus", value); }
        }
#endif
        /// <summary>The display name for the application. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Read-only. Nullable. Supports $expand and $filter (/$count eq 0, /$count ne 0).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.ExtensionProperty>? ExtensionProperties
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.ExtensionProperty>?>("extensionProperties"); }
            set { BackingStore?.Set("extensionProperties", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.ExtensionProperty> ExtensionProperties
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.ExtensionProperty>>("extensionProperties"); }
            set { BackingStore?.Set("extensionProperties", value); }
        }
#endif
        /// <summary>Federated identities for applications. Supports $expand and $filter (startsWith, /$count eq 0, /$count ne 0).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.FederatedIdentityCredential>? FederatedIdentityCredentials
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.FederatedIdentityCredential>?>("federatedIdentityCredentials"); }
            set { BackingStore?.Set("federatedIdentityCredentials", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.FederatedIdentityCredential> FederatedIdentityCredentials
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.FederatedIdentityCredential>>("federatedIdentityCredentials"); }
            set { BackingStore?.Set("federatedIdentityCredentials", value); }
        }
#endif
        /// <summary>Configures the groups claim issued in a user or OAuth 2.0 access token that the application expects. To set this attribute, use one of the following string values: None, SecurityGroup (for security groups and Microsoft Entra roles), All (this gets all security groups, distribution groups, and Microsoft Entra directory roles that the signed-in user is a member of).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupMembershipClaims
        {
            get { return BackingStore?.Get<string?>("groupMembershipClaims"); }
            set { BackingStore?.Set("groupMembershipClaims", value); }
        }
#nullable restore
#else
        public string GroupMembershipClaims
        {
            get { return BackingStore?.Get<string>("groupMembershipClaims"); }
            set { BackingStore?.Set("groupMembershipClaims", value); }
        }
#endif
        /// <summary>The homeRealmDiscoveryPolicies property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.HomeRealmDiscoveryPolicy>? HomeRealmDiscoveryPolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.HomeRealmDiscoveryPolicy>?>("homeRealmDiscoveryPolicies"); }
            set { BackingStore?.Set("homeRealmDiscoveryPolicies", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.HomeRealmDiscoveryPolicy> HomeRealmDiscoveryPolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.HomeRealmDiscoveryPolicy>>("homeRealmDiscoveryPolicies"); }
            set { BackingStore?.Set("homeRealmDiscoveryPolicies", value); }
        }
#endif
        /// <summary>Also known as App ID URI, this value is set when an application is used as a resource app. The identifierUris acts as the prefix for the scopes you reference in your API&apos;s code, and it must be globally unique. You can use the default value provided, which is in the form api://&lt;appId&gt;, or specify a more readable URI like https://contoso.com/api. For more information on valid identifierUris patterns and best practices, see Microsoft Entra application registration security best practices. Not nullable. Supports $filter (eq, ne, ge, le, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? IdentifierUris
        {
            get { return BackingStore?.Get<List<string>?>("identifierUris"); }
            set { BackingStore?.Set("identifierUris", value); }
        }
#nullable restore
#else
        public List<string> IdentifierUris
        {
            get { return BackingStore?.Get<List<string>>("identifierUris"); }
            set { BackingStore?.Set("identifierUris", value); }
        }
#endif
        /// <summary>Basic profile information of the application, such as it&apos;s marketing, support, terms of service, and privacy statement URLs. The terms of service and privacy statement are surfaced to users through the user consent experience. For more information, see How to: Add Terms of service and privacy statement for registered Microsoft Entra apps. Supports $filter (eq, ne, not, ge, le, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.InformationalUrl? Info
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.InformationalUrl?>("info"); }
            set { BackingStore?.Set("info", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.InformationalUrl Info
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.InformationalUrl>("info"); }
            set { BackingStore?.Set("info", value); }
        }
#endif
        /// <summary>Specifies whether this application supports device authentication without a user. The default is false.</summary>
        public bool? IsDeviceOnlyAuthSupported
        {
            get { return BackingStore?.Get<bool?>("isDeviceOnlyAuthSupported"); }
            set { BackingStore?.Set("isDeviceOnlyAuthSupported", value); }
        }
        /// <summary>Specifies the fallback application type as public client, such as an installed application running on a mobile device. The default value is false, which means the fallback application type is confidential client such as a web app. There are certain scenarios where Microsoft Entra ID can&apos;t determine the client application type. For example, the ROPC flow where the application is configured without specifying a redirect URI. In those cases Microsoft Entra ID interprets the application type based on the value of this property.</summary>
        public bool? IsFallbackPublicClient
        {
            get { return BackingStore?.Get<bool?>("isFallbackPublicClient"); }
            set { BackingStore?.Set("isFallbackPublicClient", value); }
        }
        /// <summary>The collection of key credentials associated with the application. Not nullable. Supports $filter (eq, not, ge, le).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.KeyCredential>? KeyCredentials
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.KeyCredential>?>("keyCredentials"); }
            set { BackingStore?.Set("keyCredentials", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.KeyCredential> KeyCredentials
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.KeyCredential>>("keyCredentials"); }
            set { BackingStore?.Set("keyCredentials", value); }
        }
#endif
        /// <summary>The main logo for the application. Not nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? Logo
        {
            get { return BackingStore?.Get<byte[]?>("logo"); }
            set { BackingStore?.Set("logo", value); }
        }
#nullable restore
#else
        public byte[] Logo
        {
            get { return BackingStore?.Get<byte[]>("logo"); }
            set { BackingStore?.Set("logo", value); }
        }
#endif
        /// <summary>Notes relevant for the management of the application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes
        {
            get { return BackingStore?.Get<string?>("notes"); }
            set { BackingStore?.Set("notes", value); }
        }
#nullable restore
#else
        public string Notes
        {
            get { return BackingStore?.Get<string>("notes"); }
            set { BackingStore?.Set("notes", value); }
        }
#endif
        /// <summary>Represents the set of properties required for configuring Application Proxy for this application. Configuring these properties allows you to publish your on-premises application for secure remote access.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.OnPremisesPublishing? OnPremisesPublishing
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.OnPremisesPublishing?>("onPremisesPublishing"); }
            set { BackingStore?.Set("onPremisesPublishing", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.OnPremisesPublishing OnPremisesPublishing
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.OnPremisesPublishing>("onPremisesPublishing"); }
            set { BackingStore?.Set("onPremisesPublishing", value); }
        }
#endif
        /// <summary>Application developers can configure optional claims in their Microsoft Entra applications to specify the claims that are sent to their application by the Microsoft security token service. For more information, see How to: Provide optional claims to your app.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.OptionalClaims? OptionalClaims
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.OptionalClaims?>("optionalClaims"); }
            set { BackingStore?.Set("optionalClaims", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.OptionalClaims OptionalClaims
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.OptionalClaims>("optionalClaims"); }
            set { BackingStore?.Set("optionalClaims", value); }
        }
#endif
        /// <summary>Directory objects that are owners of the application. Read-only. Nullable. Supports $expand, $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1), and $select nested in $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.DirectoryObject>? Owners
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DirectoryObject>?>("owners"); }
            set { BackingStore?.Set("owners", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.DirectoryObject> Owners
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DirectoryObject>>("owners"); }
            set { BackingStore?.Set("owners", value); }
        }
#endif
        /// <summary>Specifies parental control settings for an application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ParentalControlSettings? ParentalControlSettings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ParentalControlSettings?>("parentalControlSettings"); }
            set { BackingStore?.Set("parentalControlSettings", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ParentalControlSettings ParentalControlSettings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ParentalControlSettings>("parentalControlSettings"); }
            set { BackingStore?.Set("parentalControlSettings", value); }
        }
#endif
        /// <summary>The collection of password credentials associated with the application. Not nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.PasswordCredential>? PasswordCredentials
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.PasswordCredential>?>("passwordCredentials"); }
            set { BackingStore?.Set("passwordCredentials", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.PasswordCredential> PasswordCredentials
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.PasswordCredential>>("passwordCredentials"); }
            set { BackingStore?.Set("passwordCredentials", value); }
        }
#endif
        /// <summary>Specifies settings for installed clients such as desktop or mobile devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PublicClientApplication? PublicClient
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PublicClientApplication?>("publicClient"); }
            set { BackingStore?.Set("publicClient", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PublicClientApplication PublicClient
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PublicClientApplication>("publicClient"); }
            set { BackingStore?.Set("publicClient", value); }
        }
#endif
        /// <summary>The verified publisher domain for the application. Read-only. Supports $filter (eq, ne, ge, le, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublisherDomain
        {
            get { return BackingStore?.Get<string?>("publisherDomain"); }
            set { BackingStore?.Set("publisherDomain", value); }
        }
#nullable restore
#else
        public string PublisherDomain
        {
            get { return BackingStore?.Get<string>("publisherDomain"); }
            set { BackingStore?.Set("publisherDomain", value); }
        }
#endif
        /// <summary>Specifies whether this application requires Microsoft Entra ID to verify the signed authentication requests.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.RequestSignatureVerification? RequestSignatureVerification
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RequestSignatureVerification?>("requestSignatureVerification"); }
            set { BackingStore?.Set("requestSignatureVerification", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.RequestSignatureVerification RequestSignatureVerification
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RequestSignatureVerification>("requestSignatureVerification"); }
            set { BackingStore?.Set("requestSignatureVerification", value); }
        }
#endif
        /// <summary>Specifies the resources that the application needs to access. This property also specifies the set of delegated permissions and application roles that it needs for each of those resources. This configuration of access to the required resources drives the consent experience. No more than 50 resource services (APIs) can be configured. Beginning mid-October 2021, the total number of required permissions must not exceed 400. For more information, see Limits on requested permissions per app. Not nullable. Supports $filter (eq, not, ge, le).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.RequiredResourceAccess>? RequiredResourceAccess
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.RequiredResourceAccess>?>("requiredResourceAccess"); }
            set { BackingStore?.Set("requiredResourceAccess", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.RequiredResourceAccess> RequiredResourceAccess
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.RequiredResourceAccess>>("requiredResourceAccess"); }
            set { BackingStore?.Set("requiredResourceAccess", value); }
        }
#endif
        /// <summary>The URL where the service exposes SAML metadata for federation. This property is valid only for single-tenant applications. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SamlMetadataUrl
        {
            get { return BackingStore?.Get<string?>("samlMetadataUrl"); }
            set { BackingStore?.Set("samlMetadataUrl", value); }
        }
#nullable restore
#else
        public string SamlMetadataUrl
        {
            get { return BackingStore?.Get<string>("samlMetadataUrl"); }
            set { BackingStore?.Set("samlMetadataUrl", value); }
        }
#endif
        /// <summary>References application or service contact information from a Service or Asset Management database. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServiceManagementReference
        {
            get { return BackingStore?.Get<string?>("serviceManagementReference"); }
            set { BackingStore?.Set("serviceManagementReference", value); }
        }
#nullable restore
#else
        public string ServiceManagementReference
        {
            get { return BackingStore?.Get<string>("serviceManagementReference"); }
            set { BackingStore?.Set("serviceManagementReference", value); }
        }
#endif
        /// <summary>Specifies whether sensitive properties of a multitenant application should be locked for editing after the application is provisioned in a tenant. Nullable. null by default.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ServicePrincipalLockConfiguration? ServicePrincipalLockConfiguration
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ServicePrincipalLockConfiguration?>("servicePrincipalLockConfiguration"); }
            set { BackingStore?.Set("servicePrincipalLockConfiguration", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ServicePrincipalLockConfiguration ServicePrincipalLockConfiguration
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ServicePrincipalLockConfiguration>("servicePrincipalLockConfiguration"); }
            set { BackingStore?.Set("servicePrincipalLockConfiguration", value); }
        }
#endif
        /// <summary>Specifies the Microsoft accounts that are supported for the current application. The possible values are: AzureADMyOrg (default), AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, and PersonalMicrosoftAccount. See more in the table. The value of this object also limits the number of permissions an app can request. For more information, see Limits on requested permissions per app. The value for this property has implications on other app object properties. As a result, if you change this property, you may need to change other properties first. For more information, see Validation differences for signInAudience.Supports $filter (eq, ne, not).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SignInAudience
        {
            get { return BackingStore?.Get<string?>("signInAudience"); }
            set { BackingStore?.Set("signInAudience", value); }
        }
#nullable restore
#else
        public string SignInAudience
        {
            get { return BackingStore?.Get<string>("signInAudience"); }
            set { BackingStore?.Set("signInAudience", value); }
        }
#endif
        /// <summary>Specifies settings for a single-page application, including sign out URLs and redirect URIs for authorization codes and access tokens.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.SpaApplication? Spa
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.SpaApplication?>("spa"); }
            set { BackingStore?.Set("spa", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.SpaApplication Spa
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.SpaApplication>("spa"); }
            set { BackingStore?.Set("spa", value); }
        }
#endif
        /// <summary>Represents the capability for Microsoft Entra identity synchronization through the Microsoft Graph API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Synchronization? Synchronization
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Synchronization?>("synchronization"); }
            set { BackingStore?.Set("synchronization", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Synchronization Synchronization
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Synchronization>("synchronization"); }
            set { BackingStore?.Set("synchronization", value); }
        }
#endif
        /// <summary>Custom strings that can be used to categorize and identify the application. Not nullable. Strings added here also appear in the tags property of any associated service principals.Supports $filter (eq, not, ge, le, startsWith) and $search.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags
        {
            get { return BackingStore?.Get<List<string>?>("tags"); }
            set { BackingStore?.Set("tags", value); }
        }
#nullable restore
#else
        public List<string> Tags
        {
            get { return BackingStore?.Get<List<string>>("tags"); }
            set { BackingStore?.Set("tags", value); }
        }
#endif
        /// <summary>Specifies the keyId of a public key from the keyCredentials collection. When configured, Microsoft Entra ID encrypts all the tokens it emits by using the key this property points to. The application code that receives the encrypted token must use the matching private key to decrypt the token before it can be used for the signed-in user.</summary>
        public Guid? TokenEncryptionKeyId
        {
            get { return BackingStore?.Get<Guid?>("tokenEncryptionKeyId"); }
            set { BackingStore?.Set("tokenEncryptionKeyId", value); }
        }
        /// <summary>The tokenIssuancePolicies property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.TokenIssuancePolicy>? TokenIssuancePolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.TokenIssuancePolicy>?>("tokenIssuancePolicies"); }
            set { BackingStore?.Set("tokenIssuancePolicies", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.TokenIssuancePolicy> TokenIssuancePolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.TokenIssuancePolicy>>("tokenIssuancePolicies"); }
            set { BackingStore?.Set("tokenIssuancePolicies", value); }
        }
#endif
        /// <summary>The tokenLifetimePolicies assigned to this application. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.TokenLifetimePolicy>? TokenLifetimePolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.TokenLifetimePolicy>?>("tokenLifetimePolicies"); }
            set { BackingStore?.Set("tokenLifetimePolicies", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.TokenLifetimePolicy> TokenLifetimePolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.TokenLifetimePolicy>>("tokenLifetimePolicies"); }
            set { BackingStore?.Set("tokenLifetimePolicies", value); }
        }
#endif
        /// <summary>The unique identifier that can be assigned to an application and used as an alternate key. Immutable. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueName
        {
            get { return BackingStore?.Get<string?>("uniqueName"); }
            set { BackingStore?.Set("uniqueName", value); }
        }
#nullable restore
#else
        public string UniqueName
        {
            get { return BackingStore?.Get<string>("uniqueName"); }
            set { BackingStore?.Set("uniqueName", value); }
        }
#endif
        /// <summary>Specifies the verified publisher of the application. For more information about how publisher verification helps support application security, trustworthiness, and compliance, see Publisher verification.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.VerifiedPublisher? VerifiedPublisher
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.VerifiedPublisher?>("verifiedPublisher"); }
            set { BackingStore?.Set("verifiedPublisher", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.VerifiedPublisher VerifiedPublisher
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.VerifiedPublisher>("verifiedPublisher"); }
            set { BackingStore?.Set("verifiedPublisher", value); }
        }
#endif
        /// <summary>Specifies settings for a web application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.WebApplication? Web
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.WebApplication?>("web"); }
            set { BackingStore?.Set("web", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.WebApplication Web
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.WebApplication>("web"); }
            set { BackingStore?.Set("web", value); }
        }
#endif
        /// <summary>Specifies settings for apps running Microsoft Windows and published in the Microsoft Store or Xbox games store.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.WindowsApplication? Windows
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.WindowsApplication?>("windows"); }
            set { BackingStore?.Set("windows", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.WindowsApplication Windows
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.WindowsApplication>("windows"); }
            set { BackingStore?.Set("windows", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.Application"/> and sets the default values.
        /// </summary>
        public Application() : base()
        {
            OdataType = "#microsoft.graph.application";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.Application"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.Application CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.Application();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "api", n => { Api = n.GetObjectValue<Microsoft.Graph.Beta.Models.ApiApplication>(Microsoft.Graph.Beta.Models.ApiApplication.CreateFromDiscriminatorValue); } },
                { "appId", n => { AppId = n.GetStringValue(); } },
                { "appManagementPolicies", n => { AppManagementPolicies = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.AppManagementPolicy>(Microsoft.Graph.Beta.Models.AppManagementPolicy.CreateFromDiscriminatorValue)?.ToList(); } },
                { "appRoles", n => { AppRoles = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.AppRole>(Microsoft.Graph.Beta.Models.AppRole.CreateFromDiscriminatorValue)?.ToList(); } },
                { "authenticationBehaviors", n => { AuthenticationBehaviors = n.GetObjectValue<Microsoft.Graph.Beta.Models.AuthenticationBehaviors>(Microsoft.Graph.Beta.Models.AuthenticationBehaviors.CreateFromDiscriminatorValue); } },
                { "certification", n => { Certification = n.GetObjectValue<Microsoft.Graph.Beta.Models.Certification>(Microsoft.Graph.Beta.Models.Certification.CreateFromDiscriminatorValue); } },
                { "connectorGroup", n => { ConnectorGroup = n.GetObjectValue<Microsoft.Graph.Beta.Models.ConnectorGroup>(Microsoft.Graph.Beta.Models.ConnectorGroup.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "createdOnBehalfOf", n => { CreatedOnBehalfOf = n.GetObjectValue<Microsoft.Graph.Beta.Models.DirectoryObject>(Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue); } },
                { "defaultRedirectUri", n => { DefaultRedirectUri = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "disabledByMicrosoftStatus", n => { DisabledByMicrosoftStatus = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "extensionProperties", n => { ExtensionProperties = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.ExtensionProperty>(Microsoft.Graph.Beta.Models.ExtensionProperty.CreateFromDiscriminatorValue)?.ToList(); } },
                { "federatedIdentityCredentials", n => { FederatedIdentityCredentials = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.FederatedIdentityCredential>(Microsoft.Graph.Beta.Models.FederatedIdentityCredential.CreateFromDiscriminatorValue)?.ToList(); } },
                { "groupMembershipClaims", n => { GroupMembershipClaims = n.GetStringValue(); } },
                { "homeRealmDiscoveryPolicies", n => { HomeRealmDiscoveryPolicies = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.HomeRealmDiscoveryPolicy>(Microsoft.Graph.Beta.Models.HomeRealmDiscoveryPolicy.CreateFromDiscriminatorValue)?.ToList(); } },
                { "identifierUris", n => { IdentifierUris = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "info", n => { Info = n.GetObjectValue<Microsoft.Graph.Beta.Models.InformationalUrl>(Microsoft.Graph.Beta.Models.InformationalUrl.CreateFromDiscriminatorValue); } },
                { "isDeviceOnlyAuthSupported", n => { IsDeviceOnlyAuthSupported = n.GetBoolValue(); } },
                { "isFallbackPublicClient", n => { IsFallbackPublicClient = n.GetBoolValue(); } },
                { "keyCredentials", n => { KeyCredentials = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.KeyCredential>(Microsoft.Graph.Beta.Models.KeyCredential.CreateFromDiscriminatorValue)?.ToList(); } },
                { "logo", n => { Logo = n.GetByteArrayValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "onPremisesPublishing", n => { OnPremisesPublishing = n.GetObjectValue<Microsoft.Graph.Beta.Models.OnPremisesPublishing>(Microsoft.Graph.Beta.Models.OnPremisesPublishing.CreateFromDiscriminatorValue); } },
                { "optionalClaims", n => { OptionalClaims = n.GetObjectValue<Microsoft.Graph.Beta.Models.OptionalClaims>(Microsoft.Graph.Beta.Models.OptionalClaims.CreateFromDiscriminatorValue); } },
                { "owners", n => { Owners = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DirectoryObject>(Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.ToList(); } },
                { "parentalControlSettings", n => { ParentalControlSettings = n.GetObjectValue<Microsoft.Graph.Beta.Models.ParentalControlSettings>(Microsoft.Graph.Beta.Models.ParentalControlSettings.CreateFromDiscriminatorValue); } },
                { "passwordCredentials", n => { PasswordCredentials = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.PasswordCredential>(Microsoft.Graph.Beta.Models.PasswordCredential.CreateFromDiscriminatorValue)?.ToList(); } },
                { "publicClient", n => { PublicClient = n.GetObjectValue<Microsoft.Graph.Beta.Models.PublicClientApplication>(Microsoft.Graph.Beta.Models.PublicClientApplication.CreateFromDiscriminatorValue); } },
                { "publisherDomain", n => { PublisherDomain = n.GetStringValue(); } },
                { "requestSignatureVerification", n => { RequestSignatureVerification = n.GetObjectValue<Microsoft.Graph.Beta.Models.RequestSignatureVerification>(Microsoft.Graph.Beta.Models.RequestSignatureVerification.CreateFromDiscriminatorValue); } },
                { "requiredResourceAccess", n => { RequiredResourceAccess = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.RequiredResourceAccess>(Microsoft.Graph.Beta.Models.RequiredResourceAccess.CreateFromDiscriminatorValue)?.ToList(); } },
                { "samlMetadataUrl", n => { SamlMetadataUrl = n.GetStringValue(); } },
                { "serviceManagementReference", n => { ServiceManagementReference = n.GetStringValue(); } },
                { "servicePrincipalLockConfiguration", n => { ServicePrincipalLockConfiguration = n.GetObjectValue<Microsoft.Graph.Beta.Models.ServicePrincipalLockConfiguration>(Microsoft.Graph.Beta.Models.ServicePrincipalLockConfiguration.CreateFromDiscriminatorValue); } },
                { "signInAudience", n => { SignInAudience = n.GetStringValue(); } },
                { "spa", n => { Spa = n.GetObjectValue<Microsoft.Graph.Beta.Models.SpaApplication>(Microsoft.Graph.Beta.Models.SpaApplication.CreateFromDiscriminatorValue); } },
                { "synchronization", n => { Synchronization = n.GetObjectValue<Microsoft.Graph.Beta.Models.Synchronization>(Microsoft.Graph.Beta.Models.Synchronization.CreateFromDiscriminatorValue); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "tokenEncryptionKeyId", n => { TokenEncryptionKeyId = n.GetGuidValue(); } },
                { "tokenIssuancePolicies", n => { TokenIssuancePolicies = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.TokenIssuancePolicy>(Microsoft.Graph.Beta.Models.TokenIssuancePolicy.CreateFromDiscriminatorValue)?.ToList(); } },
                { "tokenLifetimePolicies", n => { TokenLifetimePolicies = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.TokenLifetimePolicy>(Microsoft.Graph.Beta.Models.TokenLifetimePolicy.CreateFromDiscriminatorValue)?.ToList(); } },
                { "uniqueName", n => { UniqueName = n.GetStringValue(); } },
                { "verifiedPublisher", n => { VerifiedPublisher = n.GetObjectValue<Microsoft.Graph.Beta.Models.VerifiedPublisher>(Microsoft.Graph.Beta.Models.VerifiedPublisher.CreateFromDiscriminatorValue); } },
                { "web", n => { Web = n.GetObjectValue<Microsoft.Graph.Beta.Models.WebApplication>(Microsoft.Graph.Beta.Models.WebApplication.CreateFromDiscriminatorValue); } },
                { "windows", n => { Windows = n.GetObjectValue<Microsoft.Graph.Beta.Models.WindowsApplication>(Microsoft.Graph.Beta.Models.WindowsApplication.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.ApiApplication>("api", Api);
            writer.WriteStringValue("appId", AppId);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.AppManagementPolicy>("appManagementPolicies", AppManagementPolicies);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.AppRole>("appRoles", AppRoles);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AuthenticationBehaviors>("authenticationBehaviors", AuthenticationBehaviors);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Certification>("certification", Certification);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.ConnectorGroup>("connectorGroup", ConnectorGroup);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.DirectoryObject>("createdOnBehalfOf", CreatedOnBehalfOf);
            writer.WriteStringValue("defaultRedirectUri", DefaultRedirectUri);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("disabledByMicrosoftStatus", DisabledByMicrosoftStatus);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.ExtensionProperty>("extensionProperties", ExtensionProperties);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.FederatedIdentityCredential>("federatedIdentityCredentials", FederatedIdentityCredentials);
            writer.WriteStringValue("groupMembershipClaims", GroupMembershipClaims);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.HomeRealmDiscoveryPolicy>("homeRealmDiscoveryPolicies", HomeRealmDiscoveryPolicies);
            writer.WriteCollectionOfPrimitiveValues<string>("identifierUris", IdentifierUris);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.InformationalUrl>("info", Info);
            writer.WriteBoolValue("isDeviceOnlyAuthSupported", IsDeviceOnlyAuthSupported);
            writer.WriteBoolValue("isFallbackPublicClient", IsFallbackPublicClient);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.KeyCredential>("keyCredentials", KeyCredentials);
            writer.WriteByteArrayValue("logo", Logo);
            writer.WriteStringValue("notes", Notes);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.OnPremisesPublishing>("onPremisesPublishing", OnPremisesPublishing);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.OptionalClaims>("optionalClaims", OptionalClaims);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DirectoryObject>("owners", Owners);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.ParentalControlSettings>("parentalControlSettings", ParentalControlSettings);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.PasswordCredential>("passwordCredentials", PasswordCredentials);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PublicClientApplication>("publicClient", PublicClient);
            writer.WriteStringValue("publisherDomain", PublisherDomain);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.RequestSignatureVerification>("requestSignatureVerification", RequestSignatureVerification);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.RequiredResourceAccess>("requiredResourceAccess", RequiredResourceAccess);
            writer.WriteStringValue("samlMetadataUrl", SamlMetadataUrl);
            writer.WriteStringValue("serviceManagementReference", ServiceManagementReference);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.ServicePrincipalLockConfiguration>("servicePrincipalLockConfiguration", ServicePrincipalLockConfiguration);
            writer.WriteStringValue("signInAudience", SignInAudience);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.SpaApplication>("spa", Spa);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Synchronization>("synchronization", Synchronization);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteGuidValue("tokenEncryptionKeyId", TokenEncryptionKeyId);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.TokenIssuancePolicy>("tokenIssuancePolicies", TokenIssuancePolicies);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.TokenLifetimePolicy>("tokenLifetimePolicies", TokenLifetimePolicies);
            writer.WriteStringValue("uniqueName", UniqueName);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.VerifiedPublisher>("verifiedPublisher", VerifiedPublisher);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.WebApplication>("web", Web);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.WindowsApplication>("windows", Windows);
        }
    }
}
