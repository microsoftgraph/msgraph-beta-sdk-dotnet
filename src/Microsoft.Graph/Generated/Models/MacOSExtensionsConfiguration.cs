// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// MacOS extensions configuration profile.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MacOSExtensionsConfiguration : global::Microsoft.Graph.Beta.Models.DeviceConfiguration, IParsable
    {
        /// <summary>All kernel extensions validly signed by the team identifiers in this list will be allowed to load.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? KernelExtensionAllowedTeamIdentifiers
        {
            get { return BackingStore?.Get<List<string>?>("kernelExtensionAllowedTeamIdentifiers"); }
            set { BackingStore?.Set("kernelExtensionAllowedTeamIdentifiers", value); }
        }
#nullable restore
#else
        public List<string> KernelExtensionAllowedTeamIdentifiers
        {
            get { return BackingStore?.Get<List<string>>("kernelExtensionAllowedTeamIdentifiers"); }
            set { BackingStore?.Set("kernelExtensionAllowedTeamIdentifiers", value); }
        }
#endif
        /// <summary>If set to true, users can approve additional kernel extensions not explicitly allowed by configurations profiles.</summary>
        public bool? KernelExtensionOverridesAllowed
        {
            get { return BackingStore?.Get<bool?>("kernelExtensionOverridesAllowed"); }
            set { BackingStore?.Set("kernelExtensionOverridesAllowed", value); }
        }
        /// <summary>A list of kernel extensions that will be allowed to load. . This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.MacOSKernelExtension>? KernelExtensionsAllowed
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MacOSKernelExtension>?>("kernelExtensionsAllowed"); }
            set { BackingStore?.Set("kernelExtensionsAllowed", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.MacOSKernelExtension> KernelExtensionsAllowed
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MacOSKernelExtension>>("kernelExtensionsAllowed"); }
            set { BackingStore?.Set("kernelExtensionsAllowed", value); }
        }
#endif
        /// <summary>Gets or sets a list of allowed macOS system extensions. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.MacOSSystemExtension>? SystemExtensionsAllowed
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MacOSSystemExtension>?>("systemExtensionsAllowed"); }
            set { BackingStore?.Set("systemExtensionsAllowed", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.MacOSSystemExtension> SystemExtensionsAllowed
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MacOSSystemExtension>>("systemExtensionsAllowed"); }
            set { BackingStore?.Set("systemExtensionsAllowed", value); }
        }
#endif
        /// <summary>Gets or sets a list of allowed team identifiers. Any system extension signed with any of the specified team identifiers will be approved.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SystemExtensionsAllowedTeamIdentifiers
        {
            get { return BackingStore?.Get<List<string>?>("systemExtensionsAllowedTeamIdentifiers"); }
            set { BackingStore?.Set("systemExtensionsAllowedTeamIdentifiers", value); }
        }
#nullable restore
#else
        public List<string> SystemExtensionsAllowedTeamIdentifiers
        {
            get { return BackingStore?.Get<List<string>>("systemExtensionsAllowedTeamIdentifiers"); }
            set { BackingStore?.Set("systemExtensionsAllowedTeamIdentifiers", value); }
        }
#endif
        /// <summary>Gets or sets a list of allowed macOS system extension types. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.MacOSSystemExtensionTypeMapping>? SystemExtensionsAllowedTypes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MacOSSystemExtensionTypeMapping>?>("systemExtensionsAllowedTypes"); }
            set { BackingStore?.Set("systemExtensionsAllowedTypes", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.MacOSSystemExtensionTypeMapping> SystemExtensionsAllowedTypes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MacOSSystemExtensionTypeMapping>>("systemExtensionsAllowedTypes"); }
            set { BackingStore?.Set("systemExtensionsAllowedTypes", value); }
        }
#endif
        /// <summary>Gets or sets whether to allow the user to approve additional system extensions not explicitly allowed by configuration profiles.</summary>
        public bool? SystemExtensionsBlockOverride
        {
            get { return BackingStore?.Get<bool?>("systemExtensionsBlockOverride"); }
            set { BackingStore?.Set("systemExtensionsBlockOverride", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.MacOSExtensionsConfiguration"/> and sets the default values.
        /// </summary>
        public MacOSExtensionsConfiguration() : base()
        {
            OdataType = "#microsoft.graph.macOSExtensionsConfiguration";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.MacOSExtensionsConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.MacOSExtensionsConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.MacOSExtensionsConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "kernelExtensionAllowedTeamIdentifiers", n => { KernelExtensionAllowedTeamIdentifiers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "kernelExtensionOverridesAllowed", n => { KernelExtensionOverridesAllowed = n.GetBoolValue(); } },
                { "kernelExtensionsAllowed", n => { KernelExtensionsAllowed = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MacOSKernelExtension>(global::Microsoft.Graph.Beta.Models.MacOSKernelExtension.CreateFromDiscriminatorValue)?.AsList(); } },
                { "systemExtensionsAllowed", n => { SystemExtensionsAllowed = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MacOSSystemExtension>(global::Microsoft.Graph.Beta.Models.MacOSSystemExtension.CreateFromDiscriminatorValue)?.AsList(); } },
                { "systemExtensionsAllowedTeamIdentifiers", n => { SystemExtensionsAllowedTeamIdentifiers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "systemExtensionsAllowedTypes", n => { SystemExtensionsAllowedTypes = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MacOSSystemExtensionTypeMapping>(global::Microsoft.Graph.Beta.Models.MacOSSystemExtensionTypeMapping.CreateFromDiscriminatorValue)?.AsList(); } },
                { "systemExtensionsBlockOverride", n => { SystemExtensionsBlockOverride = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfPrimitiveValues<string>("kernelExtensionAllowedTeamIdentifiers", KernelExtensionAllowedTeamIdentifiers);
            writer.WriteBoolValue("kernelExtensionOverridesAllowed", KernelExtensionOverridesAllowed);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MacOSKernelExtension>("kernelExtensionsAllowed", KernelExtensionsAllowed);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MacOSSystemExtension>("systemExtensionsAllowed", SystemExtensionsAllowed);
            writer.WriteCollectionOfPrimitiveValues<string>("systemExtensionsAllowedTeamIdentifiers", SystemExtensionsAllowedTeamIdentifiers);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MacOSSystemExtensionTypeMapping>("systemExtensionsAllowedTypes", SystemExtensionsAllowedTypes);
            writer.WriteBoolValue("systemExtensionsBlockOverride", SystemExtensionsBlockOverride);
        }
    }
}
#pragma warning restore CS0618
