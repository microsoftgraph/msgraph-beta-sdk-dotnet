// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class DelegatedPermissionClassification : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The classification value. Possible values: low, medium (preview), high (preview). Doesn&apos;t support $filter.</summary>
        public global::Microsoft.Graph.Beta.Models.PermissionClassificationType? Classification
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PermissionClassificationType?>("classification"); }
            set { BackingStore?.Set("classification", value); }
        }
        /// <summary>The unique identifier (id) for the delegated permission listed in the publishedPermissionScopes collection of the servicePrincipal. Required on create. Doesn&apos;t support $filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PermissionId
        {
            get { return BackingStore?.Get<string?>("permissionId"); }
            set { BackingStore?.Set("permissionId", value); }
        }
#nullable restore
#else
        public string PermissionId
        {
            get { return BackingStore?.Get<string>("permissionId"); }
            set { BackingStore?.Set("permissionId", value); }
        }
#endif
        /// <summary>The claim value (value) for the delegated permission listed in the publishedPermissionScopes collection of the servicePrincipal. Doesn&apos;t support $filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PermissionName
        {
            get { return BackingStore?.Get<string?>("permissionName"); }
            set { BackingStore?.Set("permissionName", value); }
        }
#nullable restore
#else
        public string PermissionName
        {
            get { return BackingStore?.Get<string>("permissionName"); }
            set { BackingStore?.Set("permissionName", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.DelegatedPermissionClassification"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.DelegatedPermissionClassification CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.DelegatedPermissionClassification();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "classification", n => { Classification = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.PermissionClassificationType>(); } },
                { "permissionId", n => { PermissionId = n.GetStringValue(); } },
                { "permissionName", n => { PermissionName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.PermissionClassificationType>("classification", Classification);
            writer.WriteStringValue("permissionId", PermissionId);
            writer.WriteStringValue("permissionName", PermissionName);
        }
    }
}
#pragma warning restore CS0618
