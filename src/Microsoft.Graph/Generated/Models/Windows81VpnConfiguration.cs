// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// By providing the configurations in this profile you can instruct the Windows 8.1 (and later) devices to connect to desired VPN endpoint. By specifying the authentication method and security types expected by VPN endpoint you can make the VPN connection seamless for end user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Windows81VpnConfiguration : global::Microsoft.Graph.Beta.Models.WindowsVpnConfiguration, IParsable
    {
        /// <summary>Value indicating whether this policy only applies to Windows 8.1. This property is read-only.</summary>
        public bool? ApplyOnlyToWindows81
        {
            get { return BackingStore?.Get<bool?>("applyOnlyToWindows81"); }
            set { BackingStore?.Set("applyOnlyToWindows81", value); }
        }
        /// <summary>Windows VPN connection type.</summary>
        public global::Microsoft.Graph.Beta.Models.WindowsVpnConnectionType? ConnectionType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WindowsVpnConnectionType?>("connectionType"); }
            set { BackingStore?.Set("connectionType", value); }
        }
        /// <summary>Enable split tunneling for the VPN.</summary>
        public bool? EnableSplitTunneling
        {
            get { return BackingStore?.Get<bool?>("enableSplitTunneling"); }
            set { BackingStore?.Set("enableSplitTunneling", value); }
        }
        /// <summary>Login group or domain when connection type is set to Dell SonicWALL Mobile Connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LoginGroupOrDomain
        {
            get { return BackingStore?.Get<string?>("loginGroupOrDomain"); }
            set { BackingStore?.Set("loginGroupOrDomain", value); }
        }
#nullable restore
#else
        public string LoginGroupOrDomain
        {
            get { return BackingStore?.Get<string>("loginGroupOrDomain"); }
            set { BackingStore?.Set("loginGroupOrDomain", value); }
        }
#endif
        /// <summary>Proxy Server.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Windows81VpnProxyServer? ProxyServer
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Windows81VpnProxyServer?>("proxyServer"); }
            set { BackingStore?.Set("proxyServer", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Windows81VpnProxyServer ProxyServer
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Windows81VpnProxyServer>("proxyServer"); }
            set { BackingStore?.Set("proxyServer", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.Windows81VpnConfiguration"/> and sets the default values.
        /// </summary>
        public Windows81VpnConfiguration() : base()
        {
            OdataType = "#microsoft.graph.windows81VpnConfiguration";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Windows81VpnConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Windows81VpnConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.windowsPhone81VpnConfiguration" => new global::Microsoft.Graph.Beta.Models.WindowsPhone81VpnConfiguration(),
                _ => new global::Microsoft.Graph.Beta.Models.Windows81VpnConfiguration(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "applyOnlyToWindows81", n => { ApplyOnlyToWindows81 = n.GetBoolValue(); } },
                { "connectionType", n => { ConnectionType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.WindowsVpnConnectionType>(); } },
                { "enableSplitTunneling", n => { EnableSplitTunneling = n.GetBoolValue(); } },
                { "loginGroupOrDomain", n => { LoginGroupOrDomain = n.GetStringValue(); } },
                { "proxyServer", n => { ProxyServer = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Windows81VpnProxyServer>(global::Microsoft.Graph.Beta.Models.Windows81VpnProxyServer.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.WindowsVpnConnectionType>("connectionType", ConnectionType);
            writer.WriteBoolValue("enableSplitTunneling", EnableSplitTunneling);
            writer.WriteStringValue("loginGroupOrDomain", LoginGroupOrDomain);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Windows81VpnProxyServer>("proxyServer", ProxyServer);
        }
    }
}
#pragma warning restore CS0618
