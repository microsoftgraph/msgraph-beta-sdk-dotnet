// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// An application on the Android Device Owner Managed Home Screen
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AndroidDeviceOwnerKioskModeApp : global::Microsoft.Graph.Beta.Models.AndroidDeviceOwnerKioskModeFolderItem, IParsable
    {
        /// <summary>Class name of application</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClassName
        {
            get { return BackingStore?.Get<string?>("className"); }
            set { BackingStore?.Set("className", value); }
        }
#nullable restore
#else
        public string ClassName
        {
            get { return BackingStore?.Get<string>("className"); }
            set { BackingStore?.Set("className", value); }
        }
#endif
        /// <summary>Indicates whether the application can be used when sign in fails due to network issues in Managed Home Screen. When TRUE, indicates the application can be used when sign in fails due to network issues in Managed Home Screen. When FALSE, indicates the application cannot be used when sign in fails due to network issues in Managed Home Screen. Default value is FALSE.</summary>
        public bool? OfflineAppAccessEnabled
        {
            get { return BackingStore?.Get<bool?>("offlineAppAccessEnabled"); }
            set { BackingStore?.Set("offlineAppAccessEnabled", value); }
        }
        /// <summary>Package name of application</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Package
        {
            get { return BackingStore?.Get<string?>("package"); }
            set { BackingStore?.Set("package", value); }
        }
#nullable restore
#else
        public string Package
        {
            get { return BackingStore?.Get<string>("package"); }
            set { BackingStore?.Set("package", value); }
        }
#endif
        /// <summary>Indicates whether the application can be used prior to signing in to the Managed Home Screen. When TRUE, indicates the app can be used prior to sign in for Managed Home Screen. When FALSE, indicates the app cannot be used prior to sign in for Managed Home Screen. Default value is FALSE.</summary>
        public bool? PreSignInAppAccessEnabled
        {
            get { return BackingStore?.Get<bool?>("preSignInAppAccessEnabled"); }
            set { BackingStore?.Set("preSignInAppAccessEnabled", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.AndroidDeviceOwnerKioskModeApp"/> and sets the default values.
        /// </summary>
        public AndroidDeviceOwnerKioskModeApp() : base()
        {
            OdataType = "#microsoft.graph.androidDeviceOwnerKioskModeApp";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.AndroidDeviceOwnerKioskModeApp"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.AndroidDeviceOwnerKioskModeApp CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.AndroidDeviceOwnerKioskModeApp();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "className", n => { ClassName = n.GetStringValue(); } },
                { "offlineAppAccessEnabled", n => { OfflineAppAccessEnabled = n.GetBoolValue(); } },
                { "package", n => { Package = n.GetStringValue(); } },
                { "preSignInAppAccessEnabled", n => { PreSignInAppAccessEnabled = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("className", ClassName);
            writer.WriteBoolValue("offlineAppAccessEnabled", OfflineAppAccessEnabled);
            writer.WriteStringValue("package", Package);
            writer.WriteBoolValue("preSignInAppAccessEnabled", PreSignInAppAccessEnabled);
        }
    }
}
#pragma warning restore CS0618
