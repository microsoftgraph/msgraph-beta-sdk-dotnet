// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class AppCredentialSignInActivity : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The globally unique appId (also called client ID on the Microsoft Entra admin center) of the credential application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId
        {
            get { return BackingStore?.Get<string?>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#nullable restore
#else
        public string AppId
        {
            get { return BackingStore?.Get<string>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#endif
        /// <summary>The ID of the credential application instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppObjectId
        {
            get { return BackingStore?.Get<string?>("appObjectId"); }
            set { BackingStore?.Set("appObjectId", value); }
        }
#nullable restore
#else
        public string AppObjectId
        {
            get { return BackingStore?.Get<string>("appObjectId"); }
            set { BackingStore?.Set("appObjectId", value); }
        }
#endif
        /// <summary>The date and time when the credential was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The credentialOrigin property</summary>
        public Microsoft.Graph.Beta.Models.ApplicationKeyOrigin? CredentialOrigin
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ApplicationKeyOrigin?>("credentialOrigin"); }
            set { BackingStore?.Set("credentialOrigin", value); }
        }
        /// <summary>The date and time when the credential is set to expire. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? ExpirationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("expirationDateTime"); }
            set { BackingStore?.Set("expirationDateTime", value); }
        }
        /// <summary>The key ID of the credential.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KeyId
        {
            get { return BackingStore?.Get<string?>("keyId"); }
            set { BackingStore?.Set("keyId", value); }
        }
#nullable restore
#else
        public string KeyId
        {
            get { return BackingStore?.Get<string>("keyId"); }
            set { BackingStore?.Set("keyId", value); }
        }
#endif
        /// <summary>Specifies the key type. The possible values are: clientSecret, certificate, unknownFutureValue.</summary>
        public Microsoft.Graph.Beta.Models.ApplicationKeyType? KeyType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ApplicationKeyType?>("keyType"); }
            set { BackingStore?.Set("keyType", value); }
        }
        /// <summary>Specifies what the key was used for. The possible values are: sign, verify, unknownFutureValue.</summary>
        public Microsoft.Graph.Beta.Models.ApplicationKeyUsage? KeyUsage
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ApplicationKeyUsage?>("keyUsage"); }
            set { BackingStore?.Set("keyUsage", value); }
        }
        /// <summary>The ID of the accessed resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceId
        {
            get { return BackingStore?.Get<string?>("resourceId"); }
            set { BackingStore?.Set("resourceId", value); }
        }
#nullable restore
#else
        public string ResourceId
        {
            get { return BackingStore?.Get<string>("resourceId"); }
            set { BackingStore?.Set("resourceId", value); }
        }
#endif
        /// <summary>The ID of the service principal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePrincipalObjectId
        {
            get { return BackingStore?.Get<string?>("servicePrincipalObjectId"); }
            set { BackingStore?.Set("servicePrincipalObjectId", value); }
        }
#nullable restore
#else
        public string ServicePrincipalObjectId
        {
            get { return BackingStore?.Get<string>("servicePrincipalObjectId"); }
            set { BackingStore?.Set("servicePrincipalObjectId", value); }
        }
#endif
        /// <summary>The signInActivity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.SignInActivity? SignInActivity
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.SignInActivity?>("signInActivity"); }
            set { BackingStore?.Set("signInActivity", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.SignInActivity SignInActivity
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.SignInActivity>("signInActivity"); }
            set { BackingStore?.Set("signInActivity", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.AppCredentialSignInActivity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.AppCredentialSignInActivity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.AppCredentialSignInActivity();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "appId", n => { AppId = n.GetStringValue(); } },
                { "appObjectId", n => { AppObjectId = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "credentialOrigin", n => { CredentialOrigin = n.GetEnumValue<Microsoft.Graph.Beta.Models.ApplicationKeyOrigin>(); } },
                { "expirationDateTime", n => { ExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "keyId", n => { KeyId = n.GetStringValue(); } },
                { "keyType", n => { KeyType = n.GetEnumValue<Microsoft.Graph.Beta.Models.ApplicationKeyType>(); } },
                { "keyUsage", n => { KeyUsage = n.GetEnumValue<Microsoft.Graph.Beta.Models.ApplicationKeyUsage>(); } },
                { "resourceId", n => { ResourceId = n.GetStringValue(); } },
                { "servicePrincipalObjectId", n => { ServicePrincipalObjectId = n.GetStringValue(); } },
                { "signInActivity", n => { SignInActivity = n.GetObjectValue<Microsoft.Graph.Beta.Models.SignInActivity>(Microsoft.Graph.Beta.Models.SignInActivity.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("appId", AppId);
            writer.WriteStringValue("appObjectId", AppObjectId);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.ApplicationKeyOrigin>("credentialOrigin", CredentialOrigin);
            writer.WriteDateTimeOffsetValue("expirationDateTime", ExpirationDateTime);
            writer.WriteStringValue("keyId", KeyId);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.ApplicationKeyType>("keyType", KeyType);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.ApplicationKeyUsage>("keyUsage", KeyUsage);
            writer.WriteStringValue("resourceId", ResourceId);
            writer.WriteStringValue("servicePrincipalObjectId", ServicePrincipalObjectId);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.SignInActivity>("signInActivity", SignInActivity);
        }
    }
}
