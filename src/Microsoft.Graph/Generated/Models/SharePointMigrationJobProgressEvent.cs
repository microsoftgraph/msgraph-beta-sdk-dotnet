// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SharePointMigrationJobProgressEvent : global::Microsoft.Graph.Beta.Models.SharePointMigrationEvent, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The bytesProcessed property</summary>
        public long? BytesProcessed
        {
            get { return BackingStore?.Get<long?>("bytesProcessed"); }
            set { BackingStore?.Set("bytesProcessed", value); }
        }
        /// <summary>The bytesProcessedOnlyCurrentVersion property</summary>
        public long? BytesProcessedOnlyCurrentVersion
        {
            get { return BackingStore?.Get<long?>("bytesProcessedOnlyCurrentVersion"); }
            set { BackingStore?.Set("bytesProcessedOnlyCurrentVersion", value); }
        }
        /// <summary>The cpuDurationMs property</summary>
        public long? CpuDurationMs
        {
            get { return BackingStore?.Get<long?>("cpuDurationMs"); }
            set { BackingStore?.Set("cpuDurationMs", value); }
        }
        /// <summary>The filesProcessed property</summary>
        public long? FilesProcessed
        {
            get { return BackingStore?.Get<long?>("filesProcessed"); }
            set { BackingStore?.Set("filesProcessed", value); }
        }
        /// <summary>The filesProcessedOnlyCurrentVersion property</summary>
        public long? FilesProcessedOnlyCurrentVersion
        {
            get { return BackingStore?.Get<long?>("filesProcessedOnlyCurrentVersion"); }
            set { BackingStore?.Set("filesProcessedOnlyCurrentVersion", value); }
        }
        /// <summary>The isCompleted property</summary>
        public bool? IsCompleted
        {
            get { return BackingStore?.Get<bool?>("isCompleted"); }
            set { BackingStore?.Set("isCompleted", value); }
        }
        /// <summary>The lastProcessedObjectId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastProcessedObjectId
        {
            get { return BackingStore?.Get<string?>("lastProcessedObjectId"); }
            set { BackingStore?.Set("lastProcessedObjectId", value); }
        }
#nullable restore
#else
        public string LastProcessedObjectId
        {
            get { return BackingStore?.Get<string>("lastProcessedObjectId"); }
            set { BackingStore?.Set("lastProcessedObjectId", value); }
        }
#endif
        /// <summary>The objectsProcessed property</summary>
        public long? ObjectsProcessed
        {
            get { return BackingStore?.Get<long?>("objectsProcessed"); }
            set { BackingStore?.Set("objectsProcessed", value); }
        }
        /// <summary>The sqlDurationMs property</summary>
        public long? SqlDurationMs
        {
            get { return BackingStore?.Get<long?>("sqlDurationMs"); }
            set { BackingStore?.Set("sqlDurationMs", value); }
        }
        /// <summary>The sqlQueryCount property</summary>
        public long? SqlQueryCount
        {
            get { return BackingStore?.Get<long?>("sqlQueryCount"); }
            set { BackingStore?.Set("sqlQueryCount", value); }
        }
        /// <summary>The totalDurationMs property</summary>
        public long? TotalDurationMs
        {
            get { return BackingStore?.Get<long?>("totalDurationMs"); }
            set { BackingStore?.Set("totalDurationMs", value); }
        }
        /// <summary>The totalErrors property</summary>
        public long? TotalErrors
        {
            get { return BackingStore?.Get<long?>("totalErrors"); }
            set { BackingStore?.Set("totalErrors", value); }
        }
        /// <summary>The totalExpectedBytes property</summary>
        public long? TotalExpectedBytes
        {
            get { return BackingStore?.Get<long?>("totalExpectedBytes"); }
            set { BackingStore?.Set("totalExpectedBytes", value); }
        }
        /// <summary>The totalExpectedObjects property</summary>
        public long? TotalExpectedObjects
        {
            get { return BackingStore?.Get<long?>("totalExpectedObjects"); }
            set { BackingStore?.Set("totalExpectedObjects", value); }
        }
        /// <summary>The totalRetryCount property</summary>
        public int? TotalRetryCount
        {
            get { return BackingStore?.Get<int?>("totalRetryCount"); }
            set { BackingStore?.Set("totalRetryCount", value); }
        }
        /// <summary>The totalWarnings property</summary>
        public long? TotalWarnings
        {
            get { return BackingStore?.Get<long?>("totalWarnings"); }
            set { BackingStore?.Set("totalWarnings", value); }
        }
        /// <summary>The waitTimeOnSqlThrottlingMs property</summary>
        public long? WaitTimeOnSqlThrottlingMs
        {
            get { return BackingStore?.Get<long?>("waitTimeOnSqlThrottlingMs"); }
            set { BackingStore?.Set("waitTimeOnSqlThrottlingMs", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.SharePointMigrationJobProgressEvent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.SharePointMigrationJobProgressEvent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.SharePointMigrationJobProgressEvent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "bytesProcessed", n => { BytesProcessed = n.GetLongValue(); } },
                { "bytesProcessedOnlyCurrentVersion", n => { BytesProcessedOnlyCurrentVersion = n.GetLongValue(); } },
                { "cpuDurationMs", n => { CpuDurationMs = n.GetLongValue(); } },
                { "filesProcessed", n => { FilesProcessed = n.GetLongValue(); } },
                { "filesProcessedOnlyCurrentVersion", n => { FilesProcessedOnlyCurrentVersion = n.GetLongValue(); } },
                { "isCompleted", n => { IsCompleted = n.GetBoolValue(); } },
                { "lastProcessedObjectId", n => { LastProcessedObjectId = n.GetStringValue(); } },
                { "objectsProcessed", n => { ObjectsProcessed = n.GetLongValue(); } },
                { "sqlDurationMs", n => { SqlDurationMs = n.GetLongValue(); } },
                { "sqlQueryCount", n => { SqlQueryCount = n.GetLongValue(); } },
                { "totalDurationMs", n => { TotalDurationMs = n.GetLongValue(); } },
                { "totalErrors", n => { TotalErrors = n.GetLongValue(); } },
                { "totalExpectedBytes", n => { TotalExpectedBytes = n.GetLongValue(); } },
                { "totalExpectedObjects", n => { TotalExpectedObjects = n.GetLongValue(); } },
                { "totalRetryCount", n => { TotalRetryCount = n.GetIntValue(); } },
                { "totalWarnings", n => { TotalWarnings = n.GetLongValue(); } },
                { "waitTimeOnSqlThrottlingMs", n => { WaitTimeOnSqlThrottlingMs = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteLongValue("bytesProcessed", BytesProcessed);
            writer.WriteLongValue("bytesProcessedOnlyCurrentVersion", BytesProcessedOnlyCurrentVersion);
            writer.WriteLongValue("cpuDurationMs", CpuDurationMs);
            writer.WriteLongValue("filesProcessed", FilesProcessed);
            writer.WriteLongValue("filesProcessedOnlyCurrentVersion", FilesProcessedOnlyCurrentVersion);
            writer.WriteBoolValue("isCompleted", IsCompleted);
            writer.WriteStringValue("lastProcessedObjectId", LastProcessedObjectId);
            writer.WriteLongValue("objectsProcessed", ObjectsProcessed);
            writer.WriteLongValue("sqlDurationMs", SqlDurationMs);
            writer.WriteLongValue("sqlQueryCount", SqlQueryCount);
            writer.WriteLongValue("totalDurationMs", TotalDurationMs);
            writer.WriteLongValue("totalErrors", TotalErrors);
            writer.WriteLongValue("totalExpectedBytes", TotalExpectedBytes);
            writer.WriteLongValue("totalExpectedObjects", TotalExpectedObjects);
            writer.WriteIntValue("totalRetryCount", TotalRetryCount);
            writer.WriteLongValue("totalWarnings", TotalWarnings);
            writer.WriteLongValue("waitTimeOnSqlThrottlingMs", WaitTimeOnSqlThrottlingMs);
        }
    }
}
#pragma warning restore CS0618
