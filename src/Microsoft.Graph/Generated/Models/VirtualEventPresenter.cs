// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class VirtualEventPresenter : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Email address of the presenter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email
        {
            get { return BackingStore?.Get<string?>("email"); }
            set { BackingStore?.Set("email", value); }
        }
#nullable restore
#else
        public string Email
        {
            get { return BackingStore?.Get<string>("email"); }
            set { BackingStore?.Set("email", value); }
        }
#endif
        /// <summary>Identity information of the presenter. The supported identities are: communicationsGuestIdentity and communicationsUserIdentity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Identity? Identity
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Identity?>("identity"); }
            set { BackingStore?.Set("identity", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Identity Identity
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Identity>("identity"); }
            set { BackingStore?.Set("identity", value); }
        }
#endif
        /// <summary>Other detail information of the presenter. This property returns null when the virtual event type is virtualEventTownhall.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.VirtualEventPresenterDetails? PresenterDetails
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.VirtualEventPresenterDetails?>("presenterDetails"); }
            set { BackingStore?.Set("presenterDetails", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.VirtualEventPresenterDetails PresenterDetails
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.VirtualEventPresenterDetails>("presenterDetails"); }
            set { BackingStore?.Set("presenterDetails", value); }
        }
#endif
        /// <summary>The sessions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.VirtualEventSession>? Sessions
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.VirtualEventSession>?>("sessions"); }
            set { BackingStore?.Set("sessions", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.VirtualEventSession> Sessions
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.VirtualEventSession>>("sessions"); }
            set { BackingStore?.Set("sessions", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.VirtualEventPresenter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.VirtualEventPresenter CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.VirtualEventPresenter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "email", n => { Email = n.GetStringValue(); } },
                { "identity", n => { Identity = n.GetObjectValue<Microsoft.Graph.Beta.Models.Identity>(Microsoft.Graph.Beta.Models.Identity.CreateFromDiscriminatorValue); } },
                { "presenterDetails", n => { PresenterDetails = n.GetObjectValue<Microsoft.Graph.Beta.Models.VirtualEventPresenterDetails>(Microsoft.Graph.Beta.Models.VirtualEventPresenterDetails.CreateFromDiscriminatorValue); } },
                { "sessions", n => { Sessions = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.VirtualEventSession>(Microsoft.Graph.Beta.Models.VirtualEventSession.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("email", Email);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Identity>("identity", Identity);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.VirtualEventPresenterDetails>("presenterDetails", PresenterDetails);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.VirtualEventSession>("sessions", Sessions);
        }
    }
}
