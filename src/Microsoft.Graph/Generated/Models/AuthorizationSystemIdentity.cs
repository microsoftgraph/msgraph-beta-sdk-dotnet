// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class AuthorizationSystemIdentity : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Navigation to the authorizationSystem object</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.AuthorizationSystem? AuthorizationSystem
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AuthorizationSystem?>("authorizationSystem"); }
            set { BackingStore?.Set("authorizationSystem", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.AuthorizationSystem AuthorizationSystem
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AuthorizationSystem>("authorizationSystem"); }
            set { BackingStore?.Set("authorizationSystem", value); }
        }
#endif
        /// <summary>The name of the identity. Read-only. Supports $filter and (eq,contains).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Unique ID of the identity within the external system. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId
        {
            get { return BackingStore?.Get<string?>("externalId"); }
            set { BackingStore?.Set("externalId", value); }
        }
#nullable restore
#else
        public string ExternalId
        {
            get { return BackingStore?.Get<string>("externalId"); }
            set { BackingStore?.Set("externalId", value); }
        }
#endif
        /// <summary>Represents details of the source of the identity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentitySource? Source
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentitySource?>("source"); }
            set { BackingStore?.Set("source", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentitySource Source
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentitySource>("source"); }
            set { BackingStore?.Set("source", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.awsAccessKey" => new global::Microsoft.Graph.Beta.Models.AwsAccessKey(),
                "#microsoft.graph.awsEc2Instance" => new global::Microsoft.Graph.Beta.Models.AwsEc2Instance(),
                "#microsoft.graph.awsGroup" => new global::Microsoft.Graph.Beta.Models.AwsGroup(),
                "#microsoft.graph.awsIdentity" => new global::Microsoft.Graph.Beta.Models.AwsIdentity(),
                "#microsoft.graph.awsLambda" => new global::Microsoft.Graph.Beta.Models.AwsLambda(),
                "#microsoft.graph.awsRole" => new global::Microsoft.Graph.Beta.Models.AwsRole(),
                "#microsoft.graph.awsUser" => new global::Microsoft.Graph.Beta.Models.AwsUser(),
                "#microsoft.graph.azureGroup" => new global::Microsoft.Graph.Beta.Models.AzureGroup(),
                "#microsoft.graph.azureIdentity" => new global::Microsoft.Graph.Beta.Models.AzureIdentity(),
                "#microsoft.graph.azureManagedIdentity" => new global::Microsoft.Graph.Beta.Models.AzureManagedIdentity(),
                "#microsoft.graph.azureServerlessFunction" => new global::Microsoft.Graph.Beta.Models.AzureServerlessFunction(),
                "#microsoft.graph.azureServicePrincipal" => new global::Microsoft.Graph.Beta.Models.AzureServicePrincipal(),
                "#microsoft.graph.azureUser" => new global::Microsoft.Graph.Beta.Models.AzureUser(),
                "#microsoft.graph.gcpCloudFunction" => new global::Microsoft.Graph.Beta.Models.GcpCloudFunction(),
                "#microsoft.graph.gcpGroup" => new global::Microsoft.Graph.Beta.Models.GcpGroup(),
                "#microsoft.graph.gcpIdentity" => new global::Microsoft.Graph.Beta.Models.GcpIdentity(),
                "#microsoft.graph.gcpServiceAccount" => new global::Microsoft.Graph.Beta.Models.GcpServiceAccount(),
                "#microsoft.graph.gcpUser" => new global::Microsoft.Graph.Beta.Models.GcpUser(),
                _ => new global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentity(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "authorizationSystem", n => { AuthorizationSystem = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.AuthorizationSystem>(global::Microsoft.Graph.Beta.Models.AuthorizationSystem.CreateFromDiscriminatorValue); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "source", n => { Source = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentitySource>(global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentitySource.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.AuthorizationSystem>("authorizationSystem", AuthorizationSystem);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.AuthorizationSystemIdentitySource>("source", Source);
        }
    }
}
#pragma warning restore CS0618
