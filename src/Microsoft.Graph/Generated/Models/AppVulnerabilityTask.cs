// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    /// <summary>
    /// An app vulnerability task.
    /// </summary>
    public class AppVulnerabilityTask : DeviceAppManagementTask, IParsable 
    {
        /// <summary>The app name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppName {
            get { return BackingStore?.Get<string?>("appName"); }
            set { BackingStore?.Set("appName", value); }
        }
#nullable restore
#else
        public string AppName {
            get { return BackingStore?.Get<string>("appName"); }
            set { BackingStore?.Set("appName", value); }
        }
#endif
        /// <summary>The app publisher.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppPublisher {
            get { return BackingStore?.Get<string?>("appPublisher"); }
            set { BackingStore?.Set("appPublisher", value); }
        }
#nullable restore
#else
        public string AppPublisher {
            get { return BackingStore?.Get<string>("appPublisher"); }
            set { BackingStore?.Set("appPublisher", value); }
        }
#endif
        /// <summary>The app version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppVersion {
            get { return BackingStore?.Get<string?>("appVersion"); }
            set { BackingStore?.Set("appVersion", value); }
        }
#nullable restore
#else
        public string AppVersion {
            get { return BackingStore?.Get<string>("appVersion"); }
            set { BackingStore?.Set("appVersion", value); }
        }
#endif
        /// <summary>Information about the mitigation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Insights {
            get { return BackingStore?.Get<string?>("insights"); }
            set { BackingStore?.Set("insights", value); }
        }
#nullable restore
#else
        public string Insights {
            get { return BackingStore?.Get<string>("insights"); }
            set { BackingStore?.Set("insights", value); }
        }
#endif
        /// <summary>The number of vulnerable devices.</summary>
        public int? ManagedDeviceCount {
            get { return BackingStore?.Get<int?>("managedDeviceCount"); }
            set { BackingStore?.Set("managedDeviceCount", value); }
        }
        /// <summary>The vulnerable managed devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AppVulnerabilityManagedDevice>? ManagedDevices {
            get { return BackingStore?.Get<List<AppVulnerabilityManagedDevice>?>("managedDevices"); }
            set { BackingStore?.Set("managedDevices", value); }
        }
#nullable restore
#else
        public List<AppVulnerabilityManagedDevice> ManagedDevices {
            get { return BackingStore?.Get<List<AppVulnerabilityManagedDevice>>("managedDevices"); }
            set { BackingStore?.Set("managedDevices", value); }
        }
#endif
        /// <summary>Device app management task mitigation type.</summary>
        public AppVulnerabilityTaskMitigationType? MitigationType {
            get { return BackingStore?.Get<AppVulnerabilityTaskMitigationType?>("mitigationType"); }
            set { BackingStore?.Set("mitigationType", value); }
        }
        /// <summary>The number of vulnerable mobile apps.</summary>
        public int? MobileAppCount {
            get { return BackingStore?.Get<int?>("mobileAppCount"); }
            set { BackingStore?.Set("mobileAppCount", value); }
        }
        /// <summary>The vulnerable mobile apps.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AppVulnerabilityMobileApp>? MobileApps {
            get { return BackingStore?.Get<List<AppVulnerabilityMobileApp>?>("mobileApps"); }
            set { BackingStore?.Set("mobileApps", value); }
        }
#nullable restore
#else
        public List<AppVulnerabilityMobileApp> MobileApps {
            get { return BackingStore?.Get<List<AppVulnerabilityMobileApp>>("mobileApps"); }
            set { BackingStore?.Set("mobileApps", value); }
        }
#endif
        /// <summary>The remediation steps.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Remediation {
            get { return BackingStore?.Get<string?>("remediation"); }
            set { BackingStore?.Set("remediation", value); }
        }
#nullable restore
#else
        public string Remediation {
            get { return BackingStore?.Get<string>("remediation"); }
            set { BackingStore?.Set("remediation", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="AppVulnerabilityTask"/> and sets the default values.
        /// </summary>
        public AppVulnerabilityTask() : base()
        {
            OdataType = "#microsoft.graph.appVulnerabilityTask";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AppVulnerabilityTask"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new AppVulnerabilityTask CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AppVulnerabilityTask();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"appName", n => { AppName = n.GetStringValue(); } },
                {"appPublisher", n => { AppPublisher = n.GetStringValue(); } },
                {"appVersion", n => { AppVersion = n.GetStringValue(); } },
                {"insights", n => { Insights = n.GetStringValue(); } },
                {"managedDeviceCount", n => { ManagedDeviceCount = n.GetIntValue(); } },
                {"managedDevices", n => { ManagedDevices = n.GetCollectionOfObjectValues<AppVulnerabilityManagedDevice>(AppVulnerabilityManagedDevice.CreateFromDiscriminatorValue)?.ToList(); } },
                {"mitigationType", n => { MitigationType = n.GetEnumValue<AppVulnerabilityTaskMitigationType>(); } },
                {"mobileAppCount", n => { MobileAppCount = n.GetIntValue(); } },
                {"mobileApps", n => { MobileApps = n.GetCollectionOfObjectValues<AppVulnerabilityMobileApp>(AppVulnerabilityMobileApp.CreateFromDiscriminatorValue)?.ToList(); } },
                {"remediation", n => { Remediation = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("appName", AppName);
            writer.WriteStringValue("appPublisher", AppPublisher);
            writer.WriteStringValue("appVersion", AppVersion);
            writer.WriteStringValue("insights", Insights);
            writer.WriteIntValue("managedDeviceCount", ManagedDeviceCount);
            writer.WriteCollectionOfObjectValues<AppVulnerabilityManagedDevice>("managedDevices", ManagedDevices);
            writer.WriteEnumValue<AppVulnerabilityTaskMitigationType>("mitigationType", MitigationType);
            writer.WriteIntValue("mobileAppCount", MobileAppCount);
            writer.WriteCollectionOfObjectValues<AppVulnerabilityMobileApp>("mobileApps", MobileApps);
            writer.WriteStringValue("remediation", Remediation);
        }
    }
}
