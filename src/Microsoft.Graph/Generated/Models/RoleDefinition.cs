// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// The Role Definition resource. The role definition is the foundation of role based access in Intune. The role combines an Intune resource such as a Mobile App and associated role permissions such as Create or Read for the resource. There are two types of roles, built-in and custom. Built-in roles cannot be modified. Both built-in roles and custom roles must have assignments to be enforced. Create custom roles if you want to define a role that allows any of the available resources and role permissions to be combined into a single role.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class RoleDefinition : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>Description of the Role definition.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>Display Name of the Role definition.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Type of Role. Set to True if it is built-in, or set to False if it is a custom role definition.</summary>
        public bool? IsBuiltIn
        {
            get { return BackingStore?.Get<bool?>("isBuiltIn"); }
            set { BackingStore?.Set("isBuiltIn", value); }
        }
        /// <summary>Type of Role. Set to True if it is built-in, or set to False if it is a custom role definition.</summary>
        public bool? IsBuiltInRoleDefinition
        {
            get { return BackingStore?.Get<bool?>("isBuiltInRoleDefinition"); }
            set { BackingStore?.Set("isBuiltInRoleDefinition", value); }
        }
        /// <summary>List of Role Permissions this role is allowed to perform. These must match the actionName that is defined as part of the rolePermission.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.RolePermission>? Permissions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RolePermission>?>("permissions"); }
            set { BackingStore?.Set("permissions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.RolePermission> Permissions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RolePermission>>("permissions"); }
            set { BackingStore?.Set("permissions", value); }
        }
#endif
        /// <summary>List of Role assignments for this role definition.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.RoleAssignment>? RoleAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RoleAssignment>?>("roleAssignments"); }
            set { BackingStore?.Set("roleAssignments", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.RoleAssignment> RoleAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RoleAssignment>>("roleAssignments"); }
            set { BackingStore?.Set("roleAssignments", value); }
        }
#endif
        /// <summary>List of Role Permissions this role is allowed to perform. These must match the actionName that is defined as part of the rolePermission.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.RolePermission>? RolePermissions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RolePermission>?>("rolePermissions"); }
            set { BackingStore?.Set("rolePermissions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.RolePermission> RolePermissions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RolePermission>>("rolePermissions"); }
            set { BackingStore?.Set("rolePermissions", value); }
        }
#endif
        /// <summary>List of Scope Tags for this Entity instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleScopeTagIds
        {
            get { return BackingStore?.Get<List<string>?>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#nullable restore
#else
        public List<string> RoleScopeTagIds
        {
            get { return BackingStore?.Get<List<string>>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.RoleDefinition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.RoleDefinition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.deviceAndAppManagementRoleDefinition" => new global::Microsoft.Graph.Beta.Models.DeviceAndAppManagementRoleDefinition(),
                _ => new global::Microsoft.Graph.Beta.Models.RoleDefinition(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "isBuiltIn", n => { IsBuiltIn = n.GetBoolValue(); } },
                { "isBuiltInRoleDefinition", n => { IsBuiltInRoleDefinition = n.GetBoolValue(); } },
                { "permissions", n => { Permissions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RolePermission>(global::Microsoft.Graph.Beta.Models.RolePermission.CreateFromDiscriminatorValue)?.AsList(); } },
                { "roleAssignments", n => { RoleAssignments = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RoleAssignment>(global::Microsoft.Graph.Beta.Models.RoleAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "rolePermissions", n => { RolePermissions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RolePermission>(global::Microsoft.Graph.Beta.Models.RolePermission.CreateFromDiscriminatorValue)?.AsList(); } },
                { "roleScopeTagIds", n => { RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("isBuiltIn", IsBuiltIn);
            writer.WriteBoolValue("isBuiltInRoleDefinition", IsBuiltInRoleDefinition);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RolePermission>("permissions", Permissions);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RoleAssignment>("roleAssignments", RoleAssignments);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RolePermission>("rolePermissions", RolePermissions);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
        }
    }
}
#pragma warning restore CS0618
