// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Intune will provide customer the ability to run their Powershell Health scripts (remediation + detection) on the enrolled windows 10 Azure Active Directory joined devices.
    /// </summary>
    public class DeviceHealthScript : Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>The list of group assignments for the device health script</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.DeviceHealthScriptAssignment>? Assignments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DeviceHealthScriptAssignment>?>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.DeviceHealthScriptAssignment> Assignments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DeviceHealthScriptAssignment>>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#endif
        /// <summary>The timestamp of when the device health script was created. This property is read-only.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Description of the device health script</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The entire content of the detection powershell script</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? DetectionScriptContent
        {
            get { return BackingStore?.Get<byte[]?>("detectionScriptContent"); }
            set { BackingStore?.Set("detectionScriptContent", value); }
        }
#nullable restore
#else
        public byte[] DetectionScriptContent
        {
            get { return BackingStore?.Get<byte[]>("detectionScriptContent"); }
            set { BackingStore?.Set("detectionScriptContent", value); }
        }
#endif
        /// <summary>List of ComplexType DetectionScriptParameters objects.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>? DetectionScriptParameters
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>?>("detectionScriptParameters"); }
            set { BackingStore?.Set("detectionScriptParameters", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter> DetectionScriptParameters
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>>("detectionScriptParameters"); }
            set { BackingStore?.Set("detectionScriptParameters", value); }
        }
#endif
        /// <summary>Indicates the type of device script.</summary>
        public Microsoft.Graph.Beta.Models.DeviceHealthScriptType? DeviceHealthScriptType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.DeviceHealthScriptType?>("deviceHealthScriptType"); }
            set { BackingStore?.Set("deviceHealthScriptType", value); }
        }
        /// <summary>List of run states for the device health script across all devices</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.DeviceHealthScriptDeviceState>? DeviceRunStates
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DeviceHealthScriptDeviceState>?>("deviceRunStates"); }
            set { BackingStore?.Set("deviceRunStates", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.DeviceHealthScriptDeviceState> DeviceRunStates
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DeviceHealthScriptDeviceState>>("deviceRunStates"); }
            set { BackingStore?.Set("deviceRunStates", value); }
        }
#endif
        /// <summary>Name of the device health script</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Indicate whether the script signature needs be checked</summary>
        public bool? EnforceSignatureCheck
        {
            get { return BackingStore?.Get<bool?>("enforceSignatureCheck"); }
            set { BackingStore?.Set("enforceSignatureCheck", value); }
        }
        /// <summary>Highest available version for a Microsoft Proprietary script</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HighestAvailableVersion
        {
            get { return BackingStore?.Get<string?>("highestAvailableVersion"); }
            set { BackingStore?.Set("highestAvailableVersion", value); }
        }
#nullable restore
#else
        public string HighestAvailableVersion
        {
            get { return BackingStore?.Get<string>("highestAvailableVersion"); }
            set { BackingStore?.Set("highestAvailableVersion", value); }
        }
#endif
        /// <summary>Determines if this is Microsoft Proprietary Script. Proprietary scripts are read-only</summary>
        public bool? IsGlobalScript
        {
            get { return BackingStore?.Get<bool?>("isGlobalScript"); }
            set { BackingStore?.Set("isGlobalScript", value); }
        }
        /// <summary>The timestamp of when the device health script was modified. This property is read-only.</summary>
        public DateTimeOffset? LastModifiedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastModifiedDateTime"); }
            set { BackingStore?.Set("lastModifiedDateTime", value); }
        }
        /// <summary>Name of the device health script publisher</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Publisher
        {
            get { return BackingStore?.Get<string?>("publisher"); }
            set { BackingStore?.Set("publisher", value); }
        }
#nullable restore
#else
        public string Publisher
        {
            get { return BackingStore?.Get<string>("publisher"); }
            set { BackingStore?.Set("publisher", value); }
        }
#endif
        /// <summary>The entire content of the remediation powershell script</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? RemediationScriptContent
        {
            get { return BackingStore?.Get<byte[]?>("remediationScriptContent"); }
            set { BackingStore?.Set("remediationScriptContent", value); }
        }
#nullable restore
#else
        public byte[] RemediationScriptContent
        {
            get { return BackingStore?.Get<byte[]>("remediationScriptContent"); }
            set { BackingStore?.Set("remediationScriptContent", value); }
        }
#endif
        /// <summary>List of ComplexType RemediationScriptParameters objects.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>? RemediationScriptParameters
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>?>("remediationScriptParameters"); }
            set { BackingStore?.Set("remediationScriptParameters", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter> RemediationScriptParameters
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>>("remediationScriptParameters"); }
            set { BackingStore?.Set("remediationScriptParameters", value); }
        }
#endif
        /// <summary>List of Scope Tag IDs for the device health script</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleScopeTagIds
        {
            get { return BackingStore?.Get<List<string>?>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#nullable restore
#else
        public List<string> RoleScopeTagIds
        {
            get { return BackingStore?.Get<List<string>>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#endif
        /// <summary>Indicate whether PowerShell script(s) should run as 32-bit</summary>
        public bool? RunAs32Bit
        {
            get { return BackingStore?.Get<bool?>("runAs32Bit"); }
            set { BackingStore?.Set("runAs32Bit", value); }
        }
        /// <summary>Indicates the type of execution context the app runs in.</summary>
        public Microsoft.Graph.Beta.Models.RunAsAccountType? RunAsAccount
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RunAsAccountType?>("runAsAccount"); }
            set { BackingStore?.Set("runAsAccount", value); }
        }
        /// <summary>High level run summary for device health script.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.DeviceHealthScriptRunSummary? RunSummary
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.DeviceHealthScriptRunSummary?>("runSummary"); }
            set { BackingStore?.Set("runSummary", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.DeviceHealthScriptRunSummary RunSummary
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.DeviceHealthScriptRunSummary>("runSummary"); }
            set { BackingStore?.Set("runSummary", value); }
        }
#endif
        /// <summary>Version of the device health script</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version
        {
            get { return BackingStore?.Get<string?>("version"); }
            set { BackingStore?.Set("version", value); }
        }
#nullable restore
#else
        public string Version
        {
            get { return BackingStore?.Get<string>("version"); }
            set { BackingStore?.Set("version", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.DeviceHealthScript"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.DeviceHealthScript CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.DeviceHealthScript();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "assignments", n => { Assignments = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DeviceHealthScriptAssignment>(Microsoft.Graph.Beta.Models.DeviceHealthScriptAssignment.CreateFromDiscriminatorValue)?.ToList(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "detectionScriptContent", n => { DetectionScriptContent = n.GetByteArrayValue(); } },
                { "detectionScriptParameters", n => { DetectionScriptParameters = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>(Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter.CreateFromDiscriminatorValue)?.ToList(); } },
                { "deviceHealthScriptType", n => { DeviceHealthScriptType = n.GetEnumValue<Microsoft.Graph.Beta.Models.DeviceHealthScriptType>(); } },
                { "deviceRunStates", n => { DeviceRunStates = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DeviceHealthScriptDeviceState>(Microsoft.Graph.Beta.Models.DeviceHealthScriptDeviceState.CreateFromDiscriminatorValue)?.ToList(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "enforceSignatureCheck", n => { EnforceSignatureCheck = n.GetBoolValue(); } },
                { "highestAvailableVersion", n => { HighestAvailableVersion = n.GetStringValue(); } },
                { "isGlobalScript", n => { IsGlobalScript = n.GetBoolValue(); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "publisher", n => { Publisher = n.GetStringValue(); } },
                { "remediationScriptContent", n => { RemediationScriptContent = n.GetByteArrayValue(); } },
                { "remediationScriptParameters", n => { RemediationScriptParameters = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>(Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter.CreateFromDiscriminatorValue)?.ToList(); } },
                { "roleScopeTagIds", n => { RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "runAs32Bit", n => { RunAs32Bit = n.GetBoolValue(); } },
                { "runAsAccount", n => { RunAsAccount = n.GetEnumValue<Microsoft.Graph.Beta.Models.RunAsAccountType>(); } },
                { "runSummary", n => { RunSummary = n.GetObjectValue<Microsoft.Graph.Beta.Models.DeviceHealthScriptRunSummary>(Microsoft.Graph.Beta.Models.DeviceHealthScriptRunSummary.CreateFromDiscriminatorValue); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DeviceHealthScriptAssignment>("assignments", Assignments);
            writer.WriteStringValue("description", Description);
            writer.WriteByteArrayValue("detectionScriptContent", DetectionScriptContent);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>("detectionScriptParameters", DetectionScriptParameters);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.DeviceHealthScriptType>("deviceHealthScriptType", DeviceHealthScriptType);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DeviceHealthScriptDeviceState>("deviceRunStates", DeviceRunStates);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("enforceSignatureCheck", EnforceSignatureCheck);
            writer.WriteStringValue("highestAvailableVersion", HighestAvailableVersion);
            writer.WriteBoolValue("isGlobalScript", IsGlobalScript);
            writer.WriteStringValue("publisher", Publisher);
            writer.WriteByteArrayValue("remediationScriptContent", RemediationScriptContent);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.DeviceHealthScriptParameter>("remediationScriptParameters", RemediationScriptParameters);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
            writer.WriteBoolValue("runAs32Bit", RunAs32Bit);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.RunAsAccountType>("runAsAccount", RunAsAccount);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.DeviceHealthScriptRunSummary>("runSummary", RunSummary);
            writer.WriteStringValue("version", Version);
        }
    }
}
