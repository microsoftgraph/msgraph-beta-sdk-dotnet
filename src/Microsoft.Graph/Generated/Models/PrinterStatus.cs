// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class PrinterStatus : IAdditionalDataHolder, IBackedModel, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData {
            get { return BackingStore?.Get<IDictionary<string, object>>("AdditionalData"); }
            set { BackingStore?.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>A human-readable description of the printer&apos;s current processing state. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The list of details describing why the printer is in the current state. Valid values are described in the following table. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrinterProcessingStateDetail?>? Details {
            get { return BackingStore?.Get<List<PrinterProcessingStateDetail?>?>("details"); }
            set { BackingStore?.Set("details", value); }
        }
#nullable restore
#else
        public List<PrinterProcessingStateDetail?> Details {
            get { return BackingStore?.Get<List<PrinterProcessingStateDetail?>>("details"); }
            set { BackingStore?.Set("details", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The processingState property</summary>
        public PrinterProcessingState? ProcessingState {
            get { return BackingStore?.Get<PrinterProcessingState?>("processingState"); }
            set { BackingStore?.Set("processingState", value); }
        }
        /// <summary>The processingStateDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessingStateDescription {
            get { return BackingStore?.Get<string?>("processingStateDescription"); }
            set { BackingStore?.Set("processingStateDescription", value); }
        }
#nullable restore
#else
        public string ProcessingStateDescription {
            get { return BackingStore?.Get<string>("processingStateDescription"); }
            set { BackingStore?.Set("processingStateDescription", value); }
        }
#endif
        /// <summary>The processingStateReasons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrinterProcessingStateReason?>? ProcessingStateReasons {
            get { return BackingStore?.Get<List<PrinterProcessingStateReason?>?>("processingStateReasons"); }
            set { BackingStore?.Set("processingStateReasons", value); }
        }
#nullable restore
#else
        public List<PrinterProcessingStateReason?> ProcessingStateReasons {
            get { return BackingStore?.Get<List<PrinterProcessingStateReason?>>("processingStateReasons"); }
            set { BackingStore?.Set("processingStateReasons", value); }
        }
#endif
        /// <summary>The state property</summary>
        public PrinterProcessingState? State {
            get { return BackingStore?.Get<PrinterProcessingState?>("state"); }
            set { BackingStore?.Set("state", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="PrinterStatus"/> and sets the default values.
        /// </summary>
        public PrinterStatus()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PrinterStatus"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PrinterStatus CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PrinterStatus();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"description", n => { Description = n.GetStringValue(); } },
                {"details", n => { Details = n.GetCollectionOfEnumValues<PrinterProcessingStateDetail>()?.ToList(); } },
                {"@odata.type", n => { OdataType = n.GetStringValue(); } },
                {"processingState", n => { ProcessingState = n.GetEnumValue<PrinterProcessingState>(); } },
                {"processingStateDescription", n => { ProcessingStateDescription = n.GetStringValue(); } },
                {"processingStateReasons", n => { ProcessingStateReasons = n.GetCollectionOfEnumValues<PrinterProcessingStateReason>()?.ToList(); } },
                {"state", n => { State = n.GetEnumValue<PrinterProcessingState>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfEnumValues<PrinterProcessingStateDetail>("details", Details);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteEnumValue<PrinterProcessingState>("processingState", ProcessingState);
            writer.WriteStringValue("processingStateDescription", ProcessingStateDescription);
            writer.WriteCollectionOfEnumValues<PrinterProcessingStateReason>("processingStateReasons", ProcessingStateReasons);
            writer.WriteEnumValue<PrinterProcessingState>("state", State);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
