// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class CloudPcManagementGroupAssignmentTarget : global::Microsoft.Graph.Beta.Models.CloudPcManagementAssignmentTarget, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The allotmentDisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AllotmentDisplayName
        {
            get { return BackingStore?.Get<string?>("allotmentDisplayName"); }
            set { BackingStore?.Set("allotmentDisplayName", value); }
        }
#nullable restore
#else
        public string AllotmentDisplayName
        {
            get { return BackingStore?.Get<string>("allotmentDisplayName"); }
            set { BackingStore?.Set("allotmentDisplayName", value); }
        }
#endif
        /// <summary>The allotmentLicensesCount property</summary>
        public int? AllotmentLicensesCount
        {
            get { return BackingStore?.Get<int?>("allotmentLicensesCount"); }
            set { BackingStore?.Set("allotmentLicensesCount", value); }
        }
        /// <summary>The ID of the target group for the assignment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupId
        {
            get { return BackingStore?.Get<string?>("groupId"); }
            set { BackingStore?.Set("groupId", value); }
        }
#nullable restore
#else
        public string GroupId
        {
            get { return BackingStore?.Get<string>("groupId"); }
            set { BackingStore?.Set("groupId", value); }
        }
#endif
        /// <summary>The unique identifier for the service plan that indicates which size of the Cloud PC to provision for the user. Use a null value, when the provisioningType is dedicated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePlanId
        {
            get { return BackingStore?.Get<string?>("servicePlanId"); }
            set { BackingStore?.Set("servicePlanId", value); }
        }
#nullable restore
#else
        public string ServicePlanId
        {
            get { return BackingStore?.Get<string>("servicePlanId"); }
            set { BackingStore?.Set("servicePlanId", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.CloudPcManagementGroupAssignmentTarget"/> and sets the default values.
        /// </summary>
        public CloudPcManagementGroupAssignmentTarget() : base()
        {
            OdataType = "#microsoft.graph.cloudPcManagementGroupAssignmentTarget";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CloudPcManagementGroupAssignmentTarget"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.CloudPcManagementGroupAssignmentTarget CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CloudPcManagementGroupAssignmentTarget();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allotmentDisplayName", n => { AllotmentDisplayName = n.GetStringValue(); } },
                { "allotmentLicensesCount", n => { AllotmentLicensesCount = n.GetIntValue(); } },
                { "groupId", n => { GroupId = n.GetStringValue(); } },
                { "servicePlanId", n => { ServicePlanId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("allotmentDisplayName", AllotmentDisplayName);
            writer.WriteIntValue("allotmentLicensesCount", AllotmentLicensesCount);
            writer.WriteStringValue("groupId", GroupId);
            writer.WriteStringValue("servicePlanId", ServicePlanId);
        }
    }
}
#pragma warning restore CS0618
