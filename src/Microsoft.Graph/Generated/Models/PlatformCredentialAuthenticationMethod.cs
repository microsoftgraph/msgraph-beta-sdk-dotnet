// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class PlatformCredentialAuthenticationMethod : AuthenticationMethod, IParsable {
        /// <summary>The createdDateTime property</summary>
        public DateTimeOffset? CreatedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The device property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Device? Device {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Device?>("device"); }
            set { BackingStore?.Set("device", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Device Device {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Device>("device"); }
            set { BackingStore?.Set("device", value); }
        }
#endif
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The keyStrength property</summary>
        public AuthenticationMethodKeyStrength? KeyStrength {
            get { return BackingStore?.Get<AuthenticationMethodKeyStrength?>("keyStrength"); }
            set { BackingStore?.Set("keyStrength", value); }
        }
        /// <summary>The platform property</summary>
        public AuthenticationMethodPlatform? Platform {
            get { return BackingStore?.Get<AuthenticationMethodPlatform?>("platform"); }
            set { BackingStore?.Set("platform", value); }
        }
        /// <summary>
        /// Instantiates a new platformCredentialAuthenticationMethod and sets the default values.
        /// </summary>
        public PlatformCredentialAuthenticationMethod() : base() {
            OdataType = "#microsoft.graph.platformCredentialAuthenticationMethod";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new PlatformCredentialAuthenticationMethod CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PlatformCredentialAuthenticationMethod();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                {"device", n => { Device = n.GetObjectValue<Microsoft.Graph.Beta.Models.Device>(Microsoft.Graph.Beta.Models.Device.CreateFromDiscriminatorValue); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"keyStrength", n => { KeyStrength = n.GetEnumValue<AuthenticationMethodKeyStrength>(); } },
                {"platform", n => { Platform = n.GetEnumValue<AuthenticationMethodPlatform>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Device>("device", Device);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteEnumValue<AuthenticationMethodKeyStrength>("keyStrength", KeyStrength);
            writer.WriteEnumValue<AuthenticationMethodPlatform>("platform", Platform);
        }
    }
}
