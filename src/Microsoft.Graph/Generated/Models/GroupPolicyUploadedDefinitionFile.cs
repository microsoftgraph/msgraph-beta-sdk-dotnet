// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    /// <summary>
    /// The entity represents an ADMX (Administrative Template) XML file uploaded by Administrator. The ADMX file contains a collection of group policy definitions and their locations by category path. The group policy definition file also contains the languages supported as determined by the language dependent ADML (Administrative Template) language files.
    /// </summary>
    public class GroupPolicyUploadedDefinitionFile : GroupPolicyDefinitionFile, IParsable 
    {
        /// <summary>The contents of the uploaded ADMX file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? Content {
            get { return BackingStore?.Get<byte[]?>("content"); }
            set { BackingStore?.Set("content", value); }
        }
#nullable restore
#else
        public byte[] Content {
            get { return BackingStore?.Get<byte[]>("content"); }
            set { BackingStore?.Set("content", value); }
        }
#endif
        /// <summary>The default language of the uploaded ADMX file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultLanguageCode {
            get { return BackingStore?.Get<string?>("defaultLanguageCode"); }
            set { BackingStore?.Set("defaultLanguageCode", value); }
        }
#nullable restore
#else
        public string DefaultLanguageCode {
            get { return BackingStore?.Get<string>("defaultLanguageCode"); }
            set { BackingStore?.Set("defaultLanguageCode", value); }
        }
#endif
        /// <summary>The list of operations on the uploaded ADMX file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<GroupPolicyOperation>? GroupPolicyOperations {
            get { return BackingStore?.Get<List<GroupPolicyOperation>?>("groupPolicyOperations"); }
            set { BackingStore?.Set("groupPolicyOperations", value); }
        }
#nullable restore
#else
        public List<GroupPolicyOperation> GroupPolicyOperations {
            get { return BackingStore?.Get<List<GroupPolicyOperation>>("groupPolicyOperations"); }
            set { BackingStore?.Set("groupPolicyOperations", value); }
        }
#endif
        /// <summary>The list of ADML files associated with the uploaded ADMX file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<GroupPolicyUploadedLanguageFile>? GroupPolicyUploadedLanguageFiles {
            get { return BackingStore?.Get<List<GroupPolicyUploadedLanguageFile>?>("groupPolicyUploadedLanguageFiles"); }
            set { BackingStore?.Set("groupPolicyUploadedLanguageFiles", value); }
        }
#nullable restore
#else
        public List<GroupPolicyUploadedLanguageFile> GroupPolicyUploadedLanguageFiles {
            get { return BackingStore?.Get<List<GroupPolicyUploadedLanguageFile>>("groupPolicyUploadedLanguageFiles"); }
            set { BackingStore?.Set("groupPolicyUploadedLanguageFiles", value); }
        }
#endif
        /// <summary>Type of Group Policy uploaded definition file status.</summary>
        public GroupPolicyUploadedDefinitionFileStatus? Status {
            get { return BackingStore?.Get<GroupPolicyUploadedDefinitionFileStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>The uploaded time of the uploaded ADMX file.</summary>
        public DateTimeOffset? UploadDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("uploadDateTime"); }
            set { BackingStore?.Set("uploadDateTime", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="GroupPolicyUploadedDefinitionFile"/> and sets the default values.
        /// </summary>
        public GroupPolicyUploadedDefinitionFile() : base()
        {
            OdataType = "#microsoft.graph.groupPolicyUploadedDefinitionFile";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="GroupPolicyUploadedDefinitionFile"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new GroupPolicyUploadedDefinitionFile CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new GroupPolicyUploadedDefinitionFile();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"content", n => { Content = n.GetByteArrayValue(); } },
                {"defaultLanguageCode", n => { DefaultLanguageCode = n.GetStringValue(); } },
                {"groupPolicyOperations", n => { GroupPolicyOperations = n.GetCollectionOfObjectValues<GroupPolicyOperation>(GroupPolicyOperation.CreateFromDiscriminatorValue)?.ToList(); } },
                {"groupPolicyUploadedLanguageFiles", n => { GroupPolicyUploadedLanguageFiles = n.GetCollectionOfObjectValues<GroupPolicyUploadedLanguageFile>(GroupPolicyUploadedLanguageFile.CreateFromDiscriminatorValue)?.ToList(); } },
                {"status", n => { Status = n.GetEnumValue<GroupPolicyUploadedDefinitionFileStatus>(); } },
                {"uploadDateTime", n => { UploadDateTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteByteArrayValue("content", Content);
            writer.WriteStringValue("defaultLanguageCode", DefaultLanguageCode);
            writer.WriteCollectionOfObjectValues<GroupPolicyOperation>("groupPolicyOperations", GroupPolicyOperations);
            writer.WriteCollectionOfObjectValues<GroupPolicyUploadedLanguageFile>("groupPolicyUploadedLanguageFiles", GroupPolicyUploadedLanguageFiles);
            writer.WriteEnumValue<GroupPolicyUploadedDefinitionFileStatus>("status", Status);
            writer.WriteDateTimeOffsetValue("uploadDateTime", UploadDateTime);
        }
    }
}
