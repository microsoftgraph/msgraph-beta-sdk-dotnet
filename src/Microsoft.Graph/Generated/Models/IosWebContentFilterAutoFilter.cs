// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Represents an iOS Web Content Filter setting type, which enables iOS automatic filter feature and allows for additional URL access control. When constructed with no property values, the iOS device will enable the automatic filter regardless.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IosWebContentFilterAutoFilter : global::Microsoft.Graph.Beta.Models.IosWebContentFilterBase, IParsable
    {
        /// <summary>Additional URLs allowed for access</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowedUrls
        {
            get { return BackingStore?.Get<List<string>?>("allowedUrls"); }
            set { BackingStore?.Set("allowedUrls", value); }
        }
#nullable restore
#else
        public List<string> AllowedUrls
        {
            get { return BackingStore?.Get<List<string>>("allowedUrls"); }
            set { BackingStore?.Set("allowedUrls", value); }
        }
#endif
        /// <summary>Additional URLs blocked for access</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BlockedUrls
        {
            get { return BackingStore?.Get<List<string>?>("blockedUrls"); }
            set { BackingStore?.Set("blockedUrls", value); }
        }
#nullable restore
#else
        public List<string> BlockedUrls
        {
            get { return BackingStore?.Get<List<string>>("blockedUrls"); }
            set { BackingStore?.Set("blockedUrls", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.IosWebContentFilterAutoFilter"/> and sets the default values.
        /// </summary>
        public IosWebContentFilterAutoFilter() : base()
        {
            OdataType = "#microsoft.graph.iosWebContentFilterAutoFilter";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.IosWebContentFilterAutoFilter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.IosWebContentFilterAutoFilter CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.IosWebContentFilterAutoFilter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowedUrls", n => { AllowedUrls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "blockedUrls", n => { BlockedUrls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfPrimitiveValues<string>("allowedUrls", AllowedUrls);
            writer.WriteCollectionOfPrimitiveValues<string>("blockedUrls", BlockedUrls);
        }
    }
}
#pragma warning restore CS0618
