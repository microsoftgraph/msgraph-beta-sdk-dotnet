// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Domain : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Indicates the configured authentication type for the domain. The value is either Managed or Federated. Managed indicates a cloud managed domain where Microsoft Entra ID performs user authentication. Federated indicates authentication is federated with an identity provider such as the tenant&apos;s on-premises Active Directory via Active Directory Federation Services. Not nullable.  To update this property in delegated scenarios, the calling app must be assigned the Directory.AccessAsUser.All delegated permission.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthenticationType
        {
            get { return BackingStore?.Get<string?>("authenticationType"); }
            set { BackingStore?.Set("authenticationType", value); }
        }
#nullable restore
#else
        public string AuthenticationType
        {
            get { return BackingStore?.Get<string>("authenticationType"); }
            set { BackingStore?.Set("authenticationType", value); }
        }
#endif
        /// <summary>This property is always null except when the verify action is used. When the verify action is used, a domain entity is returned in the response. The availabilityStatus property of the domain entity in the response is either AvailableImmediately or EmailVerifiedDomainTakeoverScheduled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvailabilityStatus
        {
            get { return BackingStore?.Get<string?>("availabilityStatus"); }
            set { BackingStore?.Set("availabilityStatus", value); }
        }
#nullable restore
#else
        public string AvailabilityStatus
        {
            get { return BackingStore?.Get<string>("availabilityStatus"); }
            set { BackingStore?.Set("availabilityStatus", value); }
        }
#endif
        /// <summary>The objects such as users and groups that reference the domain ID. Read-only, Nullable. Does not support $expand. Supports $filter by the OData type of objects returned. For example, /domains/{domainId}/domainNameReferences/microsoft.graph.user and /domains/{domainId}/domainNameReferences/microsoft.graph.group.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? DomainNameReferences
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("domainNameReferences"); }
            set { BackingStore?.Set("domainNameReferences", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> DomainNameReferences
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("domainNameReferences"); }
            set { BackingStore?.Set("domainNameReferences", value); }
        }
#endif
        /// <summary>Domain settings configured by customer when federated with Microsoft Entra ID. Does not support $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.InternalDomainFederation>? FederationConfiguration
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.InternalDomainFederation>?>("federationConfiguration"); }
            set { BackingStore?.Set("federationConfiguration", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.InternalDomainFederation> FederationConfiguration
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.InternalDomainFederation>>("federationConfiguration"); }
            set { BackingStore?.Set("federationConfiguration", value); }
        }
#endif
        /// <summary>The value of the property is false if the DNS record management of the domain is delegated to Microsoft 365. Otherwise, the value is true. Not nullable.</summary>
        public bool? IsAdminManaged
        {
            get { return BackingStore?.Get<bool?>("isAdminManaged"); }
            set { BackingStore?.Set("isAdminManaged", value); }
        }
        /// <summary>true for the default domain that is used for user creation. There&apos;s only one default domain per company. Not nullable.</summary>
        public bool? IsDefault
        {
            get { return BackingStore?.Get<bool?>("isDefault"); }
            set { BackingStore?.Set("isDefault", value); }
        }
        /// <summary>true for the initial domain created by Microsoft Online Services. For example, contoso.onmicrosoft.com. There&apos;s only one initial domain per company. Not nullable.</summary>
        public bool? IsInitial
        {
            get { return BackingStore?.Get<bool?>("isInitial"); }
            set { BackingStore?.Set("isInitial", value); }
        }
        /// <summary>true if the domain is a verified root domain. Otherwise, false if the domain is a subdomain or unverified. Not nullable.</summary>
        public bool? IsRoot
        {
            get { return BackingStore?.Get<bool?>("isRoot"); }
            set { BackingStore?.Set("isRoot", value); }
        }
        /// <summary>true for verified domains. Not nullable.</summary>
        public bool? IsVerified
        {
            get { return BackingStore?.Get<bool?>("isVerified"); }
            set { BackingStore?.Set("isVerified", value); }
        }
        /// <summary>Specifies the number of days before a user receives a password expiry notification. 14 days by default.</summary>
        public int? PasswordNotificationWindowInDays
        {
            get { return BackingStore?.Get<int?>("passwordNotificationWindowInDays"); }
            set { BackingStore?.Set("passwordNotificationWindowInDays", value); }
        }
        /// <summary>Specifies the length of time that a password is valid before it must be changed. 90 days by default.</summary>
        public int? PasswordValidityPeriodInDays
        {
            get { return BackingStore?.Get<int?>("passwordValidityPeriodInDays"); }
            set { BackingStore?.Set("passwordValidityPeriodInDays", value); }
        }
        /// <summary>Root domain of a subdomain. Read-only, Nullable. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Domain? RootDomain
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Domain?>("rootDomain"); }
            set { BackingStore?.Set("rootDomain", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Domain RootDomain
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Domain>("rootDomain"); }
            set { BackingStore?.Set("rootDomain", value); }
        }
#endif
        /// <summary>DNS records the customer adds to the DNS zone file of the domain before the domain can be used by Microsoft Online services. Read-only, Nullable. Does not support $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>? ServiceConfigurationRecords
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>?>("serviceConfigurationRecords"); }
            set { BackingStore?.Set("serviceConfigurationRecords", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DomainDnsRecord> ServiceConfigurationRecords
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>>("serviceConfigurationRecords"); }
            set { BackingStore?.Set("serviceConfigurationRecords", value); }
        }
#endif
        /// <summary>The sharedEmailDomainInvitations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.SharedEmailDomainInvitation>? SharedEmailDomainInvitations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.SharedEmailDomainInvitation>?>("sharedEmailDomainInvitations"); }
            set { BackingStore?.Set("sharedEmailDomainInvitations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.SharedEmailDomainInvitation> SharedEmailDomainInvitations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.SharedEmailDomainInvitation>>("sharedEmailDomainInvitations"); }
            set { BackingStore?.Set("sharedEmailDomainInvitations", value); }
        }
#endif
        /// <summary>Status of asynchronous operations scheduled for the domain.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.DomainState? State
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DomainState?>("state"); }
            set { BackingStore?.Set("state", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.DomainState State
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DomainState>("state"); }
            set { BackingStore?.Set("state", value); }
        }
#endif
        /// <summary>The capabilities assigned to the domain. Can include 0, 1, or more of following values: Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline,SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune, CustomUrlDomain. The values that you can add or remove using the API include: Email, OfficeCommunicationsOnline, Yammer, and CustomUrlDomain. Not nullable.  For more information about CustomUrlDomain, see Custom URL domains in external tenants.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedServices
        {
            get { return BackingStore?.Get<List<string>?>("supportedServices"); }
            set { BackingStore?.Set("supportedServices", value); }
        }
#nullable restore
#else
        public List<string> SupportedServices
        {
            get { return BackingStore?.Get<List<string>>("supportedServices"); }
            set { BackingStore?.Set("supportedServices", value); }
        }
#endif
        /// <summary>DNS records that the customer adds to the DNS zone file of the domain before the customer can complete domain ownership verification with Microsoft Entra ID. Read-only, Nullable. Does not support $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>? VerificationDnsRecords
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>?>("verificationDnsRecords"); }
            set { BackingStore?.Set("verificationDnsRecords", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DomainDnsRecord> VerificationDnsRecords
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>>("verificationDnsRecords"); }
            set { BackingStore?.Set("verificationDnsRecords", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Domain"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Domain CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Domain();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "authenticationType", n => { AuthenticationType = n.GetStringValue(); } },
                { "availabilityStatus", n => { AvailabilityStatus = n.GetStringValue(); } },
                { "domainNameReferences", n => { DomainNameReferences = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "federationConfiguration", n => { FederationConfiguration = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.InternalDomainFederation>(global::Microsoft.Graph.Beta.Models.InternalDomainFederation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "isAdminManaged", n => { IsAdminManaged = n.GetBoolValue(); } },
                { "isDefault", n => { IsDefault = n.GetBoolValue(); } },
                { "isInitial", n => { IsInitial = n.GetBoolValue(); } },
                { "isRoot", n => { IsRoot = n.GetBoolValue(); } },
                { "isVerified", n => { IsVerified = n.GetBoolValue(); } },
                { "passwordNotificationWindowInDays", n => { PasswordNotificationWindowInDays = n.GetIntValue(); } },
                { "passwordValidityPeriodInDays", n => { PasswordValidityPeriodInDays = n.GetIntValue(); } },
                { "rootDomain", n => { RootDomain = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Domain>(global::Microsoft.Graph.Beta.Models.Domain.CreateFromDiscriminatorValue); } },
                { "serviceConfigurationRecords", n => { ServiceConfigurationRecords = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>(global::Microsoft.Graph.Beta.Models.DomainDnsRecord.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sharedEmailDomainInvitations", n => { SharedEmailDomainInvitations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.SharedEmailDomainInvitation>(global::Microsoft.Graph.Beta.Models.SharedEmailDomainInvitation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "state", n => { State = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.DomainState>(global::Microsoft.Graph.Beta.Models.DomainState.CreateFromDiscriminatorValue); } },
                { "supportedServices", n => { SupportedServices = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "verificationDnsRecords", n => { VerificationDnsRecords = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>(global::Microsoft.Graph.Beta.Models.DomainDnsRecord.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("authenticationType", AuthenticationType);
            writer.WriteStringValue("availabilityStatus", AvailabilityStatus);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("domainNameReferences", DomainNameReferences);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.InternalDomainFederation>("federationConfiguration", FederationConfiguration);
            writer.WriteBoolValue("isAdminManaged", IsAdminManaged);
            writer.WriteBoolValue("isDefault", IsDefault);
            writer.WriteBoolValue("isInitial", IsInitial);
            writer.WriteBoolValue("isRoot", IsRoot);
            writer.WriteBoolValue("isVerified", IsVerified);
            writer.WriteIntValue("passwordNotificationWindowInDays", PasswordNotificationWindowInDays);
            writer.WriteIntValue("passwordValidityPeriodInDays", PasswordValidityPeriodInDays);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Domain>("rootDomain", RootDomain);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>("serviceConfigurationRecords", ServiceConfigurationRecords);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.SharedEmailDomainInvitation>("sharedEmailDomainInvitations", SharedEmailDomainInvitations);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.DomainState>("state", State);
            writer.WriteCollectionOfPrimitiveValues<string>("supportedServices", SupportedServices);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DomainDnsRecord>("verificationDnsRecords", VerificationDnsRecords);
        }
    }
}
#pragma warning restore CS0618
