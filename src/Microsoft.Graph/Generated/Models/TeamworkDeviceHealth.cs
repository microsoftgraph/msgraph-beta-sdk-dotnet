// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class TeamworkDeviceHealth : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The connection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkConnection? Connection
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkConnection?>("connection"); }
            set { BackingStore?.Set("connection", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkConnection Connection
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkConnection>("connection"); }
            set { BackingStore?.Set("connection", value); }
        }
#endif
        /// <summary>Identity of the user who created the device health document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.IdentitySet? CreatedBy
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentitySet?>("createdBy"); }
            set { BackingStore?.Set("createdBy", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.IdentitySet CreatedBy
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentitySet>("createdBy"); }
            set { BackingStore?.Set("createdBy", value); }
        }
#endif
        /// <summary>The UTC date and time when the device health document was created.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Health details about the device hardware.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkHardwareHealth? HardwareHealth
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkHardwareHealth?>("hardwareHealth"); }
            set { BackingStore?.Set("hardwareHealth", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkHardwareHealth HardwareHealth
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkHardwareHealth>("hardwareHealth"); }
            set { BackingStore?.Set("hardwareHealth", value); }
        }
#endif
        /// <summary>Identity of the user who last modified the device health details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.IdentitySet? LastModifiedBy
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentitySet?>("lastModifiedBy"); }
            set { BackingStore?.Set("lastModifiedBy", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.IdentitySet LastModifiedBy
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentitySet>("lastModifiedBy"); }
            set { BackingStore?.Set("lastModifiedBy", value); }
        }
#endif
        /// <summary>The UTC date and time when the device health detail was last modified.</summary>
        public DateTimeOffset? LastModifiedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastModifiedDateTime"); }
            set { BackingStore?.Set("lastModifiedDateTime", value); }
        }
        /// <summary>The login status of Microsoft Teams, Skype for Business, and Exchange.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkLoginStatus? LoginStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkLoginStatus?>("loginStatus"); }
            set { BackingStore?.Set("loginStatus", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkLoginStatus LoginStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkLoginStatus>("loginStatus"); }
            set { BackingStore?.Set("loginStatus", value); }
        }
#endif
        /// <summary>Health details about all peripherals (for example, speaker and microphone) attached to a device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkPeripheralsHealth? PeripheralsHealth
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkPeripheralsHealth?>("peripheralsHealth"); }
            set { BackingStore?.Set("peripheralsHealth", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkPeripheralsHealth PeripheralsHealth
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkPeripheralsHealth>("peripheralsHealth"); }
            set { BackingStore?.Set("peripheralsHealth", value); }
        }
#endif
        /// <summary>Software updates available for the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth? SoftwareUpdateHealth
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth?>("softwareUpdateHealth"); }
            set { BackingStore?.Set("softwareUpdateHealth", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth SoftwareUpdateHealth
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth>("softwareUpdateHealth"); }
            set { BackingStore?.Set("softwareUpdateHealth", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.TeamworkDeviceHealth"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.TeamworkDeviceHealth CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.TeamworkDeviceHealth();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "connection", n => { Connection = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkConnection>(Microsoft.Graph.Beta.Models.TeamworkConnection.CreateFromDiscriminatorValue); } },
                { "createdBy", n => { CreatedBy = n.GetObjectValue<Microsoft.Graph.Beta.Models.IdentitySet>(Microsoft.Graph.Beta.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "hardwareHealth", n => { HardwareHealth = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkHardwareHealth>(Microsoft.Graph.Beta.Models.TeamworkHardwareHealth.CreateFromDiscriminatorValue); } },
                { "lastModifiedBy", n => { LastModifiedBy = n.GetObjectValue<Microsoft.Graph.Beta.Models.IdentitySet>(Microsoft.Graph.Beta.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "loginStatus", n => { LoginStatus = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkLoginStatus>(Microsoft.Graph.Beta.Models.TeamworkLoginStatus.CreateFromDiscriminatorValue); } },
                { "peripheralsHealth", n => { PeripheralsHealth = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkPeripheralsHealth>(Microsoft.Graph.Beta.Models.TeamworkPeripheralsHealth.CreateFromDiscriminatorValue); } },
                { "softwareUpdateHealth", n => { SoftwareUpdateHealth = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth>(Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkConnection>("connection", Connection);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.IdentitySet>("createdBy", CreatedBy);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkHardwareHealth>("hardwareHealth", HardwareHealth);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.IdentitySet>("lastModifiedBy", LastModifiedBy);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkLoginStatus>("loginStatus", LoginStatus);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkPeripheralsHealth>("peripheralsHealth", PeripheralsHealth);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth>("softwareUpdateHealth", SoftwareUpdateHealth);
        }
    }
}
