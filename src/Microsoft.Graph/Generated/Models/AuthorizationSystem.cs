// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class AuthorizationSystem : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>ID of the authorization system retrieved from the customer cloud environment. Supports $filter(eq, contains) and $orderBy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorizationSystemId
        {
            get { return BackingStore?.Get<string?>("authorizationSystemId"); }
            set { BackingStore?.Set("authorizationSystemId", value); }
        }
#nullable restore
#else
        public string AuthorizationSystemId
        {
            get { return BackingStore?.Get<string>("authorizationSystemId"); }
            set { BackingStore?.Set("authorizationSystemId", value); }
        }
#endif
        /// <summary>Name of the authorization system detected after onboarding. Supports $filter(eq,contains) and $orderBy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorizationSystemName
        {
            get { return BackingStore?.Get<string?>("authorizationSystemName"); }
            set { BackingStore?.Set("authorizationSystemName", value); }
        }
#nullable restore
#else
        public string AuthorizationSystemName
        {
            get { return BackingStore?.Get<string>("authorizationSystemName"); }
            set { BackingStore?.Set("authorizationSystemName", value); }
        }
#endif
        /// <summary>The type of authorization system. Can be gcp, azure, or aws. Supports $filter(eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorizationSystemType
        {
            get { return BackingStore?.Get<string?>("authorizationSystemType"); }
            set { BackingStore?.Set("authorizationSystemType", value); }
        }
#nullable restore
#else
        public string AuthorizationSystemType
        {
            get { return BackingStore?.Get<string>("authorizationSystemType"); }
            set { BackingStore?.Set("authorizationSystemType", value); }
        }
#endif
        /// <summary>Defines how and whether Permissions Management collects data from the onboarded authorization system. Supports $filter (eq) as follows:  $filter=dataCollectionInfo/entitlements/permissionsModificationCapability and $filter=dataCollectionInfo/entitlements/status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.DataCollectionInfo? DataCollectionInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.DataCollectionInfo?>("dataCollectionInfo"); }
            set { BackingStore?.Set("dataCollectionInfo", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.DataCollectionInfo DataCollectionInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.DataCollectionInfo>("dataCollectionInfo"); }
            set { BackingStore?.Set("dataCollectionInfo", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.AuthorizationSystem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.AuthorizationSystem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.awsAuthorizationSystem" => new Microsoft.Graph.Beta.Models.AwsAuthorizationSystem(),
                "#microsoft.graph.azureAuthorizationSystem" => new Microsoft.Graph.Beta.Models.AzureAuthorizationSystem(),
                "#microsoft.graph.gcpAuthorizationSystem" => new Microsoft.Graph.Beta.Models.GcpAuthorizationSystem(),
                _ => new Microsoft.Graph.Beta.Models.AuthorizationSystem(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "authorizationSystemId", n => { AuthorizationSystemId = n.GetStringValue(); } },
                { "authorizationSystemName", n => { AuthorizationSystemName = n.GetStringValue(); } },
                { "authorizationSystemType", n => { AuthorizationSystemType = n.GetStringValue(); } },
                { "dataCollectionInfo", n => { DataCollectionInfo = n.GetObjectValue<Microsoft.Graph.Beta.Models.DataCollectionInfo>(Microsoft.Graph.Beta.Models.DataCollectionInfo.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("authorizationSystemId", AuthorizationSystemId);
            writer.WriteStringValue("authorizationSystemName", AuthorizationSystemName);
            writer.WriteStringValue("authorizationSystemType", AuthorizationSystemType);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.DataCollectionInfo>("dataCollectionInfo", DataCollectionInfo);
        }
    }
}
