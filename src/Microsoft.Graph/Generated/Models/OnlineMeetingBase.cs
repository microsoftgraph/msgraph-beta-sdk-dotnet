// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OnlineMeetingBase : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Indicates whether attendees can turn on their camera.</summary>
        public bool? AllowAttendeeToEnableCamera
        {
            get { return BackingStore?.Get<bool?>("allowAttendeeToEnableCamera"); }
            set { BackingStore?.Set("allowAttendeeToEnableCamera", value); }
        }
        /// <summary>Indicates whether attendees can turn on their microphone.</summary>
        public bool? AllowAttendeeToEnableMic
        {
            get { return BackingStore?.Get<bool?>("allowAttendeeToEnableMic"); }
            set { BackingStore?.Set("allowAttendeeToEnableMic", value); }
        }
        /// <summary>Indicates whether breakout rooms are enabled for the meeting.</summary>
        public bool? AllowBreakoutRooms
        {
            get { return BackingStore?.Get<bool?>("allowBreakoutRooms"); }
            set { BackingStore?.Set("allowBreakoutRooms", value); }
        }
        /// <summary>Specifies who can be a presenter in a meeting. Possible values are: everyone, organization, roleIsPresenter, organizer, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.OnlineMeetingPresenters? AllowedPresenters
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OnlineMeetingPresenters?>("allowedPresenters"); }
            set { BackingStore?.Set("allowedPresenters", value); }
        }
        /// <summary>Indicates whether live share is enabled for the meeting. Possible values are: enabled, disabled, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.MeetingLiveShareOptions? AllowLiveShare
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MeetingLiveShareOptions?>("allowLiveShare"); }
            set { BackingStore?.Set("allowLiveShare", value); }
        }
        /// <summary>Specifies the mode of meeting chat. Possible values are: enabled, disabled, limited, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.MeetingChatMode? AllowMeetingChat
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MeetingChatMode?>("allowMeetingChat"); }
            set { BackingStore?.Set("allowMeetingChat", value); }
        }
        /// <summary>Specifies if participants are allowed to rename themselves in an instance of the meeting.</summary>
        public bool? AllowParticipantsToChangeName
        {
            get { return BackingStore?.Get<bool?>("allowParticipantsToChangeName"); }
            set { BackingStore?.Set("allowParticipantsToChangeName", value); }
        }
        /// <summary>Indicates whether PowerPoint live is enabled for the meeting.</summary>
        public bool? AllowPowerPointSharing
        {
            get { return BackingStore?.Get<bool?>("allowPowerPointSharing"); }
            set { BackingStore?.Set("allowPowerPointSharing", value); }
        }
        /// <summary>Indicates whether recording is enabled for the meeting.</summary>
        public bool? AllowRecording
        {
            get { return BackingStore?.Get<bool?>("allowRecording"); }
            set { BackingStore?.Set("allowRecording", value); }
        }
        /// <summary>Indicates if Teams reactions are enabled for the meeting.</summary>
        public bool? AllowTeamworkReactions
        {
            get { return BackingStore?.Get<bool?>("allowTeamworkReactions"); }
            set { BackingStore?.Set("allowTeamworkReactions", value); }
        }
        /// <summary>Indicates whether transcription is enabled for the meeting.</summary>
        public bool? AllowTranscription
        {
            get { return BackingStore?.Get<bool?>("allowTranscription"); }
            set { BackingStore?.Set("allowTranscription", value); }
        }
        /// <summary>Indicates whether whiteboard is enabled for the meeting.</summary>
        public bool? AllowWhiteboard
        {
            get { return BackingStore?.Get<bool?>("allowWhiteboard"); }
            set { BackingStore?.Set("allowWhiteboard", value); }
        }
        /// <summary>Specifies whose identity is anonymized in the meeting. Possible values are: attendee. The attendee value can&apos;t be removed through a PATCH operation once added.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.OnlineMeetingRole?>? AnonymizeIdentityForRoles
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OnlineMeetingRole?>?>("anonymizeIdentityForRoles"); }
            set { BackingStore?.Set("anonymizeIdentityForRoles", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.OnlineMeetingRole?> AnonymizeIdentityForRoles
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OnlineMeetingRole?>>("anonymizeIdentityForRoles"); }
            set { BackingStore?.Set("anonymizeIdentityForRoles", value); }
        }
#endif
        /// <summary>The attendance reports of an online meeting. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.MeetingAttendanceReport>? AttendanceReports
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MeetingAttendanceReport>?>("attendanceReports"); }
            set { BackingStore?.Set("attendanceReports", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.MeetingAttendanceReport> AttendanceReports
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MeetingAttendanceReport>>("attendanceReports"); }
            set { BackingStore?.Set("attendanceReports", value); }
        }
#endif
        /// <summary>The phone access (dial-in) information for an online meeting. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.AudioConferencing? AudioConferencing
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AudioConferencing?>("audioConferencing"); }
            set { BackingStore?.Set("audioConferencing", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.AudioConferencing AudioConferencing
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AudioConferencing>("audioConferencing"); }
            set { BackingStore?.Set("audioConferencing", value); }
        }
#endif
        /// <summary>The chat information associated with this online meeting.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ChatInfo? ChatInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ChatInfo?>("chatInfo"); }
            set { BackingStore?.Set("chatInfo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ChatInfo ChatInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ChatInfo>("chatInfo"); }
            set { BackingStore?.Set("chatInfo", value); }
        }
#endif
        /// <summary>The chatRestrictions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ChatRestrictions? ChatRestrictions
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ChatRestrictions?>("chatRestrictions"); }
            set { BackingStore?.Set("chatRestrictions", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ChatRestrictions ChatRestrictions
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ChatRestrictions>("chatRestrictions"); }
            set { BackingStore?.Set("chatRestrictions", value); }
        }
#endif
        /// <summary>The isEndToEndEncryptionEnabled property</summary>
        public bool? IsEndToEndEncryptionEnabled
        {
            get { return BackingStore?.Get<bool?>("isEndToEndEncryptionEnabled"); }
            set { BackingStore?.Set("isEndToEndEncryptionEnabled", value); }
        }
        /// <summary>Indicates whether to announce when callers join or leave.</summary>
        public bool? IsEntryExitAnnounced
        {
            get { return BackingStore?.Get<bool?>("isEntryExitAnnounced"); }
            set { BackingStore?.Set("isEntryExitAnnounced", value); }
        }
        /// <summary>The join information in the language and locale variant specified in &apos;Accept-Language&apos; request HTTP header. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ItemBody? JoinInformation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ItemBody?>("joinInformation"); }
            set { BackingStore?.Set("joinInformation", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ItemBody JoinInformation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ItemBody>("joinInformation"); }
            set { BackingStore?.Set("joinInformation", value); }
        }
#endif
        /// <summary>Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings can&apos;t be modified. To make any changes to this property, the meeting needs to be canceled and a new one needs to be created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.JoinMeetingIdSettings? JoinMeetingIdSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.JoinMeetingIdSettings?>("joinMeetingIdSettings"); }
            set { BackingStore?.Set("joinMeetingIdSettings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.JoinMeetingIdSettings JoinMeetingIdSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.JoinMeetingIdSettings>("joinMeetingIdSettings"); }
            set { BackingStore?.Set("joinMeetingIdSettings", value); }
        }
#endif
        /// <summary>The join URL of the online meeting. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JoinWebUrl
        {
            get { return BackingStore?.Get<string?>("joinWebUrl"); }
            set { BackingStore?.Set("joinWebUrl", value); }
        }
#nullable restore
#else
        public string JoinWebUrl
        {
            get { return BackingStore?.Get<string>("joinWebUrl"); }
            set { BackingStore?.Set("joinWebUrl", value); }
        }
#endif
        /// <summary>Specifies which participants can bypass the meeting lobby.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.LobbyBypassSettings? LobbyBypassSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.LobbyBypassSettings?>("lobbyBypassSettings"); }
            set { BackingStore?.Set("lobbyBypassSettings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.LobbyBypassSettings LobbyBypassSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.LobbyBypassSettings>("lobbyBypassSettings"); }
            set { BackingStore?.Set("lobbyBypassSettings", value); }
        }
#endif
        /// <summary>Indicates whether to record the meeting automatically.</summary>
        public bool? RecordAutomatically
        {
            get { return BackingStore?.Get<bool?>("recordAutomatically"); }
            set { BackingStore?.Set("recordAutomatically", value); }
        }
        /// <summary>Specifies whether meeting chat history is shared with participants.  Possible values are: all, none, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.MeetingChatHistoryDefaultMode? ShareMeetingChatHistoryDefault
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MeetingChatHistoryDefaultMode?>("shareMeetingChatHistoryDefault"); }
            set { BackingStore?.Set("shareMeetingChatHistoryDefault", value); }
        }
        /// <summary>The subject of the online meeting.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject
        {
            get { return BackingStore?.Get<string?>("subject"); }
            set { BackingStore?.Set("subject", value); }
        }
#nullable restore
#else
        public string Subject
        {
            get { return BackingStore?.Get<string>("subject"); }
            set { BackingStore?.Set("subject", value); }
        }
#endif
        /// <summary>The video teleconferencing ID. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoTeleconferenceId
        {
            get { return BackingStore?.Get<string?>("videoTeleconferenceId"); }
            set { BackingStore?.Set("videoTeleconferenceId", value); }
        }
#nullable restore
#else
        public string VideoTeleconferenceId
        {
            get { return BackingStore?.Get<string>("videoTeleconferenceId"); }
            set { BackingStore?.Set("videoTeleconferenceId", value); }
        }
#endif
        /// <summary>Specifies whether the client application should apply a watermark to a content type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.WatermarkProtectionValues? WatermarkProtection
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WatermarkProtectionValues?>("watermarkProtection"); }
            set { BackingStore?.Set("watermarkProtection", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.WatermarkProtectionValues WatermarkProtection
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WatermarkProtectionValues>("watermarkProtection"); }
            set { BackingStore?.Set("watermarkProtection", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.OnlineMeetingBase"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.OnlineMeetingBase CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.onlineMeeting" => new global::Microsoft.Graph.Beta.Models.OnlineMeeting(),
                "#microsoft.graph.virtualEventSession" => new global::Microsoft.Graph.Beta.Models.VirtualEventSession(),
                _ => new global::Microsoft.Graph.Beta.Models.OnlineMeetingBase(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowAttendeeToEnableCamera", n => { AllowAttendeeToEnableCamera = n.GetBoolValue(); } },
                { "allowAttendeeToEnableMic", n => { AllowAttendeeToEnableMic = n.GetBoolValue(); } },
                { "allowBreakoutRooms", n => { AllowBreakoutRooms = n.GetBoolValue(); } },
                { "allowLiveShare", n => { AllowLiveShare = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.MeetingLiveShareOptions>(); } },
                { "allowMeetingChat", n => { AllowMeetingChat = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.MeetingChatMode>(); } },
                { "allowParticipantsToChangeName", n => { AllowParticipantsToChangeName = n.GetBoolValue(); } },
                { "allowPowerPointSharing", n => { AllowPowerPointSharing = n.GetBoolValue(); } },
                { "allowRecording", n => { AllowRecording = n.GetBoolValue(); } },
                { "allowTeamworkReactions", n => { AllowTeamworkReactions = n.GetBoolValue(); } },
                { "allowTranscription", n => { AllowTranscription = n.GetBoolValue(); } },
                { "allowWhiteboard", n => { AllowWhiteboard = n.GetBoolValue(); } },
                { "allowedPresenters", n => { AllowedPresenters = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.OnlineMeetingPresenters>(); } },
                { "anonymizeIdentityForRoles", n => { AnonymizeIdentityForRoles = n.GetCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.OnlineMeetingRole>()?.AsList(); } },
                { "attendanceReports", n => { AttendanceReports = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MeetingAttendanceReport>(global::Microsoft.Graph.Beta.Models.MeetingAttendanceReport.CreateFromDiscriminatorValue)?.AsList(); } },
                { "audioConferencing", n => { AudioConferencing = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.AudioConferencing>(global::Microsoft.Graph.Beta.Models.AudioConferencing.CreateFromDiscriminatorValue); } },
                { "chatInfo", n => { ChatInfo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ChatInfo>(global::Microsoft.Graph.Beta.Models.ChatInfo.CreateFromDiscriminatorValue); } },
                { "chatRestrictions", n => { ChatRestrictions = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ChatRestrictions>(global::Microsoft.Graph.Beta.Models.ChatRestrictions.CreateFromDiscriminatorValue); } },
                { "isEndToEndEncryptionEnabled", n => { IsEndToEndEncryptionEnabled = n.GetBoolValue(); } },
                { "isEntryExitAnnounced", n => { IsEntryExitAnnounced = n.GetBoolValue(); } },
                { "joinInformation", n => { JoinInformation = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ItemBody>(global::Microsoft.Graph.Beta.Models.ItemBody.CreateFromDiscriminatorValue); } },
                { "joinMeetingIdSettings", n => { JoinMeetingIdSettings = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.JoinMeetingIdSettings>(global::Microsoft.Graph.Beta.Models.JoinMeetingIdSettings.CreateFromDiscriminatorValue); } },
                { "joinWebUrl", n => { JoinWebUrl = n.GetStringValue(); } },
                { "lobbyBypassSettings", n => { LobbyBypassSettings = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.LobbyBypassSettings>(global::Microsoft.Graph.Beta.Models.LobbyBypassSettings.CreateFromDiscriminatorValue); } },
                { "recordAutomatically", n => { RecordAutomatically = n.GetBoolValue(); } },
                { "shareMeetingChatHistoryDefault", n => { ShareMeetingChatHistoryDefault = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.MeetingChatHistoryDefaultMode>(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
                { "videoTeleconferenceId", n => { VideoTeleconferenceId = n.GetStringValue(); } },
                { "watermarkProtection", n => { WatermarkProtection = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.WatermarkProtectionValues>(global::Microsoft.Graph.Beta.Models.WatermarkProtectionValues.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("allowAttendeeToEnableCamera", AllowAttendeeToEnableCamera);
            writer.WriteBoolValue("allowAttendeeToEnableMic", AllowAttendeeToEnableMic);
            writer.WriteBoolValue("allowBreakoutRooms", AllowBreakoutRooms);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.OnlineMeetingPresenters>("allowedPresenters", AllowedPresenters);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.MeetingLiveShareOptions>("allowLiveShare", AllowLiveShare);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.MeetingChatMode>("allowMeetingChat", AllowMeetingChat);
            writer.WriteBoolValue("allowParticipantsToChangeName", AllowParticipantsToChangeName);
            writer.WriteBoolValue("allowPowerPointSharing", AllowPowerPointSharing);
            writer.WriteBoolValue("allowRecording", AllowRecording);
            writer.WriteBoolValue("allowTeamworkReactions", AllowTeamworkReactions);
            writer.WriteBoolValue("allowTranscription", AllowTranscription);
            writer.WriteBoolValue("allowWhiteboard", AllowWhiteboard);
            writer.WriteCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.OnlineMeetingRole>("anonymizeIdentityForRoles", AnonymizeIdentityForRoles);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MeetingAttendanceReport>("attendanceReports", AttendanceReports);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.AudioConferencing>("audioConferencing", AudioConferencing);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ChatInfo>("chatInfo", ChatInfo);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ChatRestrictions>("chatRestrictions", ChatRestrictions);
            writer.WriteBoolValue("isEndToEndEncryptionEnabled", IsEndToEndEncryptionEnabled);
            writer.WriteBoolValue("isEntryExitAnnounced", IsEntryExitAnnounced);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ItemBody>("joinInformation", JoinInformation);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.JoinMeetingIdSettings>("joinMeetingIdSettings", JoinMeetingIdSettings);
            writer.WriteStringValue("joinWebUrl", JoinWebUrl);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.LobbyBypassSettings>("lobbyBypassSettings", LobbyBypassSettings);
            writer.WriteBoolValue("recordAutomatically", RecordAutomatically);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.MeetingChatHistoryDefaultMode>("shareMeetingChatHistoryDefault", ShareMeetingChatHistoryDefault);
            writer.WriteStringValue("subject", Subject);
            writer.WriteStringValue("videoTeleconferenceId", VideoTeleconferenceId);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.WatermarkProtectionValues>("watermarkProtection", WatermarkProtection);
        }
    }
}
#pragma warning restore CS0618
