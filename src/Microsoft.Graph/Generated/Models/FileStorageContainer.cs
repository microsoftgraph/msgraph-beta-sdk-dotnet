// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class FileStorageContainer : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Sensitivity label assigned to the fileStorageContainer. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AssignedLabel? AssignedSensitivityLabel
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AssignedLabel?>("assignedSensitivityLabel"); }
            set { BackingStore?.Set("assignedSensitivityLabel", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AssignedLabel AssignedSensitivityLabel
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AssignedLabel>("assignedSensitivityLabel"); }
            set { BackingStore?.Set("assignedSensitivityLabel", value); }
        }
#endif
        /// <summary>The set of custom structured metadata supported by the fileStorageContainer. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.ColumnDefinition>? Columns
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.ColumnDefinition>?>("columns"); }
            set { BackingStore?.Set("columns", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.ColumnDefinition> Columns
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.ColumnDefinition>>("columns"); }
            set { BackingStore?.Set("columns", value); }
        }
#endif
        /// <summary>Container type ID of the fileStorageContainer. Each container must have only one container type. Read-only.</summary>
        public Guid? ContainerTypeId
        {
            get { return BackingStore?.Get<Guid?>("containerTypeId"); }
            set { BackingStore?.Set("containerTypeId", value); }
        }
        /// <summary>Date and time of the fileStorageContainer creation. Read-only.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Custom property collection for the fileStorageContainer. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.FileStorageContainerCustomPropertyDictionary? CustomProperties
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.FileStorageContainerCustomPropertyDictionary?>("customProperties"); }
            set { BackingStore?.Set("customProperties", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.FileStorageContainerCustomPropertyDictionary CustomProperties
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.FileStorageContainerCustomPropertyDictionary>("customProperties"); }
            set { BackingStore?.Set("customProperties", value); }
        }
#endif
        /// <summary>Provides a user-visible description of the fileStorageContainer. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The display name of the fileStorageContainer. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The drive of the resource fileStorageContainer. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Drive? Drive
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Drive?>("drive"); }
            set { BackingStore?.Set("drive", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Drive Drive
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Drive>("drive"); }
            set { BackingStore?.Set("drive", value); }
        }
#endif
        /// <summary>The externalGroupId property</summary>
        public Guid? ExternalGroupId
        {
            get { return BackingStore?.Get<Guid?>("externalGroupId"); }
            set { BackingStore?.Set("externalGroupId", value); }
        }
        /// <summary>Indicates whether versioning is enabled for the fileStorageContainer. The setting is applicable to all items in the fileStorageContainer. Read-Write.</summary>
        public bool? IsItemVersioningEnabled
        {
            get { return BackingStore?.Get<bool?>("isItemVersioningEnabled"); }
            set { BackingStore?.Set("isItemVersioningEnabled", value); }
        }
        /// <summary>Maximum number of major versions allowed for items in the fileStorageContainer. Read-write.</summary>
        public int? ItemMajorVersionLimit
        {
            get { return BackingStore?.Get<int?>("itemMajorVersionLimit"); }
            set { BackingStore?.Set("itemMajorVersionLimit", value); }
        }
        /// <summary>The lockState property</summary>
        public Microsoft.Graph.Beta.Models.SiteLockState? LockState
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.SiteLockState?>("lockState"); }
            set { BackingStore?.Set("lockState", value); }
        }
        /// <summary>List of users who own the fileStorageContainer. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.UserIdentity>? Owners
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.UserIdentity>?>("owners"); }
            set { BackingStore?.Set("owners", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.UserIdentity> Owners
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.UserIdentity>>("owners"); }
            set { BackingStore?.Set("owners", value); }
        }
#endif
        /// <summary>Ownership type of the fileStorageContainer.The possible values are: tenantOwned. Read-only.</summary>
        public Microsoft.Graph.Beta.Models.FileStorageContainerOwnershipType? OwnershipType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.FileStorageContainerOwnershipType?>("ownershipType"); }
            set { BackingStore?.Set("ownershipType", value); }
        }
        /// <summary>The set of permissions for users in the fileStorageContainer. The permission for each user is set by the roles property. The possible values are &apos;reader&apos;, &apos;writer&apos;, &apos;manager&apos;, and &apos;owner&apos;. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.Permission>? Permissions
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.Permission>?>("permissions"); }
            set { BackingStore?.Set("permissions", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.Permission> Permissions
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.Permission>>("permissions"); }
            set { BackingStore?.Set("permissions", value); }
        }
#endif
        /// <summary>Recycle bin of the fileStorageContainer. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.RecycleBin? RecycleBin
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RecycleBin?>("recycleBin"); }
            set { BackingStore?.Set("recycleBin", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.RecycleBin RecycleBin
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RecycleBin>("recycleBin"); }
            set { BackingStore?.Set("recycleBin", value); }
        }
#endif
        /// <summary>Status of the fileStorageContainer. Containers are created as inactive and require activation. Inactive containers are subjected to automatic deletion in 24 hours. The possible values are: inactive, active. Read-only.</summary>
        public Microsoft.Graph.Beta.Models.FileStorageContainerStatus? Status
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.FileStorageContainerStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>Storage used in the fileStorageContainer. In bytes. Read-only.</summary>
        public long? StorageUsedInBytes
        {
            get { return BackingStore?.Get<long?>("storageUsedInBytes"); }
            set { BackingStore?.Set("storageUsedInBytes", value); }
        }
        /// <summary>Data specific to the current user. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.FileStorageContainerViewpoint? Viewpoint
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.FileStorageContainerViewpoint?>("viewpoint"); }
            set { BackingStore?.Set("viewpoint", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.FileStorageContainerViewpoint Viewpoint
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.FileStorageContainerViewpoint>("viewpoint"); }
            set { BackingStore?.Set("viewpoint", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.FileStorageContainer"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.FileStorageContainer CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.FileStorageContainer();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "assignedSensitivityLabel", n => { AssignedSensitivityLabel = n.GetObjectValue<Microsoft.Graph.Beta.Models.AssignedLabel>(Microsoft.Graph.Beta.Models.AssignedLabel.CreateFromDiscriminatorValue); } },
                { "columns", n => { Columns = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.ColumnDefinition>(Microsoft.Graph.Beta.Models.ColumnDefinition.CreateFromDiscriminatorValue)?.ToList(); } },
                { "containerTypeId", n => { ContainerTypeId = n.GetGuidValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "customProperties", n => { CustomProperties = n.GetObjectValue<Microsoft.Graph.Beta.Models.FileStorageContainerCustomPropertyDictionary>(Microsoft.Graph.Beta.Models.FileStorageContainerCustomPropertyDictionary.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "drive", n => { Drive = n.GetObjectValue<Microsoft.Graph.Beta.Models.Drive>(Microsoft.Graph.Beta.Models.Drive.CreateFromDiscriminatorValue); } },
                { "externalGroupId", n => { ExternalGroupId = n.GetGuidValue(); } },
                { "isItemVersioningEnabled", n => { IsItemVersioningEnabled = n.GetBoolValue(); } },
                { "itemMajorVersionLimit", n => { ItemMajorVersionLimit = n.GetIntValue(); } },
                { "lockState", n => { LockState = n.GetEnumValue<Microsoft.Graph.Beta.Models.SiteLockState>(); } },
                { "owners", n => { Owners = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.UserIdentity>(Microsoft.Graph.Beta.Models.UserIdentity.CreateFromDiscriminatorValue)?.ToList(); } },
                { "ownershipType", n => { OwnershipType = n.GetEnumValue<Microsoft.Graph.Beta.Models.FileStorageContainerOwnershipType>(); } },
                { "permissions", n => { Permissions = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.Permission>(Microsoft.Graph.Beta.Models.Permission.CreateFromDiscriminatorValue)?.ToList(); } },
                { "recycleBin", n => { RecycleBin = n.GetObjectValue<Microsoft.Graph.Beta.Models.RecycleBin>(Microsoft.Graph.Beta.Models.RecycleBin.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<Microsoft.Graph.Beta.Models.FileStorageContainerStatus>(); } },
                { "storageUsedInBytes", n => { StorageUsedInBytes = n.GetLongValue(); } },
                { "viewpoint", n => { Viewpoint = n.GetObjectValue<Microsoft.Graph.Beta.Models.FileStorageContainerViewpoint>(Microsoft.Graph.Beta.Models.FileStorageContainerViewpoint.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AssignedLabel>("assignedSensitivityLabel", AssignedSensitivityLabel);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.ColumnDefinition>("columns", Columns);
            writer.WriteGuidValue("containerTypeId", ContainerTypeId);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.FileStorageContainerCustomPropertyDictionary>("customProperties", CustomProperties);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Drive>("drive", Drive);
            writer.WriteGuidValue("externalGroupId", ExternalGroupId);
            writer.WriteBoolValue("isItemVersioningEnabled", IsItemVersioningEnabled);
            writer.WriteIntValue("itemMajorVersionLimit", ItemMajorVersionLimit);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.SiteLockState>("lockState", LockState);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.UserIdentity>("owners", Owners);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.FileStorageContainerOwnershipType>("ownershipType", OwnershipType);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.Permission>("permissions", Permissions);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.RecycleBin>("recycleBin", RecycleBin);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.FileStorageContainerStatus>("status", Status);
            writer.WriteLongValue("storageUsedInBytes", StorageUsedInBytes);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.FileStorageContainerViewpoint>("viewpoint", Viewpoint);
        }
    }
}
