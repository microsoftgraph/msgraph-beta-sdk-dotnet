// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PhoneAuthenticationMethod : global::Microsoft.Graph.Beta.Models.AuthenticationMethod, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The phone number to text or call for authentication. Phone numbers use the format &apos;+&lt;country code&gt; &lt;number&gt;x&lt;extension&gt;&apos;, with extension optional. For example, +1 5555551234 or +1 5555551234x123 are valid. Numbers are rejected when creating/updating if they don&apos;t match the required format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhoneNumber
        {
            get { return BackingStore?.Get<string?>("phoneNumber"); }
            set { BackingStore?.Set("phoneNumber", value); }
        }
#nullable restore
#else
        public string PhoneNumber
        {
            get { return BackingStore?.Get<string>("phoneNumber"); }
            set { BackingStore?.Set("phoneNumber", value); }
        }
#endif
        /// <summary>The type of this phone. Possible values are: mobile, alternateMobile, or office.</summary>
        public global::Microsoft.Graph.Beta.Models.AuthenticationPhoneType? PhoneType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AuthenticationPhoneType?>("phoneType"); }
            set { BackingStore?.Set("phoneType", value); }
        }
        /// <summary>Whether a phone is ready to be used for SMS sign-in or not. Possible values are: notSupported, notAllowedByPolicy, notEnabled, phoneNumberNotUnique, ready, or notConfigured, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.AuthenticationMethodSignInState? SmsSignInState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AuthenticationMethodSignInState?>("smsSignInState"); }
            set { BackingStore?.Set("smsSignInState", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.PhoneAuthenticationMethod"/> and sets the default values.
        /// </summary>
        public PhoneAuthenticationMethod() : base()
        {
            OdataType = "#microsoft.graph.phoneAuthenticationMethod";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.PhoneAuthenticationMethod"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.PhoneAuthenticationMethod CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.PhoneAuthenticationMethod();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "phoneNumber", n => { PhoneNumber = n.GetStringValue(); } },
                { "phoneType", n => { PhoneType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.AuthenticationPhoneType>(); } },
                { "smsSignInState", n => { SmsSignInState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.AuthenticationMethodSignInState>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("phoneNumber", PhoneNumber);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.AuthenticationPhoneType>("phoneType", PhoneType);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.AuthenticationMethodSignInState>("smsSignInState", SmsSignInState);
        }
    }
}
#pragma warning restore CS0618
