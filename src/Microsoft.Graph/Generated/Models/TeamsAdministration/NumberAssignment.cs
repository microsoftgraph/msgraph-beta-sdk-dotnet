// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.TeamsAdministration
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NumberAssignment : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The activationState property</summary>
        public global::Microsoft.Graph.Beta.Models.TeamsAdministration.ActivationState? ActivationState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamsAdministration.ActivationState?>("activationState"); }
            set { BackingStore?.Set("activationState", value); }
        }
        /// <summary>Contains the assignment category such as Primary or Private. The possible values are: primary, private, alternate, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignmentCategory? AssignmentCategory
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignmentCategory?>("assignmentCategory"); }
            set { BackingStore?.Set("assignmentCategory", value); }
        }
        /// <summary>The assignment status of the phone number. The possible values are: unassigned, internalError, userAssigned, conferenceAssigned, voiceApplicationAssigned, thirdPartyAppAssigned, policyAssigned, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignmentStatus? AssignmentStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignmentStatus?>("assignmentStatus"); }
            set { BackingStore?.Set("assignmentStatus", value); }
        }
        /// <summary>The ID of the object the phone number is assigned to, either the ObjectId of a user or resource account, or the policy instance ID of a Teams shared calling routing policy instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssignmentTargetId
        {
            get { return BackingStore?.Get<string?>("assignmentTargetId"); }
            set { BackingStore?.Set("assignmentTargetId", value); }
        }
#nullable restore
#else
        public string AssignmentTargetId
        {
            get { return BackingStore?.Get<string>("assignmentTargetId"); }
            set { BackingStore?.Set("assignmentTargetId", value); }
        }
#endif
        /// <summary>The list of capabilities assigned to the phone number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberCapability?>? Capabilities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberCapability?>?>("capabilities"); }
            set { BackingStore?.Set("capabilities", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberCapability?> Capabilities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberCapability?>>("capabilities"); }
            set { BackingStore?.Set("capabilities", value); }
        }
#endif
        /// <summary>The city where the phone number is located or associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City
        {
            get { return BackingStore?.Get<string?>("city"); }
            set { BackingStore?.Set("city", value); }
        }
#nullable restore
#else
        public string City
        {
            get { return BackingStore?.Get<string>("city"); }
            set { BackingStore?.Set("city", value); }
        }
#endif
        /// <summary>The ID of the civic address assigned to the phone number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CivicAddressId
        {
            get { return BackingStore?.Get<string?>("civicAddressId"); }
            set { BackingStore?.Set("civicAddressId", value); }
        }
#nullable restore
#else
        public string CivicAddressId
        {
            get { return BackingStore?.Get<string>("civicAddressId"); }
            set { BackingStore?.Set("civicAddressId", value); }
        }
#endif
        /// <summary>The ISO country code assigned to the phone number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IsoCountryCode
        {
            get { return BackingStore?.Get<string?>("isoCountryCode"); }
            set { BackingStore?.Set("isoCountryCode", value); }
        }
#nullable restore
#else
        public string IsoCountryCode
        {
            get { return BackingStore?.Get<string>("isoCountryCode"); }
            set { BackingStore?.Set("isoCountryCode", value); }
        }
#endif
        /// <summary>The ID of the location assigned to the phone number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationId
        {
            get { return BackingStore?.Get<string?>("locationId"); }
            set { BackingStore?.Set("locationId", value); }
        }
#nullable restore
#else
        public string LocationId
        {
            get { return BackingStore?.Get<string>("locationId"); }
            set { BackingStore?.Set("locationId", value); }
        }
#endif
        /// <summary>This property is reserved for internal Microsoft use.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkSiteId
        {
            get { return BackingStore?.Get<string?>("networkSiteId"); }
            set { BackingStore?.Set("networkSiteId", value); }
        }
#nullable restore
#else
        public string NetworkSiteId
        {
            get { return BackingStore?.Get<string>("networkSiteId"); }
            set { BackingStore?.Set("networkSiteId", value); }
        }
#endif
        /// <summary>The source of the phone number. online is used for phone numbers assigned in Microsoft 365, and onPremises is used for phone numbers assigned in AD on-premises, which are synchronized into Microsoft 365. The possible values are: online, onPremises, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberSource? NumberSource
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberSource?>("numberSource"); }
            set { BackingStore?.Set("numberSource", value); }
        }
        /// <summary>The numberType property</summary>
        public global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberType? NumberType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberType?>("numberType"); }
            set { BackingStore?.Set("numberType", value); }
        }
        /// <summary>The ID of the operator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OperatorId
        {
            get { return BackingStore?.Get<string?>("operatorId"); }
            set { BackingStore?.Set("operatorId", value); }
        }
#nullable restore
#else
        public string OperatorId
        {
            get { return BackingStore?.Get<string>("operatorId"); }
            set { BackingStore?.Set("operatorId", value); }
        }
#endif
        /// <summary>The status of any port in order covering the phone number. The possible values are: completed, firmOrderCommitmentAccepted, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.TeamsAdministration.PortInStatus? PortInStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamsAdministration.PortInStatus?>("portInStatus"); }
            set { BackingStore?.Set("portInStatus", value); }
        }
        /// <summary>Status of Reverse Number Lookup (RNL). If set to skipInternalVoip, calls are routed through the external Public Switched Telephone Network (PSTN) instead of using internal VoIP resolution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.ReverseNumberLookupOption?>? ReverseNumberLookupOptions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.ReverseNumberLookupOption?>?>("reverseNumberLookupOptions"); }
            set { BackingStore?.Set("reverseNumberLookupOptions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.ReverseNumberLookupOption?> ReverseNumberLookupOptions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.ReverseNumberLookupOption?>>("reverseNumberLookupOptions"); }
            set { BackingStore?.Set("reverseNumberLookupOptions", value); }
        }
#endif
        /// <summary>Indicates what customer actions are available to modify the number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.CustomerAction?>? SupportedCustomerActions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.CustomerAction?>?>("supportedCustomerActions"); }
            set { BackingStore?.Set("supportedCustomerActions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.CustomerAction?> SupportedCustomerActions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.CustomerAction?>>("supportedCustomerActions"); }
            set { BackingStore?.Set("supportedCustomerActions", value); }
        }
#endif
        /// <summary>The telephone number in the record. The recorded telephone number is always displayed with a &apos;+&apos; prefix, regardless of whether it was originally assigned with one.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TelephoneNumber
        {
            get { return BackingStore?.Get<string?>("telephoneNumber"); }
            set { BackingStore?.Set("telephoneNumber", value); }
        }
#nullable restore
#else
        public string TelephoneNumber
        {
            get { return BackingStore?.Get<string>("telephoneNumber"); }
            set { BackingStore?.Set("telephoneNumber", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberAssignment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberAssignment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberAssignment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "activationState", n => { ActivationState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.ActivationState>(); } },
                { "assignmentCategory", n => { AssignmentCategory = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignmentCategory>(); } },
                { "assignmentStatus", n => { AssignmentStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignmentStatus>(); } },
                { "assignmentTargetId", n => { AssignmentTargetId = n.GetStringValue(); } },
                { "capabilities", n => { Capabilities = n.GetCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberCapability>()?.AsList(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "civicAddressId", n => { CivicAddressId = n.GetStringValue(); } },
                { "isoCountryCode", n => { IsoCountryCode = n.GetStringValue(); } },
                { "locationId", n => { LocationId = n.GetStringValue(); } },
                { "networkSiteId", n => { NetworkSiteId = n.GetStringValue(); } },
                { "numberSource", n => { NumberSource = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberSource>(); } },
                { "numberType", n => { NumberType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberType>(); } },
                { "operatorId", n => { OperatorId = n.GetStringValue(); } },
                { "portInStatus", n => { PortInStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.PortInStatus>(); } },
                { "reverseNumberLookupOptions", n => { ReverseNumberLookupOptions = n.GetCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.ReverseNumberLookupOption>()?.AsList(); } },
                { "supportedCustomerActions", n => { SupportedCustomerActions = n.GetCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.CustomerAction>()?.AsList(); } },
                { "telephoneNumber", n => { TelephoneNumber = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.ActivationState>("activationState", ActivationState);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignmentCategory>("assignmentCategory", AssignmentCategory);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignmentStatus>("assignmentStatus", AssignmentStatus);
            writer.WriteStringValue("assignmentTargetId", AssignmentTargetId);
            writer.WriteCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberCapability>("capabilities", Capabilities);
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("civicAddressId", CivicAddressId);
            writer.WriteStringValue("isoCountryCode", IsoCountryCode);
            writer.WriteStringValue("locationId", LocationId);
            writer.WriteStringValue("networkSiteId", NetworkSiteId);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberSource>("numberSource", NumberSource);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.NumberType>("numberType", NumberType);
            writer.WriteStringValue("operatorId", OperatorId);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.PortInStatus>("portInStatus", PortInStatus);
            writer.WriteCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.ReverseNumberLookupOption>("reverseNumberLookupOptions", ReverseNumberLookupOptions);
            writer.WriteCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.CustomerAction>("supportedCustomerActions", SupportedCustomerActions);
            writer.WriteStringValue("telephoneNumber", TelephoneNumber);
        }
    }
}
#pragma warning restore CS0618
