// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.TeamsAdministration
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TeamsUserConfiguration : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The type of the account in the Teams context. The possible values are: user, resourceAccount, guest, sfbOnPremUser, unknown, unknownFutureValue, ineligibleUser. Use the Prefer: include-unknown-enum-members request header to get the following value from this enum evolvable enum: ineligibleUser.</summary>
        public global::Microsoft.Graph.Beta.Models.TeamsAdministration.AccountType? AccountType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AccountType?>("accountType"); }
            set { BackingStore?.Set("accountType", value); }
        }
        /// <summary>The date and time when the user was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Contains the user&apos;s effective policy assignments, with each assignment including policyType and policyAssignment details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.EffectivePolicyAssignment>? EffectivePolicyAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.EffectivePolicyAssignment>?>("effectivePolicyAssignments"); }
            set { BackingStore?.Set("effectivePolicyAssignments", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.EffectivePolicyAssignment> EffectivePolicyAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.EffectivePolicyAssignment>>("effectivePolicyAssignments"); }
            set { BackingStore?.Set("effectivePolicyAssignments", value); }
        }
#endif
        /// <summary>The Teams features enabled for a given user based on licensing or service plan.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FeatureTypes
        {
            get { return BackingStore?.Get<List<string>?>("featureTypes"); }
            set { BackingStore?.Set("featureTypes", value); }
        }
#nullable restore
#else
        public List<string> FeatureTypes
        {
            get { return BackingStore?.Get<List<string>>("featureTypes"); }
            set { BackingStore?.Set("featureTypes", value); }
        }
#endif
        /// <summary>Indicates whether voice capability is enabled.</summary>
        public bool? IsEnterpriseVoiceEnabled
        {
            get { return BackingStore?.Get<bool?>("isEnterpriseVoiceEnabled"); }
            set { BackingStore?.Set("isEnterpriseVoiceEnabled", value); }
        }
        /// <summary>The date and time when the user&apos;s details were last modified. The system updates this value each time the user&apos;s details are changed. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? ModifiedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("modifiedDateTime"); }
            set { BackingStore?.Set("modifiedDateTime", value); }
        }
        /// <summary>Includes both the phone number and its corresponding assignment category. The assignment category can include values such as primary, private, and alternate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignedTelephoneNumber>? TelephoneNumbers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignedTelephoneNumber>?>("telephoneNumbers"); }
            set { BackingStore?.Set("telephoneNumbers", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignedTelephoneNumber> TelephoneNumbers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignedTelephoneNumber>>("telephoneNumbers"); }
            set { BackingStore?.Set("telephoneNumbers", value); }
        }
#endif
        /// <summary>The unique identifier of the tenant in Entra to which this user is assigned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId
        {
            get { return BackingStore?.Get<string?>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#nullable restore
#else
        public string TenantId
        {
            get { return BackingStore?.Get<string>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#endif
        /// <summary>Represents an Entra user account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.User? User
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.User?>("user"); }
            set { BackingStore?.Set("user", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.User User
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.User>("user"); }
            set { BackingStore?.Set("user", value); }
        }
#endif
        /// <summary>The sign-in address of the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName
        {
            get { return BackingStore?.Get<string?>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#nullable restore
#else
        public string UserPrincipalName
        {
            get { return BackingStore?.Get<string>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.TeamsAdministration.TeamsUserConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.TeamsAdministration.TeamsUserConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.TeamsAdministration.TeamsUserConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accountType", n => { AccountType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AccountType>(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "effectivePolicyAssignments", n => { EffectivePolicyAssignments = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.EffectivePolicyAssignment>(global::Microsoft.Graph.Beta.Models.TeamsAdministration.EffectivePolicyAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "featureTypes", n => { FeatureTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "isEnterpriseVoiceEnabled", n => { IsEnterpriseVoiceEnabled = n.GetBoolValue(); } },
                { "modifiedDateTime", n => { ModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "telephoneNumbers", n => { TelephoneNumbers = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignedTelephoneNumber>(global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignedTelephoneNumber.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
                { "user", n => { User = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.User>(global::Microsoft.Graph.Beta.Models.User.CreateFromDiscriminatorValue); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AccountType>("accountType", AccountType);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.EffectivePolicyAssignment>("effectivePolicyAssignments", EffectivePolicyAssignments);
            writer.WriteCollectionOfPrimitiveValues<string>("featureTypes", FeatureTypes);
            writer.WriteBoolValue("isEnterpriseVoiceEnabled", IsEnterpriseVoiceEnabled);
            writer.WriteDateTimeOffsetValue("modifiedDateTime", ModifiedDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.TeamsAdministration.AssignedTelephoneNumber>("telephoneNumbers", TelephoneNumbers);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.User>("user", User);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
        }
    }
}
#pragma warning restore CS0618
