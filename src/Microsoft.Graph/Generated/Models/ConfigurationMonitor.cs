// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ConfigurationMonitor : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The baseline property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ConfigurationBaseline? Baseline
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ConfigurationBaseline?>("baseline"); }
            set { BackingStore?.Set("baseline", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ConfigurationBaseline Baseline
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ConfigurationBaseline>("baseline"); }
            set { BackingStore?.Set("baseline", value); }
        }
#endif
        /// <summary>The createdBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.IdentitySet? CreatedBy
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.IdentitySet?>("createdBy"); }
            set { BackingStore?.Set("createdBy", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.IdentitySet CreatedBy
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.IdentitySet>("createdBy"); }
            set { BackingStore?.Set("createdBy", value); }
        }
#endif
        /// <summary>The createdDateTime property</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The lastModifiedDateTime property</summary>
        public DateTimeOffset? LastModifiedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastModifiedDateTime"); }
            set { BackingStore?.Set("lastModifiedDateTime", value); }
        }
        /// <summary>The mode property</summary>
        public global::Microsoft.Graph.Beta.Models.MonitorMode? Mode
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MonitorMode?>("mode"); }
            set { BackingStore?.Set("mode", value); }
        }
        /// <summary>The monitorRunFrequencyInHours property</summary>
        public int? MonitorRunFrequencyInHours
        {
            get { return BackingStore?.Get<int?>("monitorRunFrequencyInHours"); }
            set { BackingStore?.Set("monitorRunFrequencyInHours", value); }
        }
        /// <summary>The parameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.OpenComplexDictionaryType? Parameters
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OpenComplexDictionaryType?>("parameters"); }
            set { BackingStore?.Set("parameters", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.OpenComplexDictionaryType Parameters
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OpenComplexDictionaryType>("parameters"); }
            set { BackingStore?.Set("parameters", value); }
        }
#endif
        /// <summary>The runningOnBehalfOf property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.IdentitySet? RunningOnBehalfOf
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.IdentitySet?>("runningOnBehalfOf"); }
            set { BackingStore?.Set("runningOnBehalfOf", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.IdentitySet RunningOnBehalfOf
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.IdentitySet>("runningOnBehalfOf"); }
            set { BackingStore?.Set("runningOnBehalfOf", value); }
        }
#endif
        /// <summary>The status property</summary>
        public global::Microsoft.Graph.Beta.Models.MonitorStatus? Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MonitorStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>The tenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId
        {
            get { return BackingStore?.Get<string?>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#nullable restore
#else
        public string TenantId
        {
            get { return BackingStore?.Get<string>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.ConfigurationMonitor"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.ConfigurationMonitor CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.ConfigurationMonitor();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "baseline", n => { Baseline = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ConfigurationBaseline>(global::Microsoft.Graph.Beta.Models.ConfigurationBaseline.CreateFromDiscriminatorValue); } },
                { "createdBy", n => { CreatedBy = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.IdentitySet>(global::Microsoft.Graph.Beta.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "mode", n => { Mode = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.MonitorMode>(); } },
                { "monitorRunFrequencyInHours", n => { MonitorRunFrequencyInHours = n.GetIntValue(); } },
                { "parameters", n => { Parameters = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.OpenComplexDictionaryType>(global::Microsoft.Graph.Beta.Models.OpenComplexDictionaryType.CreateFromDiscriminatorValue); } },
                { "runningOnBehalfOf", n => { RunningOnBehalfOf = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.IdentitySet>(global::Microsoft.Graph.Beta.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.MonitorStatus>(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ConfigurationBaseline>("baseline", Baseline);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.IdentitySet>("createdBy", CreatedBy);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.MonitorMode>("mode", Mode);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.OpenComplexDictionaryType>("parameters", Parameters);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.IdentitySet>("runningOnBehalfOf", RunningOnBehalfOf);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.MonitorStatus>("status", Status);
        }
    }
}
#pragma warning restore CS0618
