// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CredentialUsageSummary : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The authMethod property</summary>
        public global::Microsoft.Graph.Beta.Models.UsageAuthMethod? AuthMethod
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UsageAuthMethod?>("authMethod"); }
            set { BackingStore?.Set("authMethod", value); }
        }
        /// <summary>Provides the count of failed resets or registration data.</summary>
        public long? FailureActivityCount
        {
            get { return BackingStore?.Get<long?>("failureActivityCount"); }
            set { BackingStore?.Set("failureActivityCount", value); }
        }
        /// <summary>The feature property</summary>
        public global::Microsoft.Graph.Beta.Models.FeatureType? Feature
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.FeatureType?>("feature"); }
            set { BackingStore?.Set("feature", value); }
        }
        /// <summary>Provides the count of successful registrations or resets.</summary>
        public long? SuccessfulActivityCount
        {
            get { return BackingStore?.Get<long?>("successfulActivityCount"); }
            set { BackingStore?.Set("successfulActivityCount", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CredentialUsageSummary"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.CredentialUsageSummary CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CredentialUsageSummary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "authMethod", n => { AuthMethod = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.UsageAuthMethod>(); } },
                { "failureActivityCount", n => { FailureActivityCount = n.GetLongValue(); } },
                { "feature", n => { Feature = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.FeatureType>(); } },
                { "successfulActivityCount", n => { SuccessfulActivityCount = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.UsageAuthMethod>("authMethod", AuthMethod);
            writer.WriteLongValue("failureActivityCount", FailureActivityCount);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.FeatureType>("feature", Feature);
            writer.WriteLongValue("successfulActivityCount", SuccessfulActivityCount);
        }
    }
}
#pragma warning restore CS0618
