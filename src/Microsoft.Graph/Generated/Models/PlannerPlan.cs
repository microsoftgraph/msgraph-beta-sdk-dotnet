// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class PlannerPlan : global::Microsoft.Graph.Beta.Models.PlannerDelta, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Read-only. Nullable. Contains information about who archived or unarchived the plan and why.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PlannerArchivalInfo? ArchivalInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerArchivalInfo?>("archivalInfo"); }
            set { BackingStore?.Set("archivalInfo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PlannerArchivalInfo ArchivalInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerArchivalInfo>("archivalInfo"); }
            set { BackingStore?.Set("archivalInfo", value); }
        }
#endif
        /// <summary>Collection of buckets in the plan. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.PlannerBucket>? Buckets
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.PlannerBucket>?>("buckets"); }
            set { BackingStore?.Set("buckets", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.PlannerBucket> Buckets
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.PlannerBucket>>("buckets"); }
            set { BackingStore?.Set("buckets", value); }
        }
#endif
        /// <summary>Identifies the container of the plan. Either specify all properties, or specify only the url, the containerId, and type. After it&apos;s set, this property can’t be updated. It changes when a plan is moved from one container to another, using plan move to container. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PlannerPlanContainer? Container
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerPlanContainer?>("container"); }
            set { BackingStore?.Set("container", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PlannerPlanContainer Container
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerPlanContainer>("container"); }
            set { BackingStore?.Set("container", value); }
        }
#endif
        /// <summary>Read-only. Other user experiences in which this plan is used, represented as plannerPlanContext entries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PlannerPlanContextCollection? Contexts
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerPlanContextCollection?>("contexts"); }
            set { BackingStore?.Set("contexts", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PlannerPlanContextCollection Contexts
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerPlanContextCollection>("contexts"); }
            set { BackingStore?.Set("contexts", value); }
        }
#endif
        /// <summary>Read-only. The user who created the plan.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.IdentitySet? CreatedBy
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.IdentitySet?>("createdBy"); }
            set { BackingStore?.Set("createdBy", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.IdentitySet CreatedBy
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.IdentitySet>("createdBy"); }
            set { BackingStore?.Set("createdBy", value); }
        }
#endif
        /// <summary>Read-only. Date and time at which the plan is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Contains information about the origin of the plan.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PlannerPlanCreation? CreationSource
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerPlanCreation?>("creationSource"); }
            set { BackingStore?.Set("creationSource", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PlannerPlanCreation CreationSource
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerPlanCreation>("creationSource"); }
            set { BackingStore?.Set("creationSource", value); }
        }
#endif
        /// <summary>Extra details about the plan. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PlannerPlanDetails? Details
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerPlanDetails?>("details"); }
            set { BackingStore?.Set("details", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PlannerPlanDetails Details
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerPlanDetails>("details"); }
            set { BackingStore?.Set("details", value); }
        }
#endif
        /// <summary>Read-only. If set to true, the plan is archived. An archived plan is read-only.</summary>
        public bool? IsArchived
        {
            get { return BackingStore?.Get<bool?>("isArchived"); }
            set { BackingStore?.Set("isArchived", value); }
        }
        /// <summary>Use the container property instead. ID of the group that owns the plan. After it&apos;s set, this property can’t be updated. This property doesn&apos;t return a valid group ID if the container of the plan isn&apos;t a group.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Owner
        {
            get { return BackingStore?.Get<string?>("owner"); }
            set { BackingStore?.Set("owner", value); }
        }
#nullable restore
#else
        public string Owner
        {
            get { return BackingStore?.Get<string>("owner"); }
            set { BackingStore?.Set("owner", value); }
        }
#endif
        /// <summary>List of containers the plan is shared with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.PlannerSharedWithContainer>? SharedWithContainers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.PlannerSharedWithContainer>?>("sharedWithContainers"); }
            set { BackingStore?.Set("sharedWithContainers", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.PlannerSharedWithContainer> SharedWithContainers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.PlannerSharedWithContainer>>("sharedWithContainers"); }
            set { BackingStore?.Set("sharedWithContainers", value); }
        }
#endif
        /// <summary>Collection of tasks in the plan. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.PlannerTask>? Tasks
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.PlannerTask>?>("tasks"); }
            set { BackingStore?.Set("tasks", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.PlannerTask> Tasks
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.PlannerTask>>("tasks"); }
            set { BackingStore?.Set("tasks", value); }
        }
#endif
        /// <summary>Required. Title of the plan.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title
        {
            get { return BackingStore?.Get<string?>("title"); }
            set { BackingStore?.Set("title", value); }
        }
#nullable restore
#else
        public string Title
        {
            get { return BackingStore?.Get<string>("title"); }
            set { BackingStore?.Set("title", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.PlannerPlan"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.PlannerPlan CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.PlannerPlan();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "archivalInfo", n => { ArchivalInfo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PlannerArchivalInfo>(global::Microsoft.Graph.Beta.Models.PlannerArchivalInfo.CreateFromDiscriminatorValue); } },
                { "buckets", n => { Buckets = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.PlannerBucket>(global::Microsoft.Graph.Beta.Models.PlannerBucket.CreateFromDiscriminatorValue)?.AsList(); } },
                { "container", n => { Container = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PlannerPlanContainer>(global::Microsoft.Graph.Beta.Models.PlannerPlanContainer.CreateFromDiscriminatorValue); } },
                { "contexts", n => { Contexts = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PlannerPlanContextCollection>(global::Microsoft.Graph.Beta.Models.PlannerPlanContextCollection.CreateFromDiscriminatorValue); } },
                { "createdBy", n => { CreatedBy = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.IdentitySet>(global::Microsoft.Graph.Beta.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "creationSource", n => { CreationSource = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PlannerPlanCreation>(global::Microsoft.Graph.Beta.Models.PlannerPlanCreation.CreateFromDiscriminatorValue); } },
                { "details", n => { Details = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PlannerPlanDetails>(global::Microsoft.Graph.Beta.Models.PlannerPlanDetails.CreateFromDiscriminatorValue); } },
                { "isArchived", n => { IsArchived = n.GetBoolValue(); } },
                { "owner", n => { Owner = n.GetStringValue(); } },
                { "sharedWithContainers", n => { SharedWithContainers = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.PlannerSharedWithContainer>(global::Microsoft.Graph.Beta.Models.PlannerSharedWithContainer.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tasks", n => { Tasks = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.PlannerTask>(global::Microsoft.Graph.Beta.Models.PlannerTask.CreateFromDiscriminatorValue)?.AsList(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PlannerArchivalInfo>("archivalInfo", ArchivalInfo);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.PlannerBucket>("buckets", Buckets);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PlannerPlanContainer>("container", Container);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PlannerPlanContextCollection>("contexts", Contexts);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.IdentitySet>("createdBy", CreatedBy);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PlannerPlanCreation>("creationSource", CreationSource);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PlannerPlanDetails>("details", Details);
            writer.WriteBoolValue("isArchived", IsArchived);
            writer.WriteStringValue("owner", Owner);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.PlannerSharedWithContainer>("sharedWithContainers", SharedWithContainers);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.PlannerTask>("tasks", Tasks);
            writer.WriteStringValue("title", Title);
        }
    }
}
#pragma warning restore CS0618
