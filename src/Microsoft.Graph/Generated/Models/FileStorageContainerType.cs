// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class FileStorageContainerType : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The billingClassification property</summary>
        public global::Microsoft.Graph.Beta.Models.FileStorageContainerBillingClassification? BillingClassification
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.FileStorageContainerBillingClassification?>("billingClassification"); }
            set { BackingStore?.Set("billingClassification", value); }
        }
        /// <summary>The billingStatus property</summary>
        public global::Microsoft.Graph.Beta.Models.FileStorageContainerBillingStatus? BillingStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.FileStorageContainerBillingStatus?>("billingStatus"); }
            set { BackingStore?.Set("billingStatus", value); }
        }
        /// <summary>The creation date. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Used in update scenarios for optimistic concurrency control. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Etag
        {
            get { return BackingStore?.Get<string?>("etag"); }
            set { BackingStore?.Set("etag", value); }
        }
#nullable restore
#else
        public string Etag
        {
            get { return BackingStore?.Get<string>("etag"); }
            set { BackingStore?.Set("etag", value); }
        }
#endif
        /// <summary>The expiration date. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.</summary>
        public DateTimeOffset? ExpirationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("expirationDateTime"); }
            set { BackingStore?.Set("expirationDateTime", value); }
        }
        /// <summary>The name of the fileStorageContainerType.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name
        {
            get { return BackingStore?.Get<string?>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#nullable restore
#else
        public string Name
        {
            get { return BackingStore?.Get<string>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#endif
        /// <summary>ID of the application that owns the fileStorageContainerType.</summary>
        public Guid? OwningAppId
        {
            get { return BackingStore?.Get<Guid?>("owningAppId"); }
            set { BackingStore?.Set("owningAppId", value); }
        }
        /// <summary>The settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.FileStorageContainerTypeSettings? Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.FileStorageContainerTypeSettings?>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.FileStorageContainerTypeSettings Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.FileStorageContainerTypeSettings>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.FileStorageContainerType"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.FileStorageContainerType CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.FileStorageContainerType();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "billingClassification", n => { BillingClassification = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.FileStorageContainerBillingClassification>(); } },
                { "billingStatus", n => { BillingStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.FileStorageContainerBillingStatus>(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "etag", n => { Etag = n.GetStringValue(); } },
                { "expirationDateTime", n => { ExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "owningAppId", n => { OwningAppId = n.GetGuidValue(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.FileStorageContainerTypeSettings>(global::Microsoft.Graph.Beta.Models.FileStorageContainerTypeSettings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.FileStorageContainerBillingClassification>("billingClassification", BillingClassification);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.FileStorageContainerBillingStatus>("billingStatus", BillingStatus);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("etag", Etag);
            writer.WriteDateTimeOffsetValue("expirationDateTime", ExpirationDateTime);
            writer.WriteStringValue("name", Name);
            writer.WriteGuidValue("owningAppId", OwningAppId);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.FileStorageContainerTypeSettings>("settings", Settings);
        }
    }
}
#pragma warning restore CS0618
