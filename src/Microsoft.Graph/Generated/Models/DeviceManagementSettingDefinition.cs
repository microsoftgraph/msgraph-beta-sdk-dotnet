// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Entity representing the defintion for a given setting
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DeviceManagementSettingDefinition : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>Collection of constraints for the setting value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementConstraint>? Constraints
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementConstraint>?>("constraints"); }
            set { BackingStore?.Set("constraints", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementConstraint> Constraints
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementConstraint>>("constraints"); }
            set { BackingStore?.Set("constraints", value); }
        }
#endif
        /// <summary>Collection of dependencies on other settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDependency>? Dependencies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDependency>?>("dependencies"); }
            set { BackingStore?.Set("dependencies", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDependency> Dependencies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDependency>>("dependencies"); }
            set { BackingStore?.Set("dependencies", value); }
        }
#endif
        /// <summary>The setting&apos;s description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The setting&apos;s display name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Url to setting documentation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentationUrl
        {
            get { return BackingStore?.Get<string?>("documentationUrl"); }
            set { BackingStore?.Set("documentationUrl", value); }
        }
#nullable restore
#else
        public string DocumentationUrl
        {
            get { return BackingStore?.Get<string>("documentationUrl"); }
            set { BackingStore?.Set("documentationUrl", value); }
        }
#endif
        /// <summary>subtitle of the setting header for more details about the category/section</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HeaderSubtitle
        {
            get { return BackingStore?.Get<string?>("headerSubtitle"); }
            set { BackingStore?.Set("headerSubtitle", value); }
        }
#nullable restore
#else
        public string HeaderSubtitle
        {
            get { return BackingStore?.Get<string>("headerSubtitle"); }
            set { BackingStore?.Set("headerSubtitle", value); }
        }
#endif
        /// <summary>title of the setting header represents a category/section of a setting/settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HeaderTitle
        {
            get { return BackingStore?.Get<string?>("headerTitle"); }
            set { BackingStore?.Set("headerTitle", value); }
        }
#nullable restore
#else
        public string HeaderTitle
        {
            get { return BackingStore?.Get<string>("headerTitle"); }
            set { BackingStore?.Set("headerTitle", value); }
        }
#endif
        /// <summary>If the setting is top level, it can be configured without the need to be wrapped in a collection or complex setting</summary>
        public bool? IsTopLevel
        {
            get { return BackingStore?.Get<bool?>("isTopLevel"); }
            set { BackingStore?.Set("isTopLevel", value); }
        }
        /// <summary>Keywords associated with the setting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Keywords
        {
            get { return BackingStore?.Get<List<string>?>("keywords"); }
            set { BackingStore?.Set("keywords", value); }
        }
#nullable restore
#else
        public List<string> Keywords
        {
            get { return BackingStore?.Get<List<string>>("keywords"); }
            set { BackingStore?.Set("keywords", value); }
        }
#endif
        /// <summary>Placeholder text as an example of valid input</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlaceholderText
        {
            get { return BackingStore?.Get<string?>("placeholderText"); }
            set { BackingStore?.Set("placeholderText", value); }
        }
#nullable restore
#else
        public string PlaceholderText
        {
            get { return BackingStore?.Get<string>("placeholderText"); }
            set { BackingStore?.Set("placeholderText", value); }
        }
#endif
        /// <summary>The valueType property</summary>
        public global::Microsoft.Graph.Beta.Models.DeviceManangementIntentValueType? ValueType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceManangementIntentValueType?>("valueType"); }
            set { BackingStore?.Set("valueType", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDefinition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDefinition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.deviceManagementAbstractComplexSettingDefinition" => new global::Microsoft.Graph.Beta.Models.DeviceManagementAbstractComplexSettingDefinition(),
                "#microsoft.graph.deviceManagementCollectionSettingDefinition" => new global::Microsoft.Graph.Beta.Models.DeviceManagementCollectionSettingDefinition(),
                "#microsoft.graph.deviceManagementComplexSettingDefinition" => new global::Microsoft.Graph.Beta.Models.DeviceManagementComplexSettingDefinition(),
                _ => new global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDefinition(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "constraints", n => { Constraints = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementConstraint>(global::Microsoft.Graph.Beta.Models.DeviceManagementConstraint.CreateFromDiscriminatorValue)?.AsList(); } },
                { "dependencies", n => { Dependencies = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDependency>(global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDependency.CreateFromDiscriminatorValue)?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "documentationUrl", n => { DocumentationUrl = n.GetStringValue(); } },
                { "headerSubtitle", n => { HeaderSubtitle = n.GetStringValue(); } },
                { "headerTitle", n => { HeaderTitle = n.GetStringValue(); } },
                { "isTopLevel", n => { IsTopLevel = n.GetBoolValue(); } },
                { "keywords", n => { Keywords = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "placeholderText", n => { PlaceholderText = n.GetStringValue(); } },
                { "valueType", n => { ValueType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.DeviceManangementIntentValueType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementConstraint>("constraints", Constraints);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementSettingDependency>("dependencies", Dependencies);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("documentationUrl", DocumentationUrl);
            writer.WriteStringValue("headerSubtitle", HeaderSubtitle);
            writer.WriteStringValue("headerTitle", HeaderTitle);
            writer.WriteBoolValue("isTopLevel", IsTopLevel);
            writer.WriteCollectionOfPrimitiveValues<string>("keywords", Keywords);
            writer.WriteStringValue("placeholderText", PlaceholderText);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.DeviceManangementIntentValueType>("valueType", ValueType);
        }
    }
}
#pragma warning restore CS0618
