// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Configuration used to deliver a set of custom settings as-is to all users in the targeted security group
    /// </summary>
    public class TargetedManagedAppConfiguration : Microsoft.Graph.Beta.Models.ManagedAppConfiguration, IParsable
    {
        /// <summary>Indicates a collection of apps to target which can be one of several pre-defined lists of apps or a manually selected list of apps</summary>
        public Microsoft.Graph.Beta.Models.TargetedManagedAppGroupType? AppGroupType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TargetedManagedAppGroupType?>("appGroupType"); }
            set { BackingStore?.Set("appGroupType", value); }
        }
        /// <summary>List of apps to which the policy is deployed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.ManagedMobileApp>? Apps
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.ManagedMobileApp>?>("apps"); }
            set { BackingStore?.Set("apps", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.ManagedMobileApp> Apps
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.ManagedMobileApp>>("apps"); }
            set { BackingStore?.Set("apps", value); }
        }
#endif
        /// <summary>Navigation property to list of inclusion and exclusion groups to which the policy is deployed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.TargetedManagedAppPolicyAssignment>? Assignments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.TargetedManagedAppPolicyAssignment>?>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.TargetedManagedAppPolicyAssignment> Assignments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.TargetedManagedAppPolicyAssignment>>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#endif
        /// <summary>Count of apps to which the current policy is deployed.</summary>
        public int? DeployedAppCount
        {
            get { return BackingStore?.Get<int?>("deployedAppCount"); }
            set { BackingStore?.Set("deployedAppCount", value); }
        }
        /// <summary>Navigation property to deployment summary of the configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ManagedAppPolicyDeploymentSummary? DeploymentSummary
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ManagedAppPolicyDeploymentSummary?>("deploymentSummary"); }
            set { BackingStore?.Set("deploymentSummary", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ManagedAppPolicyDeploymentSummary DeploymentSummary
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ManagedAppPolicyDeploymentSummary>("deploymentSummary"); }
            set { BackingStore?.Set("deploymentSummary", value); }
        }
#endif
        /// <summary>Indicates if the policy is deployed to any inclusion groups or not.</summary>
        public bool? IsAssigned
        {
            get { return BackingStore?.Get<bool?>("isAssigned"); }
            set { BackingStore?.Set("isAssigned", value); }
        }
        /// <summary>Management levels for apps</summary>
        public Microsoft.Graph.Beta.Models.AppManagementLevel? TargetedAppManagementLevels
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AppManagementLevel?>("targetedAppManagementLevels"); }
            set { BackingStore?.Set("targetedAppManagementLevels", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.TargetedManagedAppConfiguration"/> and sets the default values.
        /// </summary>
        public TargetedManagedAppConfiguration() : base()
        {
            OdataType = "#microsoft.graph.targetedManagedAppConfiguration";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.TargetedManagedAppConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.TargetedManagedAppConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.TargetedManagedAppConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "appGroupType", n => { AppGroupType = n.GetEnumValue<Microsoft.Graph.Beta.Models.TargetedManagedAppGroupType>(); } },
                { "apps", n => { Apps = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.ManagedMobileApp>(Microsoft.Graph.Beta.Models.ManagedMobileApp.CreateFromDiscriminatorValue)?.ToList(); } },
                { "assignments", n => { Assignments = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.TargetedManagedAppPolicyAssignment>(Microsoft.Graph.Beta.Models.TargetedManagedAppPolicyAssignment.CreateFromDiscriminatorValue)?.ToList(); } },
                { "deployedAppCount", n => { DeployedAppCount = n.GetIntValue(); } },
                { "deploymentSummary", n => { DeploymentSummary = n.GetObjectValue<Microsoft.Graph.Beta.Models.ManagedAppPolicyDeploymentSummary>(Microsoft.Graph.Beta.Models.ManagedAppPolicyDeploymentSummary.CreateFromDiscriminatorValue); } },
                { "isAssigned", n => { IsAssigned = n.GetBoolValue(); } },
                { "targetedAppManagementLevels", n => { TargetedAppManagementLevels = n.GetEnumValue<Microsoft.Graph.Beta.Models.AppManagementLevel>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.TargetedManagedAppGroupType>("appGroupType", AppGroupType);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.ManagedMobileApp>("apps", Apps);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.TargetedManagedAppPolicyAssignment>("assignments", Assignments);
            writer.WriteIntValue("deployedAppCount", DeployedAppCount);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.ManagedAppPolicyDeploymentSummary>("deploymentSummary", DeploymentSummary);
            writer.WriteBoolValue("isAssigned", IsAssigned);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.AppManagementLevel>("targetedAppManagementLevels", TargetedAppManagementLevels);
        }
    }
}
