// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Partner.Security
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AdminsMfaEnforcedSecurityRequirement : global::Microsoft.Graph.Beta.Models.Partner.Security.SecurityRequirement, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The number of admins who are required to use MFA, but haven&apos;t completed registration.</summary>
        public long? AdminsRequiredNotUsingMfaCount
        {
            get { return BackingStore?.Get<long?>("adminsRequiredNotUsingMfaCount"); }
            set { BackingStore?.Set("adminsRequiredNotUsingMfaCount", value); }
        }
        /// <summary>The legacyPerUserMfaStatus property</summary>
        public global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus? LegacyPerUserMfaStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus?>("legacyPerUserMfaStatus"); }
            set { BackingStore?.Set("legacyPerUserMfaStatus", value); }
        }
        /// <summary>The mfaConditionalAccessPolicyStatus property</summary>
        public global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus? MfaConditionalAccessPolicyStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus?>("mfaConditionalAccessPolicyStatus"); }
            set { BackingStore?.Set("mfaConditionalAccessPolicyStatus", value); }
        }
        /// <summary>The number of admins who are using MFA.</summary>
        public long? MfaEnabledAdminsCount
        {
            get { return BackingStore?.Get<long?>("mfaEnabledAdminsCount"); }
            set { BackingStore?.Set("mfaEnabledAdminsCount", value); }
        }
        /// <summary>The number of users who are using MFA.</summary>
        public long? MfaEnabledUsersCount
        {
            get { return BackingStore?.Get<long?>("mfaEnabledUsersCount"); }
            set { BackingStore?.Set("mfaEnabledUsersCount", value); }
        }
        /// <summary>The securityDefaultsStatus property</summary>
        public global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus? SecurityDefaultsStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus?>("securityDefaultsStatus"); }
            set { BackingStore?.Set("securityDefaultsStatus", value); }
        }
        /// <summary>The total number of admins in the partner&apos;s tenant.</summary>
        public long? TotalAdminsCount
        {
            get { return BackingStore?.Get<long?>("totalAdminsCount"); }
            set { BackingStore?.Set("totalAdminsCount", value); }
        }
        /// <summary>The total number of users in the partner&apos;s tenant.</summary>
        public long? TotalUsersCount
        {
            get { return BackingStore?.Get<long?>("totalUsersCount"); }
            set { BackingStore?.Set("totalUsersCount", value); }
        }
        /// <summary>The number of users who are required to use MFA, but haven&apos;t completed registration.</summary>
        public long? UsersRequiredNotUsingMfaCount
        {
            get { return BackingStore?.Get<long?>("usersRequiredNotUsingMfaCount"); }
            set { BackingStore?.Set("usersRequiredNotUsingMfaCount", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Partner.Security.AdminsMfaEnforcedSecurityRequirement"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Partner.Security.AdminsMfaEnforcedSecurityRequirement CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Partner.Security.AdminsMfaEnforcedSecurityRequirement();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "adminsRequiredNotUsingMfaCount", n => { AdminsRequiredNotUsingMfaCount = n.GetLongValue(); } },
                { "legacyPerUserMfaStatus", n => { LegacyPerUserMfaStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus>(); } },
                { "mfaConditionalAccessPolicyStatus", n => { MfaConditionalAccessPolicyStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus>(); } },
                { "mfaEnabledAdminsCount", n => { MfaEnabledAdminsCount = n.GetLongValue(); } },
                { "mfaEnabledUsersCount", n => { MfaEnabledUsersCount = n.GetLongValue(); } },
                { "securityDefaultsStatus", n => { SecurityDefaultsStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus>(); } },
                { "totalAdminsCount", n => { TotalAdminsCount = n.GetLongValue(); } },
                { "totalUsersCount", n => { TotalUsersCount = n.GetLongValue(); } },
                { "usersRequiredNotUsingMfaCount", n => { UsersRequiredNotUsingMfaCount = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteLongValue("adminsRequiredNotUsingMfaCount", AdminsRequiredNotUsingMfaCount);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus>("legacyPerUserMfaStatus", LegacyPerUserMfaStatus);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus>("mfaConditionalAccessPolicyStatus", MfaConditionalAccessPolicyStatus);
            writer.WriteLongValue("mfaEnabledAdminsCount", MfaEnabledAdminsCount);
            writer.WriteLongValue("mfaEnabledUsersCount", MfaEnabledUsersCount);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Partner.Security.PolicyStatus>("securityDefaultsStatus", SecurityDefaultsStatus);
            writer.WriteLongValue("totalAdminsCount", TotalAdminsCount);
            writer.WriteLongValue("totalUsersCount", TotalUsersCount);
            writer.WriteLongValue("usersRequiredNotUsingMfaCount", UsersRequiredNotUsingMfaCount);
        }
    }
}
#pragma warning restore CS0618
