// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// A pool represents a group of embedded SIM activation codes.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class EmbeddedSIMActivationCodePool : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>The total count of activation codes which belong to this pool.</summary>
        public int? ActivationCodeCount
        {
            get { return BackingStore?.Get<int?>("activationCodeCount"); }
            set { BackingStore?.Set("activationCodeCount", value); }
        }
        /// <summary>The activation codes which belong to this pool. This navigation property is used to post activation codes to Intune but cannot be used to read activation codes from Intune.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCode>? ActivationCodes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCode>?>("activationCodes"); }
            set { BackingStore?.Set("activationCodes", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCode> ActivationCodes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCode>>("activationCodes"); }
            set { BackingStore?.Set("activationCodes", value); }
        }
#endif
        /// <summary>Navigational property to a list of targets to which this pool is assigned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePoolAssignment>? Assignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePoolAssignment>?>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePoolAssignment> Assignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePoolAssignment>>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#endif
        /// <summary>The time the embedded SIM activation code pool was created. Generated service side.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Navigational property to a list of device states for this pool.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMDeviceState>? DeviceStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMDeviceState>?>("deviceStates"); }
            set { BackingStore?.Set("deviceStates", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMDeviceState> DeviceStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.EmbeddedSIMDeviceState>>("deviceStates"); }
            set { BackingStore?.Set("deviceStates", value); }
        }
#endif
        /// <summary>The admin defined name of the embedded SIM activation code pool.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The time the embedded SIM activation code pool was last modified. Updated service side.</summary>
        public DateTimeOffset? ModifiedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("modifiedDateTime"); }
            set { BackingStore?.Set("modifiedDateTime", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePool"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePool CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePool();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "activationCodeCount", n => { ActivationCodeCount = n.GetIntValue(); } },
                { "activationCodes", n => { ActivationCodes = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCode>(global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCode.CreateFromDiscriminatorValue)?.AsList(); } },
                { "assignments", n => { Assignments = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePoolAssignment>(global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePoolAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "deviceStates", n => { DeviceStates = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.EmbeddedSIMDeviceState>(global::Microsoft.Graph.Beta.Models.EmbeddedSIMDeviceState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "modifiedDateTime", n => { ModifiedDateTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("activationCodeCount", ActivationCodeCount);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCode>("activationCodes", ActivationCodes);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.EmbeddedSIMActivationCodePoolAssignment>("assignments", Assignments);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.EmbeddedSIMDeviceState>("deviceStates", DeviceStates);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteDateTimeOffsetValue("modifiedDateTime", ModifiedDateTime);
        }
    }
}
#pragma warning restore CS0618
