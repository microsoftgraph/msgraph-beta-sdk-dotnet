// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class OnPremisesAgent : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>List of onPremisesAgentGroups that an onPremisesAgent is assigned to. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.OnPremisesAgentGroup>? AgentGroups
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.OnPremisesAgentGroup>?>("agentGroups"); }
            set { BackingStore?.Set("agentGroups", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.OnPremisesAgentGroup> AgentGroups
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.OnPremisesAgentGroup>>("agentGroups"); }
            set { BackingStore?.Set("agentGroups", value); }
        }
#endif
        /// <summary>The external IP address as detected by the service for the agent machine. Read-only</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalIp
        {
            get { return BackingStore?.Get<string?>("externalIp"); }
            set { BackingStore?.Set("externalIp", value); }
        }
#nullable restore
#else
        public string ExternalIp
        {
            get { return BackingStore?.Get<string>("externalIp"); }
            set { BackingStore?.Set("externalIp", value); }
        }
#endif
        /// <summary>The name of the machine that the agent is running on. Read-only</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MachineName
        {
            get { return BackingStore?.Get<string?>("machineName"); }
            set { BackingStore?.Set("machineName", value); }
        }
#nullable restore
#else
        public string MachineName
        {
            get { return BackingStore?.Get<string>("machineName"); }
            set { BackingStore?.Set("machineName", value); }
        }
#endif
        /// <summary>The status property</summary>
        public Microsoft.Graph.Beta.Models.AgentStatus? Status
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AgentStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>Possible values are: applicationProxy, exchangeOnline, authentication, provisioning, adAdministration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.OnPremisesPublishingType?>? SupportedPublishingTypes
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.OnPremisesPublishingType?>?>("supportedPublishingTypes"); }
            set { BackingStore?.Set("supportedPublishingTypes", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.OnPremisesPublishingType?> SupportedPublishingTypes
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.OnPremisesPublishingType?>>("supportedPublishingTypes"); }
            set { BackingStore?.Set("supportedPublishingTypes", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.OnPremisesAgent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.OnPremisesAgent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.OnPremisesAgent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "agentGroups", n => { AgentGroups = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.OnPremisesAgentGroup>(Microsoft.Graph.Beta.Models.OnPremisesAgentGroup.CreateFromDiscriminatorValue)?.ToList(); } },
                { "externalIp", n => { ExternalIp = n.GetStringValue(); } },
                { "machineName", n => { MachineName = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<Microsoft.Graph.Beta.Models.AgentStatus>(); } },
                { "supportedPublishingTypes", n => { SupportedPublishingTypes = n.GetCollectionOfEnumValues<Microsoft.Graph.Beta.Models.OnPremisesPublishingType>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.OnPremisesAgentGroup>("agentGroups", AgentGroups);
            writer.WriteStringValue("externalIp", ExternalIp);
            writer.WriteStringValue("machineName", MachineName);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.AgentStatus>("status", Status);
            writer.WriteCollectionOfEnumValues<Microsoft.Graph.Beta.Models.OnPremisesPublishingType>("supportedPublishingTypes", SupportedPublishingTypes);
        }
    }
}
