// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class MonthlyUserInsightMetricsRoot : Entity, IParsable 
    {
        /// <summary>Insights for active users on apps registered in the tenant for a specified period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ActiveUsersMetric>? ActiveUsers {
            get { return BackingStore?.Get<List<ActiveUsersMetric>?>("activeUsers"); }
            set { BackingStore?.Set("activeUsers", value); }
        }
#nullable restore
#else
        public List<ActiveUsersMetric> ActiveUsers {
            get { return BackingStore?.Get<List<ActiveUsersMetric>>("activeUsers"); }
            set { BackingStore?.Set("activeUsers", value); }
        }
#endif
        /// <summary>The activeUsersBreakdown property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ActiveUsersBreakdownMetric>? ActiveUsersBreakdown {
            get { return BackingStore?.Get<List<ActiveUsersBreakdownMetric>?>("activeUsersBreakdown"); }
            set { BackingStore?.Set("activeUsersBreakdown", value); }
        }
#nullable restore
#else
        public List<ActiveUsersBreakdownMetric> ActiveUsersBreakdown {
            get { return BackingStore?.Get<List<ActiveUsersBreakdownMetric>>("activeUsersBreakdown"); }
            set { BackingStore?.Set("activeUsersBreakdown", value); }
        }
#endif
        /// <summary>Insights for authentications on apps registered in the tenant for a specified period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AuthenticationsMetric>? Authentications {
            get { return BackingStore?.Get<List<AuthenticationsMetric>?>("authentications"); }
            set { BackingStore?.Set("authentications", value); }
        }
#nullable restore
#else
        public List<AuthenticationsMetric> Authentications {
            get { return BackingStore?.Get<List<AuthenticationsMetric>>("authentications"); }
            set { BackingStore?.Set("authentications", value); }
        }
#endif
        /// <summary>The inactiveUsers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MonthlyInactiveUsersMetric>? InactiveUsers {
            get { return BackingStore?.Get<List<MonthlyInactiveUsersMetric>?>("inactiveUsers"); }
            set { BackingStore?.Set("inactiveUsers", value); }
        }
#nullable restore
#else
        public List<MonthlyInactiveUsersMetric> InactiveUsers {
            get { return BackingStore?.Get<List<MonthlyInactiveUsersMetric>>("inactiveUsers"); }
            set { BackingStore?.Set("inactiveUsers", value); }
        }
#endif
        /// <summary>The inactiveUsersByApplication property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MonthlyInactiveUsersByApplicationMetric>? InactiveUsersByApplication {
            get { return BackingStore?.Get<List<MonthlyInactiveUsersByApplicationMetric>?>("inactiveUsersByApplication"); }
            set { BackingStore?.Set("inactiveUsersByApplication", value); }
        }
#nullable restore
#else
        public List<MonthlyInactiveUsersByApplicationMetric> InactiveUsersByApplication {
            get { return BackingStore?.Get<List<MonthlyInactiveUsersByApplicationMetric>>("inactiveUsersByApplication"); }
            set { BackingStore?.Set("inactiveUsersByApplication", value); }
        }
#endif
        /// <summary>Insights for MFA usage on apps registered in the tenant for a specified period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MfaCompletionMetric>? MfaCompletions {
            get { return BackingStore?.Get<List<MfaCompletionMetric>?>("mfaCompletions"); }
            set { BackingStore?.Set("mfaCompletions", value); }
        }
#nullable restore
#else
        public List<MfaCompletionMetric> MfaCompletions {
            get { return BackingStore?.Get<List<MfaCompletionMetric>>("mfaCompletions"); }
            set { BackingStore?.Set("mfaCompletions", value); }
        }
#endif
        /// <summary>Insights for all user requests on apps registered in the tenant for a specified period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<UserRequestsMetric>? Requests {
            get { return BackingStore?.Get<List<UserRequestsMetric>?>("requests"); }
            set { BackingStore?.Set("requests", value); }
        }
#nullable restore
#else
        public List<UserRequestsMetric> Requests {
            get { return BackingStore?.Get<List<UserRequestsMetric>>("requests"); }
            set { BackingStore?.Set("requests", value); }
        }
#endif
        /// <summary>Total sign-ups on apps registered in the tenant for a specified period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<UserSignUpMetric>? SignUps {
            get { return BackingStore?.Get<List<UserSignUpMetric>?>("signUps"); }
            set { BackingStore?.Set("signUps", value); }
        }
#nullable restore
#else
        public List<UserSignUpMetric> SignUps {
            get { return BackingStore?.Get<List<UserSignUpMetric>>("signUps"); }
            set { BackingStore?.Set("signUps", value); }
        }
#endif
        /// <summary>Summary of all usage insights on apps registered in the tenant for a specified period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<InsightSummary>? Summary {
            get { return BackingStore?.Get<List<InsightSummary>?>("summary"); }
            set { BackingStore?.Set("summary", value); }
        }
#nullable restore
#else
        public List<InsightSummary> Summary {
            get { return BackingStore?.Get<List<InsightSummary>>("summary"); }
            set { BackingStore?.Set("summary", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="MonthlyUserInsightMetricsRoot"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new MonthlyUserInsightMetricsRoot CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MonthlyUserInsightMetricsRoot();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"activeUsers", n => { ActiveUsers = n.GetCollectionOfObjectValues<ActiveUsersMetric>(ActiveUsersMetric.CreateFromDiscriminatorValue)?.ToList(); } },
                {"activeUsersBreakdown", n => { ActiveUsersBreakdown = n.GetCollectionOfObjectValues<ActiveUsersBreakdownMetric>(ActiveUsersBreakdownMetric.CreateFromDiscriminatorValue)?.ToList(); } },
                {"authentications", n => { Authentications = n.GetCollectionOfObjectValues<AuthenticationsMetric>(AuthenticationsMetric.CreateFromDiscriminatorValue)?.ToList(); } },
                {"inactiveUsers", n => { InactiveUsers = n.GetCollectionOfObjectValues<MonthlyInactiveUsersMetric>(MonthlyInactiveUsersMetric.CreateFromDiscriminatorValue)?.ToList(); } },
                {"inactiveUsersByApplication", n => { InactiveUsersByApplication = n.GetCollectionOfObjectValues<MonthlyInactiveUsersByApplicationMetric>(MonthlyInactiveUsersByApplicationMetric.CreateFromDiscriminatorValue)?.ToList(); } },
                {"mfaCompletions", n => { MfaCompletions = n.GetCollectionOfObjectValues<MfaCompletionMetric>(MfaCompletionMetric.CreateFromDiscriminatorValue)?.ToList(); } },
                {"requests", n => { Requests = n.GetCollectionOfObjectValues<UserRequestsMetric>(UserRequestsMetric.CreateFromDiscriminatorValue)?.ToList(); } },
                {"signUps", n => { SignUps = n.GetCollectionOfObjectValues<UserSignUpMetric>(UserSignUpMetric.CreateFromDiscriminatorValue)?.ToList(); } },
                {"summary", n => { Summary = n.GetCollectionOfObjectValues<InsightSummary>(InsightSummary.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<ActiveUsersMetric>("activeUsers", ActiveUsers);
            writer.WriteCollectionOfObjectValues<ActiveUsersBreakdownMetric>("activeUsersBreakdown", ActiveUsersBreakdown);
            writer.WriteCollectionOfObjectValues<AuthenticationsMetric>("authentications", Authentications);
            writer.WriteCollectionOfObjectValues<MonthlyInactiveUsersMetric>("inactiveUsers", InactiveUsers);
            writer.WriteCollectionOfObjectValues<MonthlyInactiveUsersByApplicationMetric>("inactiveUsersByApplication", InactiveUsersByApplication);
            writer.WriteCollectionOfObjectValues<MfaCompletionMetric>("mfaCompletions", MfaCompletions);
            writer.WriteCollectionOfObjectValues<UserRequestsMetric>("requests", Requests);
            writer.WriteCollectionOfObjectValues<UserSignUpMetric>("signUps", SignUps);
            writer.WriteCollectionOfObjectValues<InsightSummary>("summary", Summary);
        }
    }
}
