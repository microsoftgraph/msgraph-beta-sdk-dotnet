// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DriveItem : global::Microsoft.Graph.Beta.Models.BaseItem, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The list of recent activities that took place on this item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ItemActivityOLD>? Activities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ItemActivityOLD>?>("activities"); }
            set { BackingStore?.Set("activities", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ItemActivityOLD> Activities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ItemActivityOLD>>("activities"); }
            set { BackingStore?.Set("activities", value); }
        }
#endif
        /// <summary>Analytics about the view activities that took place on this item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ItemAnalytics? Analytics
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ItemAnalytics?>("analytics"); }
            set { BackingStore?.Set("analytics", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ItemAnalytics Analytics
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ItemAnalytics>("analytics"); }
            set { BackingStore?.Set("analytics", value); }
        }
#endif
        /// <summary>Audio metadata, if the item is an audio file. Read-only. Only on OneDrive Personal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Audio? Audio
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Audio?>("audio"); }
            set { BackingStore?.Set("audio", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Audio Audio
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Audio>("audio"); }
            set { BackingStore?.Set("audio", value); }
        }
#endif
        /// <summary>Bundle metadata, if the item is a bundle. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Bundle? Bundle
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Bundle?>("bundle"); }
            set { BackingStore?.Set("bundle", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Bundle Bundle
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Bundle>("bundle"); }
            set { BackingStore?.Set("bundle", value); }
        }
#endif
        /// <summary>Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DriveItem>? Children
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DriveItem>?>("children"); }
            set { BackingStore?.Set("children", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DriveItem> Children
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DriveItem>>("children"); }
            set { BackingStore?.Set("children", value); }
        }
#endif
        /// <summary>The content stream, if the item represents a file. The content property will have a potentially breaking change in behavior in the future. It will stream content directly instead of redirecting. To proactively opt in to the new behavior ahead of time, use the contentStream property instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? Content
        {
            get { return BackingStore?.Get<byte[]?>("content"); }
            set { BackingStore?.Set("content", value); }
        }
#nullable restore
#else
        public byte[] Content
        {
            get { return BackingStore?.Get<byte[]>("content"); }
            set { BackingStore?.Set("content", value); }
        }
#endif
        /// <summary>The content stream, if the item represents a file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? ContentStream
        {
            get { return BackingStore?.Get<byte[]?>("contentStream"); }
            set { BackingStore?.Set("contentStream", value); }
        }
#nullable restore
#else
        public byte[] ContentStream
        {
            get { return BackingStore?.Get<byte[]>("contentStream"); }
            set { BackingStore?.Set("contentStream", value); }
        }
#endif
        /// <summary>An eTag for the content of the item. This eTag isn&apos;t changed if only the metadata is changed. Note This property isn&apos;t returned if the item is a folder. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CTag
        {
            get { return BackingStore?.Get<string?>("cTag"); }
            set { BackingStore?.Set("cTag", value); }
        }
#nullable restore
#else
        public string CTag
        {
            get { return BackingStore?.Get<string>("cTag"); }
            set { BackingStore?.Set("cTag", value); }
        }
#endif
        /// <summary>Information about the deleted state of the item. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Deleted? Deleted
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Deleted?>("deleted"); }
            set { BackingStore?.Set("deleted", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Deleted Deleted
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Deleted>("deleted"); }
            set { BackingStore?.Set("deleted", value); }
        }
#endif
        /// <summary>File metadata, if the item is a file. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.FileObject? File
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.FileObject?>("file"); }
            set { BackingStore?.Set("file", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.FileObject File
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.FileObject>("file"); }
            set { BackingStore?.Set("file", value); }
        }
#endif
        /// <summary>File system information on client. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.FileSystemInfo? FileSystemInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.FileSystemInfo?>("fileSystemInfo"); }
            set { BackingStore?.Set("fileSystemInfo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.FileSystemInfo FileSystemInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.FileSystemInfo>("fileSystemInfo"); }
            set { BackingStore?.Set("fileSystemInfo", value); }
        }
#endif
        /// <summary>Folder metadata, if the item is a folder. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Folder? Folder
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Folder?>("folder"); }
            set { BackingStore?.Set("folder", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Folder Folder
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Folder>("folder"); }
            set { BackingStore?.Set("folder", value); }
        }
#endif
        /// <summary>Image metadata, if the item is an image. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Image? Image
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Image?>("image"); }
            set { BackingStore?.Set("image", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Image Image
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Image>("image"); }
            set { BackingStore?.Set("image", value); }
        }
#endif
        /// <summary>For drives in SharePoint, the associated document library list item. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ListItem? ListItem
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ListItem?>("listItem"); }
            set { BackingStore?.Set("listItem", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ListItem ListItem
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ListItem>("listItem"); }
            set { BackingStore?.Set("listItem", value); }
        }
#endif
        /// <summary>Location metadata, if the item has location data. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.GeoCoordinates? Location
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.GeoCoordinates?>("location"); }
            set { BackingStore?.Set("location", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.GeoCoordinates Location
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.GeoCoordinates>("location"); }
            set { BackingStore?.Set("location", value); }
        }
#endif
        /// <summary>Malware metadata, if the item was detected to contain malware. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Malware? Malware
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Malware?>("malware"); }
            set { BackingStore?.Set("malware", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Malware Malware
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Malware>("malware"); }
            set { BackingStore?.Set("malware", value); }
        }
#endif
        /// <summary>Information about the media (audio or video) item. Read-write. Only on OneDrive for Business and SharePoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Media? Media
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Media?>("media"); }
            set { BackingStore?.Set("media", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Media Media
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Media>("media"); }
            set { BackingStore?.Set("media", value); }
        }
#endif
        /// <summary>If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Package? Package
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Package?>("package"); }
            set { BackingStore?.Set("package", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Package Package
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Package>("package"); }
            set { BackingStore?.Set("package", value); }
        }
#endif
        /// <summary>If present, indicates that indicates that one or more operations that might affect the state of the driveItem are pending completion. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PendingOperations? PendingOperations
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PendingOperations?>("pendingOperations"); }
            set { BackingStore?.Set("pendingOperations", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PendingOperations PendingOperations
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PendingOperations>("pendingOperations"); }
            set { BackingStore?.Set("pendingOperations", value); }
        }
#endif
        /// <summary>The set of permissions for the item. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Permission>? Permissions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Permission>?>("permissions"); }
            set { BackingStore?.Set("permissions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Permission> Permissions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Permission>>("permissions"); }
            set { BackingStore?.Set("permissions", value); }
        }
#endif
        /// <summary>Photo metadata, if the item is a photo. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Photo? Photo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Photo?>("photo"); }
            set { BackingStore?.Set("photo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Photo Photo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Photo>("photo"); }
            set { BackingStore?.Set("photo", value); }
        }
#endif
        /// <summary>Provides information about the published or checked-out state of an item, in locations that support such actions. This property isn&apos;t returned by default. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PublicationFacet? Publication
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PublicationFacet?>("publication"); }
            set { BackingStore?.Set("publication", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PublicationFacet Publication
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PublicationFacet>("publication"); }
            set { BackingStore?.Set("publication", value); }
        }
#endif
        /// <summary>Remote item data, if the item is shared from a drive other than the one being accessed. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.RemoteItem? RemoteItem
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RemoteItem?>("remoteItem"); }
            set { BackingStore?.Set("remoteItem", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.RemoteItem RemoteItem
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RemoteItem>("remoteItem"); }
            set { BackingStore?.Set("remoteItem", value); }
        }
#endif
        /// <summary>Information about retention label and settings enforced on the driveItem. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ItemRetentionLabel? RetentionLabel
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ItemRetentionLabel?>("retentionLabel"); }
            set { BackingStore?.Set("retentionLabel", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ItemRetentionLabel RetentionLabel
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ItemRetentionLabel>("retentionLabel"); }
            set { BackingStore?.Set("retentionLabel", value); }
        }
#endif
        /// <summary>If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Root? Root
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Root?>("root"); }
            set { BackingStore?.Set("root", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Root Root
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Root>("root"); }
            set { BackingStore?.Set("root", value); }
        }
#endif
        /// <summary>Search metadata, if the item is from a search result. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.SearchResult? SearchResult
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SearchResult?>("searchResult"); }
            set { BackingStore?.Set("searchResult", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.SearchResult SearchResult
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SearchResult>("searchResult"); }
            set { BackingStore?.Set("searchResult", value); }
        }
#endif
        /// <summary>Indicates that the item was shared with others and provides information about the shared state of the item. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Shared? Shared
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Shared?>("shared"); }
            set { BackingStore?.Set("shared", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Shared Shared
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Shared>("shared"); }
            set { BackingStore?.Set("shared", value); }
        }
#endif
        /// <summary>Returns identifiers useful for SharePoint REST compatibility. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.SharepointIds? SharepointIds
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SharepointIds?>("sharepointIds"); }
            set { BackingStore?.Set("sharepointIds", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.SharepointIds SharepointIds
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SharepointIds>("sharepointIds"); }
            set { BackingStore?.Set("sharepointIds", value); }
        }
#endif
        /// <summary>Size of the item in bytes. Read-only.</summary>
        public long? Size
        {
            get { return BackingStore?.Get<long?>("size"); }
            set { BackingStore?.Set("size", value); }
        }
        /// <summary>Information about the drive item source. Read-only. Only on OneDrive for Business and SharePoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.DriveItemSource? Source
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DriveItemSource?>("source"); }
            set { BackingStore?.Set("source", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.DriveItemSource Source
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DriveItemSource>("source"); }
            set { BackingStore?.Set("source", value); }
        }
#endif
        /// <summary>If the current item is also available as a special folder, this facet is returned. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.SpecialFolder? SpecialFolder
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SpecialFolder?>("specialFolder"); }
            set { BackingStore?.Set("specialFolder", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.SpecialFolder SpecialFolder
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SpecialFolder>("specialFolder"); }
            set { BackingStore?.Set("specialFolder", value); }
        }
#endif
        /// <summary>The set of subscriptions on the item. Only supported on the root of a drive.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Subscription>? Subscriptions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Subscription>?>("subscriptions"); }
            set { BackingStore?.Set("subscriptions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Subscription> Subscriptions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Subscription>>("subscriptions"); }
            set { BackingStore?.Set("subscriptions", value); }
        }
#endif
        /// <summary>Collection of thumbnailSet objects associated with the item. For more information, see getting thumbnails. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ThumbnailSet>? Thumbnails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ThumbnailSet>?>("thumbnails"); }
            set { BackingStore?.Set("thumbnails", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ThumbnailSet> Thumbnails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ThumbnailSet>>("thumbnails"); }
            set { BackingStore?.Set("thumbnails", value); }
        }
#endif
        /// <summary>The list of previous versions of the item. For more info, see getting previous versions. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DriveItemVersion>? Versions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DriveItemVersion>?>("versions"); }
            set { BackingStore?.Set("versions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DriveItemVersion> Versions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DriveItemVersion>>("versions"); }
            set { BackingStore?.Set("versions", value); }
        }
#endif
        /// <summary>Video metadata, if the item is a video. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Video? Video
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Video?>("video"); }
            set { BackingStore?.Set("video", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Video Video
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Video>("video"); }
            set { BackingStore?.Set("video", value); }
        }
#endif
        /// <summary>Returns information specific to the calling user for this drive item. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.DriveItemViewpoint? Viewpoint
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DriveItemViewpoint?>("viewpoint"); }
            set { BackingStore?.Set("viewpoint", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.DriveItemViewpoint Viewpoint
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DriveItemViewpoint>("viewpoint"); }
            set { BackingStore?.Set("viewpoint", value); }
        }
#endif
        /// <summary>WebDAV compatible URL for the item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebDavUrl
        {
            get { return BackingStore?.Get<string?>("webDavUrl"); }
            set { BackingStore?.Set("webDavUrl", value); }
        }
#nullable restore
#else
        public string WebDavUrl
        {
            get { return BackingStore?.Get<string>("webDavUrl"); }
            set { BackingStore?.Set("webDavUrl", value); }
        }
#endif
        /// <summary>For files that are Excel spreadsheets, access to the workbook API to work with the spreadsheet&apos;s contents. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Workbook? Workbook
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Workbook?>("workbook"); }
            set { BackingStore?.Set("workbook", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Workbook Workbook
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Workbook>("workbook"); }
            set { BackingStore?.Set("workbook", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.DriveItem"/> and sets the default values.
        /// </summary>
        public DriveItem() : base()
        {
            OdataType = "#microsoft.graph.driveItem";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.DriveItem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.DriveItem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.DriveItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "activities", n => { Activities = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ItemActivityOLD>(global::Microsoft.Graph.Beta.Models.ItemActivityOLD.CreateFromDiscriminatorValue)?.AsList(); } },
                { "analytics", n => { Analytics = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ItemAnalytics>(global::Microsoft.Graph.Beta.Models.ItemAnalytics.CreateFromDiscriminatorValue); } },
                { "audio", n => { Audio = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Audio>(global::Microsoft.Graph.Beta.Models.Audio.CreateFromDiscriminatorValue); } },
                { "bundle", n => { Bundle = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Bundle>(global::Microsoft.Graph.Beta.Models.Bundle.CreateFromDiscriminatorValue); } },
                { "cTag", n => { CTag = n.GetStringValue(); } },
                { "children", n => { Children = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DriveItem>(global::Microsoft.Graph.Beta.Models.DriveItem.CreateFromDiscriminatorValue)?.AsList(); } },
                { "content", n => { Content = n.GetByteArrayValue(); } },
                { "contentStream", n => { ContentStream = n.GetByteArrayValue(); } },
                { "deleted", n => { Deleted = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Deleted>(global::Microsoft.Graph.Beta.Models.Deleted.CreateFromDiscriminatorValue); } },
                { "file", n => { File = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.FileObject>(global::Microsoft.Graph.Beta.Models.FileObject.CreateFromDiscriminatorValue); } },
                { "fileSystemInfo", n => { FileSystemInfo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.FileSystemInfo>(global::Microsoft.Graph.Beta.Models.FileSystemInfo.CreateFromDiscriminatorValue); } },
                { "folder", n => { Folder = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Folder>(global::Microsoft.Graph.Beta.Models.Folder.CreateFromDiscriminatorValue); } },
                { "image", n => { Image = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Image>(global::Microsoft.Graph.Beta.Models.Image.CreateFromDiscriminatorValue); } },
                { "listItem", n => { ListItem = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ListItem>(global::Microsoft.Graph.Beta.Models.ListItem.CreateFromDiscriminatorValue); } },
                { "location", n => { Location = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.GeoCoordinates>(global::Microsoft.Graph.Beta.Models.GeoCoordinates.CreateFromDiscriminatorValue); } },
                { "malware", n => { Malware = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Malware>(global::Microsoft.Graph.Beta.Models.Malware.CreateFromDiscriminatorValue); } },
                { "media", n => { Media = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Media>(global::Microsoft.Graph.Beta.Models.Media.CreateFromDiscriminatorValue); } },
                { "package", n => { Package = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Package>(global::Microsoft.Graph.Beta.Models.Package.CreateFromDiscriminatorValue); } },
                { "pendingOperations", n => { PendingOperations = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PendingOperations>(global::Microsoft.Graph.Beta.Models.PendingOperations.CreateFromDiscriminatorValue); } },
                { "permissions", n => { Permissions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Permission>(global::Microsoft.Graph.Beta.Models.Permission.CreateFromDiscriminatorValue)?.AsList(); } },
                { "photo", n => { Photo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Photo>(global::Microsoft.Graph.Beta.Models.Photo.CreateFromDiscriminatorValue); } },
                { "publication", n => { Publication = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PublicationFacet>(global::Microsoft.Graph.Beta.Models.PublicationFacet.CreateFromDiscriminatorValue); } },
                { "remoteItem", n => { RemoteItem = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.RemoteItem>(global::Microsoft.Graph.Beta.Models.RemoteItem.CreateFromDiscriminatorValue); } },
                { "retentionLabel", n => { RetentionLabel = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ItemRetentionLabel>(global::Microsoft.Graph.Beta.Models.ItemRetentionLabel.CreateFromDiscriminatorValue); } },
                { "root", n => { Root = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Root>(global::Microsoft.Graph.Beta.Models.Root.CreateFromDiscriminatorValue); } },
                { "searchResult", n => { SearchResult = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.SearchResult>(global::Microsoft.Graph.Beta.Models.SearchResult.CreateFromDiscriminatorValue); } },
                { "shared", n => { Shared = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Shared>(global::Microsoft.Graph.Beta.Models.Shared.CreateFromDiscriminatorValue); } },
                { "sharepointIds", n => { SharepointIds = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.SharepointIds>(global::Microsoft.Graph.Beta.Models.SharepointIds.CreateFromDiscriminatorValue); } },
                { "size", n => { Size = n.GetLongValue(); } },
                { "source", n => { Source = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.DriveItemSource>(global::Microsoft.Graph.Beta.Models.DriveItemSource.CreateFromDiscriminatorValue); } },
                { "specialFolder", n => { SpecialFolder = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.SpecialFolder>(global::Microsoft.Graph.Beta.Models.SpecialFolder.CreateFromDiscriminatorValue); } },
                { "subscriptions", n => { Subscriptions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Subscription>(global::Microsoft.Graph.Beta.Models.Subscription.CreateFromDiscriminatorValue)?.AsList(); } },
                { "thumbnails", n => { Thumbnails = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ThumbnailSet>(global::Microsoft.Graph.Beta.Models.ThumbnailSet.CreateFromDiscriminatorValue)?.AsList(); } },
                { "versions", n => { Versions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DriveItemVersion>(global::Microsoft.Graph.Beta.Models.DriveItemVersion.CreateFromDiscriminatorValue)?.AsList(); } },
                { "video", n => { Video = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Video>(global::Microsoft.Graph.Beta.Models.Video.CreateFromDiscriminatorValue); } },
                { "viewpoint", n => { Viewpoint = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.DriveItemViewpoint>(global::Microsoft.Graph.Beta.Models.DriveItemViewpoint.CreateFromDiscriminatorValue); } },
                { "webDavUrl", n => { WebDavUrl = n.GetStringValue(); } },
                { "workbook", n => { Workbook = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Workbook>(global::Microsoft.Graph.Beta.Models.Workbook.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ItemActivityOLD>("activities", Activities);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ItemAnalytics>("analytics", Analytics);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Audio>("audio", Audio);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Bundle>("bundle", Bundle);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DriveItem>("children", Children);
            writer.WriteByteArrayValue("content", Content);
            writer.WriteByteArrayValue("contentStream", ContentStream);
            writer.WriteStringValue("cTag", CTag);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Deleted>("deleted", Deleted);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.FileObject>("file", File);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.FileSystemInfo>("fileSystemInfo", FileSystemInfo);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Folder>("folder", Folder);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Image>("image", Image);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ListItem>("listItem", ListItem);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.GeoCoordinates>("location", Location);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Malware>("malware", Malware);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Media>("media", Media);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Package>("package", Package);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PendingOperations>("pendingOperations", PendingOperations);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Permission>("permissions", Permissions);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Photo>("photo", Photo);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PublicationFacet>("publication", Publication);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.RemoteItem>("remoteItem", RemoteItem);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ItemRetentionLabel>("retentionLabel", RetentionLabel);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Root>("root", Root);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.SearchResult>("searchResult", SearchResult);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Shared>("shared", Shared);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.SharepointIds>("sharepointIds", SharepointIds);
            writer.WriteLongValue("size", Size);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.DriveItemSource>("source", Source);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.SpecialFolder>("specialFolder", SpecialFolder);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Subscription>("subscriptions", Subscriptions);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ThumbnailSet>("thumbnails", Thumbnails);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DriveItemVersion>("versions", Versions);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Video>("video", Video);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.DriveItemViewpoint>("viewpoint", Viewpoint);
            writer.WriteStringValue("webDavUrl", WebDavUrl);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Workbook>("workbook", Workbook);
        }
    }
}
#pragma warning restore CS0618
