// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RoleManagement : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The cloudPC property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple? CloudPC
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple?>("cloudPC"); }
            set { BackingStore?.Set("cloudPC", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple CloudPC
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple>("cloudPC"); }
            set { BackingStore?.Set("cloudPC", value); }
        }
#endif
        /// <summary>The defender property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple? Defender
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple?>("defender"); }
            set { BackingStore?.Set("defender", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple Defender
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple>("defender"); }
            set { BackingStore?.Set("defender", value); }
        }
#endif
        /// <summary>The RbacApplication for Device Management</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple? DeviceManagement
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple?>("deviceManagement"); }
            set { BackingStore?.Set("deviceManagement", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple DeviceManagement
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple>("deviceManagement"); }
            set { BackingStore?.Set("deviceManagement", value); }
        }
#endif
        /// <summary>The directory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.RbacApplication? Directory
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplication?>("directory"); }
            set { BackingStore?.Set("directory", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.RbacApplication Directory
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplication>("directory"); }
            set { BackingStore?.Set("directory", value); }
        }
#endif
        /// <summary>The enterpriseApps property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.RbacApplication>? EnterpriseApps
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RbacApplication>?>("enterpriseApps"); }
            set { BackingStore?.Set("enterpriseApps", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.RbacApplication> EnterpriseApps
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RbacApplication>>("enterpriseApps"); }
            set { BackingStore?.Set("enterpriseApps", value); }
        }
#endif
        /// <summary>The RbacApplication for Entitlement Management</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.RbacApplication? EntitlementManagement
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplication?>("entitlementManagement"); }
            set { BackingStore?.Set("entitlementManagement", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.RbacApplication EntitlementManagement
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RbacApplication>("entitlementManagement"); }
            set { BackingStore?.Set("entitlementManagement", value); }
        }
#endif
        /// <summary>The exchange property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.UnifiedRbacApplication? Exchange
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UnifiedRbacApplication?>("exchange"); }
            set { BackingStore?.Set("exchange", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.UnifiedRbacApplication Exchange
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UnifiedRbacApplication>("exchange"); }
            set { BackingStore?.Set("exchange", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.RoleManagement"/> and sets the default values.
        /// </summary>
        public RoleManagement()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.RoleManagement"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.RoleManagement CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.RoleManagement();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cloudPC", n => { CloudPC = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple>(global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple.CreateFromDiscriminatorValue); } },
                { "defender", n => { Defender = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple>(global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple.CreateFromDiscriminatorValue); } },
                { "deviceManagement", n => { DeviceManagement = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple>(global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple.CreateFromDiscriminatorValue); } },
                { "directory", n => { Directory = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplication>(global::Microsoft.Graph.Beta.Models.RbacApplication.CreateFromDiscriminatorValue); } },
                { "enterpriseApps", n => { EnterpriseApps = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RbacApplication>(global::Microsoft.Graph.Beta.Models.RbacApplication.CreateFromDiscriminatorValue)?.AsList(); } },
                { "entitlementManagement", n => { EntitlementManagement = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplication>(global::Microsoft.Graph.Beta.Models.RbacApplication.CreateFromDiscriminatorValue); } },
                { "exchange", n => { Exchange = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.UnifiedRbacApplication>(global::Microsoft.Graph.Beta.Models.UnifiedRbacApplication.CreateFromDiscriminatorValue); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple>("cloudPC", CloudPC);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple>("defender", Defender);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplicationMultiple>("deviceManagement", DeviceManagement);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplication>("directory", Directory);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RbacApplication>("enterpriseApps", EnterpriseApps);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.RbacApplication>("entitlementManagement", EntitlementManagement);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.UnifiedRbacApplication>("exchange", Exchange);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
