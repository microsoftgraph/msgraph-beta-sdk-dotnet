// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class PrinterCapabilities : IAdditionalDataHolder, IBackedModel, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData {
            get { return BackingStore?.Get<IDictionary<string, object>>("AdditionalData"); }
            set { BackingStore?.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>A list of supported bottom margins(in microns) for the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? BottomMargins {
            get { return BackingStore?.Get<List<int?>?>("bottomMargins"); }
            set { BackingStore?.Set("bottomMargins", value); }
        }
#nullable restore
#else
        public List<int?> BottomMargins {
            get { return BackingStore?.Get<List<int?>>("bottomMargins"); }
            set { BackingStore?.Set("bottomMargins", value); }
        }
#endif
        /// <summary>True if the printer supports collating when printing multiple copies of a multi-page document; false otherwise.</summary>
        public bool? Collation {
            get { return BackingStore?.Get<bool?>("collation"); }
            set { BackingStore?.Set("collation", value); }
        }
        /// <summary>The color modes supported by the printer. Valid values are described in the following table.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintColorMode?>? ColorModes {
            get { return BackingStore?.Get<List<PrintColorMode?>?>("colorModes"); }
            set { BackingStore?.Set("colorModes", value); }
        }
#nullable restore
#else
        public List<PrintColorMode?> ColorModes {
            get { return BackingStore?.Get<List<PrintColorMode?>>("colorModes"); }
            set { BackingStore?.Set("colorModes", value); }
        }
#endif
        /// <summary>A list of supported content (MIME) types that the printer supports. It isn&apos;t guaranteed that the Universal Print service supports printing all of these MIME types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ContentTypes {
            get { return BackingStore?.Get<List<string>?>("contentTypes"); }
            set { BackingStore?.Set("contentTypes", value); }
        }
#nullable restore
#else
        public List<string> ContentTypes {
            get { return BackingStore?.Get<List<string>>("contentTypes"); }
            set { BackingStore?.Set("contentTypes", value); }
        }
#endif
        /// <summary>The range of copies per job supported by the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IntegerRange? CopiesPerJob {
            get { return BackingStore?.Get<IntegerRange?>("copiesPerJob"); }
            set { BackingStore?.Set("copiesPerJob", value); }
        }
#nullable restore
#else
        public IntegerRange CopiesPerJob {
            get { return BackingStore?.Get<IntegerRange>("copiesPerJob"); }
            set { BackingStore?.Set("copiesPerJob", value); }
        }
#endif
        /// <summary>The list of print resolutions in DPI that are supported by the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? Dpis {
            get { return BackingStore?.Get<List<int?>?>("dpis"); }
            set { BackingStore?.Set("dpis", value); }
        }
#nullable restore
#else
        public List<int?> Dpis {
            get { return BackingStore?.Get<List<int?>>("dpis"); }
            set { BackingStore?.Set("dpis", value); }
        }
#endif
        /// <summary>The list of duplex modes that are supported by the printer. Valid values are described in the following table.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintDuplexMode?>? DuplexModes {
            get { return BackingStore?.Get<List<PrintDuplexMode?>?>("duplexModes"); }
            set { BackingStore?.Set("duplexModes", value); }
        }
#nullable restore
#else
        public List<PrintDuplexMode?> DuplexModes {
            get { return BackingStore?.Get<List<PrintDuplexMode?>>("duplexModes"); }
            set { BackingStore?.Set("duplexModes", value); }
        }
#endif
        /// <summary>The feedDirections property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrinterFeedDirection?>? FeedDirections {
            get { return BackingStore?.Get<List<PrinterFeedDirection?>?>("feedDirections"); }
            set { BackingStore?.Set("feedDirections", value); }
        }
#nullable restore
#else
        public List<PrinterFeedDirection?> FeedDirections {
            get { return BackingStore?.Get<List<PrinterFeedDirection?>>("feedDirections"); }
            set { BackingStore?.Set("feedDirections", value); }
        }
#endif
        /// <summary>The list of feed orientations that are supported by the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrinterFeedOrientation?>? FeedOrientations {
            get { return BackingStore?.Get<List<PrinterFeedOrientation?>?>("feedOrientations"); }
            set { BackingStore?.Set("feedOrientations", value); }
        }
#nullable restore
#else
        public List<PrinterFeedOrientation?> FeedOrientations {
            get { return BackingStore?.Get<List<PrinterFeedOrientation?>>("feedOrientations"); }
            set { BackingStore?.Set("feedOrientations", value); }
        }
#endif
        /// <summary>Finishing processes the printer supports for a printed document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintFinishing?>? Finishings {
            get { return BackingStore?.Get<List<PrintFinishing?>?>("finishings"); }
            set { BackingStore?.Set("finishings", value); }
        }
#nullable restore
#else
        public List<PrintFinishing?> Finishings {
            get { return BackingStore?.Get<List<PrintFinishing?>>("finishings"); }
            set { BackingStore?.Set("finishings", value); }
        }
#endif
        /// <summary>Supported input bins for the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? InputBins {
            get { return BackingStore?.Get<List<string>?>("inputBins"); }
            set { BackingStore?.Set("inputBins", value); }
        }
#nullable restore
#else
        public List<string> InputBins {
            get { return BackingStore?.Get<List<string>>("inputBins"); }
            set { BackingStore?.Set("inputBins", value); }
        }
#endif
        /// <summary>True if color printing is supported by the printer; false otherwise. Read-only.</summary>
        public bool? IsColorPrintingSupported {
            get { return BackingStore?.Get<bool?>("isColorPrintingSupported"); }
            set { BackingStore?.Set("isColorPrintingSupported", value); }
        }
        /// <summary>True if the printer supports printing by page ranges; false otherwise.</summary>
        public bool? IsPageRangeSupported {
            get { return BackingStore?.Get<bool?>("isPageRangeSupported"); }
            set { BackingStore?.Set("isPageRangeSupported", value); }
        }
        /// <summary>A list of supported left margins(in microns) for the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? LeftMargins {
            get { return BackingStore?.Get<List<int?>?>("leftMargins"); }
            set { BackingStore?.Set("leftMargins", value); }
        }
#nullable restore
#else
        public List<int?> LeftMargins {
            get { return BackingStore?.Get<List<int?>>("leftMargins"); }
            set { BackingStore?.Set("leftMargins", value); }
        }
#endif
        /// <summary>The media (that is, paper) colors supported by the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MediaColors {
            get { return BackingStore?.Get<List<string>?>("mediaColors"); }
            set { BackingStore?.Set("mediaColors", value); }
        }
#nullable restore
#else
        public List<string> MediaColors {
            get { return BackingStore?.Get<List<string>>("mediaColors"); }
            set { BackingStore?.Set("mediaColors", value); }
        }
#endif
        /// <summary>The media sizes supported by the printer. Supports standard size names for ISO and ANSI media sizes. Valid values are in the following table.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MediaSizes {
            get { return BackingStore?.Get<List<string>?>("mediaSizes"); }
            set { BackingStore?.Set("mediaSizes", value); }
        }
#nullable restore
#else
        public List<string> MediaSizes {
            get { return BackingStore?.Get<List<string>>("mediaSizes"); }
            set { BackingStore?.Set("mediaSizes", value); }
        }
#endif
        /// <summary>The media types supported by the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MediaTypes {
            get { return BackingStore?.Get<List<string>?>("mediaTypes"); }
            set { BackingStore?.Set("mediaTypes", value); }
        }
#nullable restore
#else
        public List<string> MediaTypes {
            get { return BackingStore?.Get<List<string>>("mediaTypes"); }
            set { BackingStore?.Set("mediaTypes", value); }
        }
#endif
        /// <summary>The presentation directions supported by the printer. Supported values are described in the following table.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintMultipageLayout?>? MultipageLayouts {
            get { return BackingStore?.Get<List<PrintMultipageLayout?>?>("multipageLayouts"); }
            set { BackingStore?.Set("multipageLayouts", value); }
        }
#nullable restore
#else
        public List<PrintMultipageLayout?> MultipageLayouts {
            get { return BackingStore?.Get<List<PrintMultipageLayout?>>("multipageLayouts"); }
            set { BackingStore?.Set("multipageLayouts", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The print orientations supported by the printer. Valid values are described in the following table.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintOrientation?>? Orientations {
            get { return BackingStore?.Get<List<PrintOrientation?>?>("orientations"); }
            set { BackingStore?.Set("orientations", value); }
        }
#nullable restore
#else
        public List<PrintOrientation?> Orientations {
            get { return BackingStore?.Get<List<PrintOrientation?>>("orientations"); }
            set { BackingStore?.Set("orientations", value); }
        }
#endif
        /// <summary>The printer&apos;s supported output bins (trays).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OutputBins {
            get { return BackingStore?.Get<List<string>?>("outputBins"); }
            set { BackingStore?.Set("outputBins", value); }
        }
#nullable restore
#else
        public List<string> OutputBins {
            get { return BackingStore?.Get<List<string>>("outputBins"); }
            set { BackingStore?.Set("outputBins", value); }
        }
#endif
        /// <summary>Supported number of Input Pages to impose upon a single Impression.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? PagesPerSheet {
            get { return BackingStore?.Get<List<int?>?>("pagesPerSheet"); }
            set { BackingStore?.Set("pagesPerSheet", value); }
        }
#nullable restore
#else
        public List<int?> PagesPerSheet {
            get { return BackingStore?.Get<List<int?>>("pagesPerSheet"); }
            set { BackingStore?.Set("pagesPerSheet", value); }
        }
#endif
        /// <summary>The print qualities supported by the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintQuality?>? Qualities {
            get { return BackingStore?.Get<List<PrintQuality?>?>("qualities"); }
            set { BackingStore?.Set("qualities", value); }
        }
#nullable restore
#else
        public List<PrintQuality?> Qualities {
            get { return BackingStore?.Get<List<PrintQuality?>>("qualities"); }
            set { BackingStore?.Set("qualities", value); }
        }
#endif
        /// <summary>A list of supported right margins(in microns) for the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? RightMargins {
            get { return BackingStore?.Get<List<int?>?>("rightMargins"); }
            set { BackingStore?.Set("rightMargins", value); }
        }
#nullable restore
#else
        public List<int?> RightMargins {
            get { return BackingStore?.Get<List<int?>>("rightMargins"); }
            set { BackingStore?.Set("rightMargins", value); }
        }
#endif
        /// <summary>Supported print scalings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintScaling?>? Scalings {
            get { return BackingStore?.Get<List<PrintScaling?>?>("scalings"); }
            set { BackingStore?.Set("scalings", value); }
        }
#nullable restore
#else
        public List<PrintScaling?> Scalings {
            get { return BackingStore?.Get<List<PrintScaling?>>("scalings"); }
            set { BackingStore?.Set("scalings", value); }
        }
#endif
        /// <summary>The supportedColorConfigurations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintColorConfiguration?>? SupportedColorConfigurations {
            get { return BackingStore?.Get<List<PrintColorConfiguration?>?>("supportedColorConfigurations"); }
            set { BackingStore?.Set("supportedColorConfigurations", value); }
        }
#nullable restore
#else
        public List<PrintColorConfiguration?> SupportedColorConfigurations {
            get { return BackingStore?.Get<List<PrintColorConfiguration?>>("supportedColorConfigurations"); }
            set { BackingStore?.Set("supportedColorConfigurations", value); }
        }
#endif
        /// <summary>The supportedCopiesPerJob property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IntegerRange? SupportedCopiesPerJob {
            get { return BackingStore?.Get<IntegerRange?>("supportedCopiesPerJob"); }
            set { BackingStore?.Set("supportedCopiesPerJob", value); }
        }
#nullable restore
#else
        public IntegerRange SupportedCopiesPerJob {
            get { return BackingStore?.Get<IntegerRange>("supportedCopiesPerJob"); }
            set { BackingStore?.Set("supportedCopiesPerJob", value); }
        }
#endif
        /// <summary>The supportedDocumentMimeTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedDocumentMimeTypes {
            get { return BackingStore?.Get<List<string>?>("supportedDocumentMimeTypes"); }
            set { BackingStore?.Set("supportedDocumentMimeTypes", value); }
        }
#nullable restore
#else
        public List<string> SupportedDocumentMimeTypes {
            get { return BackingStore?.Get<List<string>>("supportedDocumentMimeTypes"); }
            set { BackingStore?.Set("supportedDocumentMimeTypes", value); }
        }
#endif
        /// <summary>The supportedDuplexConfigurations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintDuplexConfiguration?>? SupportedDuplexConfigurations {
            get { return BackingStore?.Get<List<PrintDuplexConfiguration?>?>("supportedDuplexConfigurations"); }
            set { BackingStore?.Set("supportedDuplexConfigurations", value); }
        }
#nullable restore
#else
        public List<PrintDuplexConfiguration?> SupportedDuplexConfigurations {
            get { return BackingStore?.Get<List<PrintDuplexConfiguration?>>("supportedDuplexConfigurations"); }
            set { BackingStore?.Set("supportedDuplexConfigurations", value); }
        }
#endif
        /// <summary>The supportedFinishings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintFinishing?>? SupportedFinishings {
            get { return BackingStore?.Get<List<PrintFinishing?>?>("supportedFinishings"); }
            set { BackingStore?.Set("supportedFinishings", value); }
        }
#nullable restore
#else
        public List<PrintFinishing?> SupportedFinishings {
            get { return BackingStore?.Get<List<PrintFinishing?>>("supportedFinishings"); }
            set { BackingStore?.Set("supportedFinishings", value); }
        }
#endif
        /// <summary>The supportedMediaColors property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedMediaColors {
            get { return BackingStore?.Get<List<string>?>("supportedMediaColors"); }
            set { BackingStore?.Set("supportedMediaColors", value); }
        }
#nullable restore
#else
        public List<string> SupportedMediaColors {
            get { return BackingStore?.Get<List<string>>("supportedMediaColors"); }
            set { BackingStore?.Set("supportedMediaColors", value); }
        }
#endif
        /// <summary>The supportedMediaSizes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedMediaSizes {
            get { return BackingStore?.Get<List<string>?>("supportedMediaSizes"); }
            set { BackingStore?.Set("supportedMediaSizes", value); }
        }
#nullable restore
#else
        public List<string> SupportedMediaSizes {
            get { return BackingStore?.Get<List<string>>("supportedMediaSizes"); }
            set { BackingStore?.Set("supportedMediaSizes", value); }
        }
#endif
        /// <summary>The supportedMediaTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintMediaType?>? SupportedMediaTypes {
            get { return BackingStore?.Get<List<PrintMediaType?>?>("supportedMediaTypes"); }
            set { BackingStore?.Set("supportedMediaTypes", value); }
        }
#nullable restore
#else
        public List<PrintMediaType?> SupportedMediaTypes {
            get { return BackingStore?.Get<List<PrintMediaType?>>("supportedMediaTypes"); }
            set { BackingStore?.Set("supportedMediaTypes", value); }
        }
#endif
        /// <summary>The supportedOrientations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintOrientation?>? SupportedOrientations {
            get { return BackingStore?.Get<List<PrintOrientation?>?>("supportedOrientations"); }
            set { BackingStore?.Set("supportedOrientations", value); }
        }
#nullable restore
#else
        public List<PrintOrientation?> SupportedOrientations {
            get { return BackingStore?.Get<List<PrintOrientation?>>("supportedOrientations"); }
            set { BackingStore?.Set("supportedOrientations", value); }
        }
#endif
        /// <summary>The supportedOutputBins property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedOutputBins {
            get { return BackingStore?.Get<List<string>?>("supportedOutputBins"); }
            set { BackingStore?.Set("supportedOutputBins", value); }
        }
#nullable restore
#else
        public List<string> SupportedOutputBins {
            get { return BackingStore?.Get<List<string>>("supportedOutputBins"); }
            set { BackingStore?.Set("supportedOutputBins", value); }
        }
#endif
        /// <summary>The supportedPagesPerSheet property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IntegerRange? SupportedPagesPerSheet {
            get { return BackingStore?.Get<IntegerRange?>("supportedPagesPerSheet"); }
            set { BackingStore?.Set("supportedPagesPerSheet", value); }
        }
#nullable restore
#else
        public IntegerRange SupportedPagesPerSheet {
            get { return BackingStore?.Get<IntegerRange>("supportedPagesPerSheet"); }
            set { BackingStore?.Set("supportedPagesPerSheet", value); }
        }
#endif
        /// <summary>The supportedPresentationDirections property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintPresentationDirection?>? SupportedPresentationDirections {
            get { return BackingStore?.Get<List<PrintPresentationDirection?>?>("supportedPresentationDirections"); }
            set { BackingStore?.Set("supportedPresentationDirections", value); }
        }
#nullable restore
#else
        public List<PrintPresentationDirection?> SupportedPresentationDirections {
            get { return BackingStore?.Get<List<PrintPresentationDirection?>>("supportedPresentationDirections"); }
            set { BackingStore?.Set("supportedPresentationDirections", value); }
        }
#endif
        /// <summary>The supportedPrintQualities property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PrintQuality?>? SupportedPrintQualities {
            get { return BackingStore?.Get<List<PrintQuality?>?>("supportedPrintQualities"); }
            set { BackingStore?.Set("supportedPrintQualities", value); }
        }
#nullable restore
#else
        public List<PrintQuality?> SupportedPrintQualities {
            get { return BackingStore?.Get<List<PrintQuality?>>("supportedPrintQualities"); }
            set { BackingStore?.Set("supportedPrintQualities", value); }
        }
#endif
        /// <summary>True if the printer supports scaling PDF pages to match the print media size; false otherwise.</summary>
        public bool? SupportsFitPdfToPage {
            get { return BackingStore?.Get<bool?>("supportsFitPdfToPage"); }
            set { BackingStore?.Set("supportsFitPdfToPage", value); }
        }
        /// <summary>A list of supported top margins(in microns) for the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? TopMargins {
            get { return BackingStore?.Get<List<int?>?>("topMargins"); }
            set { BackingStore?.Set("topMargins", value); }
        }
#nullable restore
#else
        public List<int?> TopMargins {
            get { return BackingStore?.Get<List<int?>>("topMargins"); }
            set { BackingStore?.Set("topMargins", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="PrinterCapabilities"/> and sets the default values.
        /// </summary>
        public PrinterCapabilities()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PrinterCapabilities"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PrinterCapabilities CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PrinterCapabilities();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"bottomMargins", n => { BottomMargins = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
                {"collation", n => { Collation = n.GetBoolValue(); } },
                {"colorModes", n => { ColorModes = n.GetCollectionOfEnumValues<PrintColorMode>()?.ToList(); } },
                {"contentTypes", n => { ContentTypes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"copiesPerJob", n => { CopiesPerJob = n.GetObjectValue<IntegerRange>(IntegerRange.CreateFromDiscriminatorValue); } },
                {"dpis", n => { Dpis = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
                {"duplexModes", n => { DuplexModes = n.GetCollectionOfEnumValues<PrintDuplexMode>()?.ToList(); } },
                {"feedDirections", n => { FeedDirections = n.GetCollectionOfEnumValues<PrinterFeedDirection>()?.ToList(); } },
                {"feedOrientations", n => { FeedOrientations = n.GetCollectionOfEnumValues<PrinterFeedOrientation>()?.ToList(); } },
                {"finishings", n => { Finishings = n.GetCollectionOfEnumValues<PrintFinishing>()?.ToList(); } },
                {"inputBins", n => { InputBins = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"isColorPrintingSupported", n => { IsColorPrintingSupported = n.GetBoolValue(); } },
                {"isPageRangeSupported", n => { IsPageRangeSupported = n.GetBoolValue(); } },
                {"leftMargins", n => { LeftMargins = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
                {"mediaColors", n => { MediaColors = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"mediaSizes", n => { MediaSizes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"mediaTypes", n => { MediaTypes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"multipageLayouts", n => { MultipageLayouts = n.GetCollectionOfEnumValues<PrintMultipageLayout>()?.ToList(); } },
                {"@odata.type", n => { OdataType = n.GetStringValue(); } },
                {"orientations", n => { Orientations = n.GetCollectionOfEnumValues<PrintOrientation>()?.ToList(); } },
                {"outputBins", n => { OutputBins = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"pagesPerSheet", n => { PagesPerSheet = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
                {"qualities", n => { Qualities = n.GetCollectionOfEnumValues<PrintQuality>()?.ToList(); } },
                {"rightMargins", n => { RightMargins = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
                {"scalings", n => { Scalings = n.GetCollectionOfEnumValues<PrintScaling>()?.ToList(); } },
                {"supportedColorConfigurations", n => { SupportedColorConfigurations = n.GetCollectionOfEnumValues<PrintColorConfiguration>()?.ToList(); } },
                {"supportedCopiesPerJob", n => { SupportedCopiesPerJob = n.GetObjectValue<IntegerRange>(IntegerRange.CreateFromDiscriminatorValue); } },
                {"supportedDocumentMimeTypes", n => { SupportedDocumentMimeTypes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"supportedDuplexConfigurations", n => { SupportedDuplexConfigurations = n.GetCollectionOfEnumValues<PrintDuplexConfiguration>()?.ToList(); } },
                {"supportedFinishings", n => { SupportedFinishings = n.GetCollectionOfEnumValues<PrintFinishing>()?.ToList(); } },
                {"supportedMediaColors", n => { SupportedMediaColors = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"supportedMediaSizes", n => { SupportedMediaSizes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"supportedMediaTypes", n => { SupportedMediaTypes = n.GetCollectionOfEnumValues<PrintMediaType>()?.ToList(); } },
                {"supportedOrientations", n => { SupportedOrientations = n.GetCollectionOfEnumValues<PrintOrientation>()?.ToList(); } },
                {"supportedOutputBins", n => { SupportedOutputBins = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"supportedPagesPerSheet", n => { SupportedPagesPerSheet = n.GetObjectValue<IntegerRange>(IntegerRange.CreateFromDiscriminatorValue); } },
                {"supportedPresentationDirections", n => { SupportedPresentationDirections = n.GetCollectionOfEnumValues<PrintPresentationDirection>()?.ToList(); } },
                {"supportedPrintQualities", n => { SupportedPrintQualities = n.GetCollectionOfEnumValues<PrintQuality>()?.ToList(); } },
                {"supportsFitPdfToPage", n => { SupportsFitPdfToPage = n.GetBoolValue(); } },
                {"topMargins", n => { TopMargins = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<int?>("bottomMargins", BottomMargins);
            writer.WriteBoolValue("collation", Collation);
            writer.WriteCollectionOfEnumValues<PrintColorMode>("colorModes", ColorModes);
            writer.WriteCollectionOfPrimitiveValues<string>("contentTypes", ContentTypes);
            writer.WriteObjectValue<IntegerRange>("copiesPerJob", CopiesPerJob);
            writer.WriteCollectionOfPrimitiveValues<int?>("dpis", Dpis);
            writer.WriteCollectionOfEnumValues<PrintDuplexMode>("duplexModes", DuplexModes);
            writer.WriteCollectionOfEnumValues<PrinterFeedDirection>("feedDirections", FeedDirections);
            writer.WriteCollectionOfEnumValues<PrinterFeedOrientation>("feedOrientations", FeedOrientations);
            writer.WriteCollectionOfEnumValues<PrintFinishing>("finishings", Finishings);
            writer.WriteCollectionOfPrimitiveValues<string>("inputBins", InputBins);
            writer.WriteBoolValue("isColorPrintingSupported", IsColorPrintingSupported);
            writer.WriteBoolValue("isPageRangeSupported", IsPageRangeSupported);
            writer.WriteCollectionOfPrimitiveValues<int?>("leftMargins", LeftMargins);
            writer.WriteCollectionOfPrimitiveValues<string>("mediaColors", MediaColors);
            writer.WriteCollectionOfPrimitiveValues<string>("mediaSizes", MediaSizes);
            writer.WriteCollectionOfPrimitiveValues<string>("mediaTypes", MediaTypes);
            writer.WriteCollectionOfEnumValues<PrintMultipageLayout>("multipageLayouts", MultipageLayouts);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteCollectionOfEnumValues<PrintOrientation>("orientations", Orientations);
            writer.WriteCollectionOfPrimitiveValues<string>("outputBins", OutputBins);
            writer.WriteCollectionOfPrimitiveValues<int?>("pagesPerSheet", PagesPerSheet);
            writer.WriteCollectionOfEnumValues<PrintQuality>("qualities", Qualities);
            writer.WriteCollectionOfPrimitiveValues<int?>("rightMargins", RightMargins);
            writer.WriteCollectionOfEnumValues<PrintScaling>("scalings", Scalings);
            writer.WriteCollectionOfEnumValues<PrintColorConfiguration>("supportedColorConfigurations", SupportedColorConfigurations);
            writer.WriteObjectValue<IntegerRange>("supportedCopiesPerJob", SupportedCopiesPerJob);
            writer.WriteCollectionOfPrimitiveValues<string>("supportedDocumentMimeTypes", SupportedDocumentMimeTypes);
            writer.WriteCollectionOfEnumValues<PrintDuplexConfiguration>("supportedDuplexConfigurations", SupportedDuplexConfigurations);
            writer.WriteCollectionOfEnumValues<PrintFinishing>("supportedFinishings", SupportedFinishings);
            writer.WriteCollectionOfPrimitiveValues<string>("supportedMediaColors", SupportedMediaColors);
            writer.WriteCollectionOfPrimitiveValues<string>("supportedMediaSizes", SupportedMediaSizes);
            writer.WriteCollectionOfEnumValues<PrintMediaType>("supportedMediaTypes", SupportedMediaTypes);
            writer.WriteCollectionOfEnumValues<PrintOrientation>("supportedOrientations", SupportedOrientations);
            writer.WriteCollectionOfPrimitiveValues<string>("supportedOutputBins", SupportedOutputBins);
            writer.WriteObjectValue<IntegerRange>("supportedPagesPerSheet", SupportedPagesPerSheet);
            writer.WriteCollectionOfEnumValues<PrintPresentationDirection>("supportedPresentationDirections", SupportedPresentationDirections);
            writer.WriteCollectionOfEnumValues<PrintQuality>("supportedPrintQualities", SupportedPrintQualities);
            writer.WriteBoolValue("supportsFitPdfToPage", SupportsFitPdfToPage);
            writer.WriteCollectionOfPrimitiveValues<int?>("topMargins", TopMargins);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
