// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class ScheduledPermissionsRequest : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The action property</summary>
        public Microsoft.Graph.Beta.Models.UnifiedRoleScheduleRequestActions? Action
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.UnifiedRoleScheduleRequestActions?>("action"); }
            set { BackingStore?.Set("action", value); }
        }
        /// <summary>Defines when the identity created the request.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The identity&apos;s justification for the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Justification
        {
            get { return BackingStore?.Get<string?>("justification"); }
            set { BackingStore?.Set("justification", value); }
        }
#nullable restore
#else
        public string Justification
        {
            get { return BackingStore?.Get<string>("justification"); }
            set { BackingStore?.Set("justification", value); }
        }
#endif
        /// <summary>Additional context for the permissions request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes
        {
            get { return BackingStore?.Get<string?>("notes"); }
            set { BackingStore?.Set("notes", value); }
        }
#nullable restore
#else
        public string Notes
        {
            get { return BackingStore?.Get<string>("notes"); }
            set { BackingStore?.Set("notes", value); }
        }
#endif
        /// <summary>The requestedPermissions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PermissionsDefinition? RequestedPermissions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PermissionsDefinition?>("requestedPermissions"); }
            set { BackingStore?.Set("requestedPermissions", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PermissionsDefinition RequestedPermissions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PermissionsDefinition>("requestedPermissions"); }
            set { BackingStore?.Set("requestedPermissions", value); }
        }
#endif
        /// <summary>When to assign the requested permissions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.RequestSchedule? ScheduleInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RequestSchedule?>("scheduleInfo"); }
            set { BackingStore?.Set("scheduleInfo", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.RequestSchedule ScheduleInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RequestSchedule>("scheduleInfo"); }
            set { BackingStore?.Set("scheduleInfo", value); }
        }
#endif
        /// <summary>The statusDetail property</summary>
        public Microsoft.Graph.Beta.Models.StatusDetail? StatusDetail
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.StatusDetail?>("statusDetail"); }
            set { BackingStore?.Set("statusDetail", value); }
        }
        /// <summary>Ticketing-related metadata that you can use to correlate to the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TicketInfo? TicketInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TicketInfo?>("ticketInfo"); }
            set { BackingStore?.Set("ticketInfo", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TicketInfo TicketInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TicketInfo>("ticketInfo"); }
            set { BackingStore?.Set("ticketInfo", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.ScheduledPermissionsRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.ScheduledPermissionsRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.ScheduledPermissionsRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "action", n => { Action = n.GetEnumValue<Microsoft.Graph.Beta.Models.UnifiedRoleScheduleRequestActions>(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "justification", n => { Justification = n.GetStringValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "requestedPermissions", n => { RequestedPermissions = n.GetObjectValue<Microsoft.Graph.Beta.Models.PermissionsDefinition>(Microsoft.Graph.Beta.Models.PermissionsDefinition.CreateFromDiscriminatorValue); } },
                { "scheduleInfo", n => { ScheduleInfo = n.GetObjectValue<Microsoft.Graph.Beta.Models.RequestSchedule>(Microsoft.Graph.Beta.Models.RequestSchedule.CreateFromDiscriminatorValue); } },
                { "statusDetail", n => { StatusDetail = n.GetEnumValue<Microsoft.Graph.Beta.Models.StatusDetail>(); } },
                { "ticketInfo", n => { TicketInfo = n.GetObjectValue<Microsoft.Graph.Beta.Models.TicketInfo>(Microsoft.Graph.Beta.Models.TicketInfo.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.UnifiedRoleScheduleRequestActions>("action", Action);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("justification", Justification);
            writer.WriteStringValue("notes", Notes);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PermissionsDefinition>("requestedPermissions", RequestedPermissions);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.RequestSchedule>("scheduleInfo", ScheduleInfo);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.StatusDetail>("statusDetail", StatusDetail);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TicketInfo>("ticketInfo", TicketInfo);
        }
    }
}
