// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Mobile App Intent and Install State for a given device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MobileAppIntentAndStateDetail : IAdditionalDataHolder, IBackedModel, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>MobieApp identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApplicationId
        {
            get { return BackingStore?.Get<string?>("applicationId"); }
            set { BackingStore?.Set("applicationId", value); }
        }
#nullable restore
#else
        public string ApplicationId
        {
            get { return BackingStore?.Get<string>("applicationId"); }
            set { BackingStore?.Set("applicationId", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The admin provided or imported title of the app.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Human readable version of the application</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayVersion
        {
            get { return BackingStore?.Get<string?>("displayVersion"); }
            set { BackingStore?.Set("displayVersion", value); }
        }
#nullable restore
#else
        public string DisplayVersion
        {
            get { return BackingStore?.Get<string>("displayVersion"); }
            set { BackingStore?.Set("displayVersion", value); }
        }
#endif
        /// <summary>A list of possible states for application status on an individual device. When devices contact the Intune service and find targeted application enforcement intent, the status of the enforcement is recorded and becomes accessible in the Graph API. Since the application status is identified during device interaction with the Intune service, status records do not immediately appear upon application group assignment; it is created only after the assignment is evaluated in the service and devices start receiving the policy during check-ins.</summary>
        public global::Microsoft.Graph.Beta.Models.ResultantAppState? InstallState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ResultantAppState?>("installState"); }
            set { BackingStore?.Set("installState", value); }
        }
        /// <summary>Indicates the status of the mobile app on the device.</summary>
        public global::Microsoft.Graph.Beta.Models.MobileAppIntent? MobileAppIntent
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MobileAppIntent?>("mobileAppIntent"); }
            set { BackingStore?.Set("mobileAppIntent", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The supported platforms for the app.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.MobileAppSupportedDeviceType>? SupportedDeviceTypes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MobileAppSupportedDeviceType>?>("supportedDeviceTypes"); }
            set { BackingStore?.Set("supportedDeviceTypes", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.MobileAppSupportedDeviceType> SupportedDeviceTypes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MobileAppSupportedDeviceType>>("supportedDeviceTypes"); }
            set { BackingStore?.Set("supportedDeviceTypes", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.MobileAppIntentAndStateDetail"/> and sets the default values.
        /// </summary>
        public MobileAppIntentAndStateDetail()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.MobileAppIntentAndStateDetail"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.MobileAppIntentAndStateDetail CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.MobileAppIntentAndStateDetail();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "applicationId", n => { ApplicationId = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "displayVersion", n => { DisplayVersion = n.GetStringValue(); } },
                { "installState", n => { InstallState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ResultantAppState>(); } },
                { "mobileAppIntent", n => { MobileAppIntent = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.MobileAppIntent>(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "supportedDeviceTypes", n => { SupportedDeviceTypes = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MobileAppSupportedDeviceType>(global::Microsoft.Graph.Beta.Models.MobileAppSupportedDeviceType.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("applicationId", ApplicationId);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("displayVersion", DisplayVersion);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ResultantAppState>("installState", InstallState);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.MobileAppIntent>("mobileAppIntent", MobileAppIntent);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MobileAppSupportedDeviceType>("supportedDeviceTypes", SupportedDeviceTypes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
