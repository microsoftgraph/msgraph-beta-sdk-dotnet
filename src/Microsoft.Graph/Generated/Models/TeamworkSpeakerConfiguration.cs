// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class TeamworkSpeakerConfiguration : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The defaultCommunicationSpeaker property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.TeamworkPeripheral? DefaultCommunicationSpeaker
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral?>("defaultCommunicationSpeaker"); }
            set { BackingStore?.Set("defaultCommunicationSpeaker", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.TeamworkPeripheral DefaultCommunicationSpeaker
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>("defaultCommunicationSpeaker"); }
            set { BackingStore?.Set("defaultCommunicationSpeaker", value); }
        }
#endif
        /// <summary>The defaultSpeaker property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.TeamworkPeripheral? DefaultSpeaker
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral?>("defaultSpeaker"); }
            set { BackingStore?.Set("defaultSpeaker", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.TeamworkPeripheral DefaultSpeaker
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>("defaultSpeaker"); }
            set { BackingStore?.Set("defaultSpeaker", value); }
        }
#endif
        /// <summary>True if the communication speaker is optional. Used to compute the health state if the communication speaker is not optional.</summary>
        public bool? IsCommunicationSpeakerOptional
        {
            get { return BackingStore?.Get<bool?>("isCommunicationSpeakerOptional"); }
            set { BackingStore?.Set("isCommunicationSpeakerOptional", value); }
        }
        /// <summary>True if the configured speaker is optional. Used to compute the health state if the speaker is not optional.</summary>
        public bool? IsSpeakerOptional
        {
            get { return BackingStore?.Get<bool?>("isSpeakerOptional"); }
            set { BackingStore?.Set("isSpeakerOptional", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The speakers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>? Speakers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>?>("speakers"); }
            set { BackingStore?.Set("speakers", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral> Speakers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>>("speakers"); }
            set { BackingStore?.Set("speakers", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.TeamworkSpeakerConfiguration"/> and sets the default values.
        /// </summary>
        public TeamworkSpeakerConfiguration()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.TeamworkSpeakerConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.TeamworkSpeakerConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.TeamworkSpeakerConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "defaultCommunicationSpeaker", n => { DefaultCommunicationSpeaker = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>(global::Microsoft.Graph.Beta.Models.TeamworkPeripheral.CreateFromDiscriminatorValue); } },
                { "defaultSpeaker", n => { DefaultSpeaker = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>(global::Microsoft.Graph.Beta.Models.TeamworkPeripheral.CreateFromDiscriminatorValue); } },
                { "isCommunicationSpeakerOptional", n => { IsCommunicationSpeakerOptional = n.GetBoolValue(); } },
                { "isSpeakerOptional", n => { IsSpeakerOptional = n.GetBoolValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "speakers", n => { Speakers = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>(global::Microsoft.Graph.Beta.Models.TeamworkPeripheral.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>("defaultCommunicationSpeaker", DefaultCommunicationSpeaker);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>("defaultSpeaker", DefaultSpeaker);
            writer.WriteBoolValue("isCommunicationSpeakerOptional", IsCommunicationSpeakerOptional);
            writer.WriteBoolValue("isSpeakerOptional", IsSpeakerOptional);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.TeamworkPeripheral>("speakers", Speakers);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
