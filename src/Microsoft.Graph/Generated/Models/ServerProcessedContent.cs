// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class ServerProcessedContent : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>A key-value map where keys are string identifiers and values are component ids. SharePoint servers might decide to use this hint to preload the script for corresponding components for performance boost.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>? ComponentDependencies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>?>("componentDependencies"); }
            set { BackingStore?.Set("componentDependencies", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair> ComponentDependencies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>>("componentDependencies"); }
            set { BackingStore?.Set("componentDependencies", value); }
        }
#endif
        /// <summary>A key-value map where keys are string identifier and values are object of custom key-value pair.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyValuePair>? CustomMetadata
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyValuePair>?>("customMetadata"); }
            set { BackingStore?.Set("customMetadata", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyValuePair> CustomMetadata
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyValuePair>>("customMetadata"); }
            set { BackingStore?.Set("customMetadata", value); }
        }
#endif
        /// <summary>A key-value map where keys are string identifiers and values are rich text with HTML format. SharePoint servers treat the values as HTML content and run services like safety checks, search index and link fixup on them.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>? HtmlStrings
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>?>("htmlStrings"); }
            set { BackingStore?.Set("htmlStrings", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair> HtmlStrings
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>>("htmlStrings"); }
            set { BackingStore?.Set("htmlStrings", value); }
        }
#endif
        /// <summary>A key-value map where keys are string identifiers and values are image sources. SharePoint servers treat the values as image sources and run services like search index and link fixup on them.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>? ImageSources
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>?>("imageSources"); }
            set { BackingStore?.Set("imageSources", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair> ImageSources
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>>("imageSources"); }
            set { BackingStore?.Set("imageSources", value); }
        }
#endif
        /// <summary>A key-value map where keys are string identifiers and values are links. SharePoint servers treat the values as links and run services like link fixup on them.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>? Links
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>?>("links"); }
            set { BackingStore?.Set("links", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair> Links
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>>("links"); }
            set { BackingStore?.Set("links", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>A key-value map where keys are string identifiers and values are strings that should be search indexed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>? SearchablePlainTexts
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>?>("searchablePlainTexts"); }
            set { BackingStore?.Set("searchablePlainTexts", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair> SearchablePlainTexts
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>>("searchablePlainTexts"); }
            set { BackingStore?.Set("searchablePlainTexts", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.ServerProcessedContent"/> and sets the default values.
        /// </summary>
        public ServerProcessedContent()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.ServerProcessedContent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Microsoft.Graph.Beta.Models.ServerProcessedContent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.ServerProcessedContent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "componentDependencies", n => { ComponentDependencies = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>(Microsoft.Graph.Beta.Models.MetaDataKeyStringPair.CreateFromDiscriminatorValue)?.ToList(); } },
                { "customMetadata", n => { CustomMetadata = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyValuePair>(Microsoft.Graph.Beta.Models.MetaDataKeyValuePair.CreateFromDiscriminatorValue)?.ToList(); } },
                { "htmlStrings", n => { HtmlStrings = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>(Microsoft.Graph.Beta.Models.MetaDataKeyStringPair.CreateFromDiscriminatorValue)?.ToList(); } },
                { "imageSources", n => { ImageSources = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>(Microsoft.Graph.Beta.Models.MetaDataKeyStringPair.CreateFromDiscriminatorValue)?.ToList(); } },
                { "links", n => { Links = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>(Microsoft.Graph.Beta.Models.MetaDataKeyStringPair.CreateFromDiscriminatorValue)?.ToList(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "searchablePlainTexts", n => { SearchablePlainTexts = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>(Microsoft.Graph.Beta.Models.MetaDataKeyStringPair.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>("componentDependencies", ComponentDependencies);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyValuePair>("customMetadata", CustomMetadata);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>("htmlStrings", HtmlStrings);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>("imageSources", ImageSources);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>("links", Links);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.MetaDataKeyStringPair>("searchablePlainTexts", SearchablePlainTexts);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
