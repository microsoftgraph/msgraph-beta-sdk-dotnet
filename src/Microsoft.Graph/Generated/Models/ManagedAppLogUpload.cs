// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// A `managedAppLogUpload` represents the log upload result for a given Mobile Application Management (MAM) Logs Uploading Component. Such components can be the application itself, the MAM SDK, and other on-device components that are capable of uploading diagnostic logs.
    /// </summary>
    public class ManagedAppLogUpload : IAdditionalDataHolder, IBackedModel, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The Mobile Application Management (MAM) Logs Uploading Component. Such components can be the application itself, the MAM SDK, and other on-device components that are capable of uploading diagnostic logs. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManagedAppComponent
        {
            get { return BackingStore?.Get<string?>("managedAppComponent"); }
            set { BackingStore?.Set("managedAppComponent", value); }
        }
#nullable restore
#else
        public string ManagedAppComponent
        {
            get { return BackingStore?.Get<string>("managedAppComponent"); }
            set { BackingStore?.Set("managedAppComponent", value); }
        }
#endif
        /// <summary>The Mobile Application Management (MAM) Logs Uploading Component. Such components can be the application itself, the MAM SDK, and other on-device components that are capable of uploading diagnostic logs. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManagedAppComponentDescription
        {
            get { return BackingStore?.Get<string?>("managedAppComponentDescription"); }
            set { BackingStore?.Set("managedAppComponentDescription", value); }
        }
#nullable restore
#else
        public string ManagedAppComponentDescription
        {
            get { return BackingStore?.Get<string>("managedAppComponentDescription"); }
            set { BackingStore?.Set("managedAppComponentDescription", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>A provider-specific reference id for the uploaded logs. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReferenceId
        {
            get { return BackingStore?.Get<string?>("referenceId"); }
            set { BackingStore?.Set("referenceId", value); }
        }
#nullable restore
#else
        public string ReferenceId
        {
            get { return BackingStore?.Get<string>("referenceId"); }
            set { BackingStore?.Set("referenceId", value); }
        }
#endif
        /// <summary>Represents the current status of the associated `managedAppLogCollectionRequest`.</summary>
        public Microsoft.Graph.Beta.Models.ManagedAppLogUploadState? Status
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ManagedAppLogUploadState?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.ManagedAppLogUpload"/> and sets the default values.
        /// </summary>
        public ManagedAppLogUpload()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.ManagedAppLogUpload"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Microsoft.Graph.Beta.Models.ManagedAppLogUpload CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.ManagedAppLogUpload();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "managedAppComponent", n => { ManagedAppComponent = n.GetStringValue(); } },
                { "managedAppComponentDescription", n => { ManagedAppComponentDescription = n.GetStringValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "referenceId", n => { ReferenceId = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<Microsoft.Graph.Beta.Models.ManagedAppLogUploadState>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("managedAppComponent", ManagedAppComponent);
            writer.WriteStringValue("managedAppComponentDescription", ManagedAppComponentDescription);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteStringValue("referenceId", ReferenceId);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.ManagedAppLogUploadState>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
