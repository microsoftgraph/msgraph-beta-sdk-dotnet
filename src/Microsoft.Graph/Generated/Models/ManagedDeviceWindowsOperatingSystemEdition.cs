// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Different Windows&apos; versions have Edition specific support timelines. This complex type defines the date until which a particular edition is supported in a Windows&apos; version.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class ManagedDeviceWindowsOperatingSystemEdition : IAdditionalDataHolder, IBackedModel, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Windows Operating System is available in different editions, which have a specific set of features available. This enum type defines the corresponding edition.</summary>
        public global::Microsoft.Graph.Beta.Models.ManagedDeviceWindowsOperatingSystemEditionType? EditionType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ManagedDeviceWindowsOperatingSystemEditionType?>("editionType"); }
            set { BackingStore?.Set("editionType", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>Indicates the Date until which this Operating System edition type is officially supported. The Timestamp type represents date and time information using ISO 8601 format and is always in Pacific Time Zone (PT). For example, 2014-01-01 would mean &apos;2014-01-01T07:00:00Z&apos; in UTC time. Returned by default. Read-only.</summary>
        public Date? SupportEndDate
        {
            get { return BackingStore?.Get<Date?>("supportEndDate"); }
            set { BackingStore?.Set("supportEndDate", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.ManagedDeviceWindowsOperatingSystemEdition"/> and sets the default values.
        /// </summary>
        public ManagedDeviceWindowsOperatingSystemEdition()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.ManagedDeviceWindowsOperatingSystemEdition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.ManagedDeviceWindowsOperatingSystemEdition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.ManagedDeviceWindowsOperatingSystemEdition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "editionType", n => { EditionType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDeviceWindowsOperatingSystemEditionType>(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "supportEndDate", n => { SupportEndDate = n.GetDateValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDeviceWindowsOperatingSystemEditionType>("editionType", EditionType);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteDateValue("supportEndDate", SupportEndDate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
