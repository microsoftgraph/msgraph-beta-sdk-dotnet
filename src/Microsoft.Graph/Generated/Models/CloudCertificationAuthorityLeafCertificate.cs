// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Entity that represents a leaf certificate issued by a cloud certification authority.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CloudCertificationAuthorityLeafCertificate : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>Enum type of possible leaf certificate statuses. These statuses indicate whether certificates are active and usable or unusable if they have been revoked or expired.</summary>
        public global::Microsoft.Graph.Beta.Models.CloudCertificationAuthorityLeafCertificateStatus? CertificateStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CloudCertificationAuthorityLeafCertificateStatus?>("certificateStatus"); }
            set { BackingStore?.Set("certificateStatus", value); }
        }
        /// <summary>The URI of the certification authority that issued the certificate. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificationAuthorityIssuerUri
        {
            get { return BackingStore?.Get<string?>("certificationAuthorityIssuerUri"); }
            set { BackingStore?.Set("certificationAuthorityIssuerUri", value); }
        }
#nullable restore
#else
        public string CertificationAuthorityIssuerUri
        {
            get { return BackingStore?.Get<string>("certificationAuthorityIssuerUri"); }
            set { BackingStore?.Set("certificationAuthorityIssuerUri", value); }
        }
#endif
        /// <summary>URL to find the relevant Certificate Revocation List for this certificate. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CrlDistributionPointUrl
        {
            get { return BackingStore?.Get<string?>("crlDistributionPointUrl"); }
            set { BackingStore?.Set("crlDistributionPointUrl", value); }
        }
#nullable restore
#else
        public string CrlDistributionPointUrl
        {
            get { return BackingStore?.Get<string>("crlDistributionPointUrl"); }
            set { BackingStore?.Set("crlDistributionPointUrl", value); }
        }
#endif
        /// <summary>The unique identifier of the managed device for which the certificate was created. This ID is assigned at device enrollment time. Read-only. Supports $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId
        {
            get { return BackingStore?.Get<string?>("deviceId"); }
            set { BackingStore?.Set("deviceId", value); }
        }
#nullable restore
#else
        public string DeviceId
        {
            get { return BackingStore?.Get<string>("deviceId"); }
            set { BackingStore?.Set("deviceId", value); }
        }
#endif
        /// <summary>Name of the device for which the certificate was created. Read-only. Supports $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceName
        {
            get { return BackingStore?.Get<string?>("deviceName"); }
            set { BackingStore?.Set("deviceName", value); }
        }
#nullable restore
#else
        public string DeviceName
        {
            get { return BackingStore?.Get<string>("deviceName"); }
            set { BackingStore?.Set("deviceName", value); }
        }
#endif
        /// <summary>The platform of the device for which the certificate was created. Possible values are: Android, AndroidForWork, iOS, MacOS, WindowsPhone81, Windows81AndLater, Windows10AndLater, AndroidWorkProfile, Unknown, AndroidAOSP, AndroidMobileApplicationManagement, iOSMobileApplicationManagement. Default value: Unknown. Read-only. Supports $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DevicePlatform
        {
            get { return BackingStore?.Get<string?>("devicePlatform"); }
            set { BackingStore?.Set("devicePlatform", value); }
        }
#nullable restore
#else
        public string DevicePlatform
        {
            get { return BackingStore?.Get<string>("devicePlatform"); }
            set { BackingStore?.Set("devicePlatform", value); }
        }
#endif
        /// <summary>Certificate extensions that further define the purpose of the public key contained in a certificate. Data is formatted as a comma-separated list of object identifiers (OID). For example a possible value is &apos;1.3.6.1.5.5.7.3.2&apos;. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ExtendedKeyUsages
        {
            get { return BackingStore?.Get<List<string>?>("extendedKeyUsages"); }
            set { BackingStore?.Set("extendedKeyUsages", value); }
        }
#nullable restore
#else
        public List<string> ExtendedKeyUsages
        {
            get { return BackingStore?.Get<List<string>>("extendedKeyUsages"); }
            set { BackingStore?.Set("extendedKeyUsages", value); }
        }
#endif
        /// <summary>The globally unique identifier of the certification authority that issued the leaf certificate. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuerId
        {
            get { return BackingStore?.Get<string?>("issuerId"); }
            set { BackingStore?.Set("issuerId", value); }
        }
#nullable restore
#else
        public string IssuerId
        {
            get { return BackingStore?.Get<string>("issuerId"); }
            set { BackingStore?.Set("issuerId", value); }
        }
#endif
        /// <summary>The name of the certification authority that issued the leaf certificate. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuerName
        {
            get { return BackingStore?.Get<string?>("issuerName"); }
            set { BackingStore?.Set("issuerName", value); }
        }
#nullable restore
#else
        public string IssuerName
        {
            get { return BackingStore?.Get<string>("issuerName"); }
            set { BackingStore?.Set("issuerName", value); }
        }
#endif
        /// <summary>Certificate extensions that define the purpose of the public key contained in a certificate. For example possible values are &apos;Key Encipherment&apos; and &apos;Digital Signature&apos;. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? KeyUsages
        {
            get { return BackingStore?.Get<List<string>?>("keyUsages"); }
            set { BackingStore?.Set("keyUsages", value); }
        }
#nullable restore
#else
        public List<string> KeyUsages
        {
            get { return BackingStore?.Get<List<string>>("keyUsages"); }
            set { BackingStore?.Set("keyUsages", value); }
        }
#endif
        /// <summary>The Online Certificate Status Protocol (OCSP) responder URI that can be used to determine certificate status. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OcspResponderUri
        {
            get { return BackingStore?.Get<string?>("ocspResponderUri"); }
            set { BackingStore?.Set("ocspResponderUri", value); }
        }
#nullable restore
#else
        public string OcspResponderUri
        {
            get { return BackingStore?.Get<string>("ocspResponderUri"); }
            set { BackingStore?.Set("ocspResponderUri", value); }
        }
#endif
        /// <summary>The date and time a certificate was revoked. If the certificate was not revoked, this will be null. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: &apos;2014-01-01T00:00:00Z&apos;. Nullable. Read-only.</summary>
        public DateTimeOffset? RevocationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("revocationDateTime"); }
            set { BackingStore?.Set("revocationDateTime", value); }
        }
        /// <summary>The serial number used to uniquely identify a certificate with its issuing certification authority. Read-only. Supports $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber
        {
            get { return BackingStore?.Get<string?>("serialNumber"); }
            set { BackingStore?.Set("serialNumber", value); }
        }
#nullable restore
#else
        public string SerialNumber
        {
            get { return BackingStore?.Get<string>("serialNumber"); }
            set { BackingStore?.Set("serialNumber", value); }
        }
#endif
        /// <summary>The subject name of the certificate. The subject is the target or intended beneficiary of the security being provided, such as a user or device. Read-only. Supports $select and $orderby.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubjectName
        {
            get { return BackingStore?.Get<string?>("subjectName"); }
            set { BackingStore?.Set("subjectName", value); }
        }
#nullable restore
#else
        public string SubjectName
        {
            get { return BackingStore?.Get<string>("subjectName"); }
            set { BackingStore?.Set("subjectName", value); }
        }
#endif
        /// <summary>Secure Hash Algorithm 1 digest of the certificate that can be used to identify it. Read-only. Supports $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Thumbprint
        {
            get { return BackingStore?.Get<string?>("thumbprint"); }
            set { BackingStore?.Set("thumbprint", value); }
        }
#nullable restore
#else
        public string Thumbprint
        {
            get { return BackingStore?.Get<string>("thumbprint"); }
            set { BackingStore?.Set("thumbprint", value); }
        }
#endif
        /// <summary>The unique identifier of the user for which the certificate was created. Null for userless devices. This is an Intune user ID. Nullable. Read-only. Supports $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId
        {
            get { return BackingStore?.Get<string?>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#nullable restore
#else
        public string UserId
        {
            get { return BackingStore?.Get<string>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#endif
        /// <summary>User principal name of the user for which the certificate was created. Null for userless devices. Nullable. Read-only. Supports $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName
        {
            get { return BackingStore?.Get<string?>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#nullable restore
#else
        public string UserPrincipalName
        {
            get { return BackingStore?.Get<string>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#endif
        /// <summary>The end date time of the validity period of a certificate. Certificates cannot be used after this date time as they are longer valid. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: &apos;2014-01-01T00:00:00Z&apos;. Nullable. Read-only. Supports $orderby.</summary>
        public DateTimeOffset? ValidityEndDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("validityEndDateTime"); }
            set { BackingStore?.Set("validityEndDateTime", value); }
        }
        /// <summary>The start date time of the validity period of a certificate. Certificates cannot be used before this date time as they are not yet valid. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: &apos;2014-01-01T00:00:00Z&apos;. Nullable. Read-only. Supports $orderby.</summary>
        public DateTimeOffset? ValidityStartDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("validityStartDateTime"); }
            set { BackingStore?.Set("validityStartDateTime", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CloudCertificationAuthorityLeafCertificate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.CloudCertificationAuthorityLeafCertificate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CloudCertificationAuthorityLeafCertificate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "certificateStatus", n => { CertificateStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CloudCertificationAuthorityLeafCertificateStatus>(); } },
                { "certificationAuthorityIssuerUri", n => { CertificationAuthorityIssuerUri = n.GetStringValue(); } },
                { "crlDistributionPointUrl", n => { CrlDistributionPointUrl = n.GetStringValue(); } },
                { "deviceId", n => { DeviceId = n.GetStringValue(); } },
                { "deviceName", n => { DeviceName = n.GetStringValue(); } },
                { "devicePlatform", n => { DevicePlatform = n.GetStringValue(); } },
                { "extendedKeyUsages", n => { ExtendedKeyUsages = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "issuerId", n => { IssuerId = n.GetStringValue(); } },
                { "issuerName", n => { IssuerName = n.GetStringValue(); } },
                { "keyUsages", n => { KeyUsages = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "ocspResponderUri", n => { OcspResponderUri = n.GetStringValue(); } },
                { "revocationDateTime", n => { RevocationDateTime = n.GetDateTimeOffsetValue(); } },
                { "serialNumber", n => { SerialNumber = n.GetStringValue(); } },
                { "subjectName", n => { SubjectName = n.GetStringValue(); } },
                { "thumbprint", n => { Thumbprint = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
                { "validityEndDateTime", n => { ValidityEndDateTime = n.GetDateTimeOffsetValue(); } },
                { "validityStartDateTime", n => { ValidityStartDateTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CloudCertificationAuthorityLeafCertificateStatus>("certificateStatus", CertificateStatus);
            writer.WriteStringValue("certificationAuthorityIssuerUri", CertificationAuthorityIssuerUri);
            writer.WriteStringValue("crlDistributionPointUrl", CrlDistributionPointUrl);
            writer.WriteStringValue("deviceId", DeviceId);
            writer.WriteStringValue("deviceName", DeviceName);
            writer.WriteStringValue("devicePlatform", DevicePlatform);
            writer.WriteCollectionOfPrimitiveValues<string>("extendedKeyUsages", ExtendedKeyUsages);
            writer.WriteStringValue("issuerId", IssuerId);
            writer.WriteStringValue("issuerName", IssuerName);
            writer.WriteCollectionOfPrimitiveValues<string>("keyUsages", KeyUsages);
            writer.WriteStringValue("ocspResponderUri", OcspResponderUri);
            writer.WriteDateTimeOffsetValue("revocationDateTime", RevocationDateTime);
            writer.WriteStringValue("serialNumber", SerialNumber);
            writer.WriteStringValue("subjectName", SubjectName);
            writer.WriteStringValue("thumbprint", Thumbprint);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
            writer.WriteDateTimeOffsetValue("validityEndDateTime", ValidityEndDateTime);
            writer.WriteDateTimeOffsetValue("validityStartDateTime", ValidityStartDateTime);
        }
    }
}
#pragma warning restore CS0618
