// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PrivilegedRoleSettings : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The approvalOnElevation property</summary>
        public bool? ApprovalOnElevation
        {
            get { return BackingStore?.Get<bool?>("approvalOnElevation"); }
            set { BackingStore?.Set("approvalOnElevation", value); }
        }
        /// <summary>The approverIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ApproverIds
        {
            get { return BackingStore?.Get<List<string>?>("approverIds"); }
            set { BackingStore?.Set("approverIds", value); }
        }
#nullable restore
#else
        public List<string> ApproverIds
        {
            get { return BackingStore?.Get<List<string>>("approverIds"); }
            set { BackingStore?.Set("approverIds", value); }
        }
#endif
        /// <summary>The elevationDuration property</summary>
        public TimeSpan? ElevationDuration
        {
            get { return BackingStore?.Get<TimeSpan?>("elevationDuration"); }
            set { BackingStore?.Set("elevationDuration", value); }
        }
        /// <summary>The isMfaOnElevationConfigurable property</summary>
        public bool? IsMfaOnElevationConfigurable
        {
            get { return BackingStore?.Get<bool?>("isMfaOnElevationConfigurable"); }
            set { BackingStore?.Set("isMfaOnElevationConfigurable", value); }
        }
        /// <summary>The lastGlobalAdmin property</summary>
        public bool? LastGlobalAdmin
        {
            get { return BackingStore?.Get<bool?>("lastGlobalAdmin"); }
            set { BackingStore?.Set("lastGlobalAdmin", value); }
        }
        /// <summary>The maxElavationDuration property</summary>
        public TimeSpan? MaxElavationDuration
        {
            get { return BackingStore?.Get<TimeSpan?>("maxElavationDuration"); }
            set { BackingStore?.Set("maxElavationDuration", value); }
        }
        /// <summary>The mfaOnElevation property</summary>
        public bool? MfaOnElevation
        {
            get { return BackingStore?.Get<bool?>("mfaOnElevation"); }
            set { BackingStore?.Set("mfaOnElevation", value); }
        }
        /// <summary>The minElevationDuration property</summary>
        public TimeSpan? MinElevationDuration
        {
            get { return BackingStore?.Get<TimeSpan?>("minElevationDuration"); }
            set { BackingStore?.Set("minElevationDuration", value); }
        }
        /// <summary>The notificationToUserOnElevation property</summary>
        public bool? NotificationToUserOnElevation
        {
            get { return BackingStore?.Get<bool?>("notificationToUserOnElevation"); }
            set { BackingStore?.Set("notificationToUserOnElevation", value); }
        }
        /// <summary>The ticketingInfoOnElevation property</summary>
        public bool? TicketingInfoOnElevation
        {
            get { return BackingStore?.Get<bool?>("ticketingInfoOnElevation"); }
            set { BackingStore?.Set("ticketingInfoOnElevation", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.PrivilegedRoleSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.PrivilegedRoleSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.PrivilegedRoleSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "approvalOnElevation", n => { ApprovalOnElevation = n.GetBoolValue(); } },
                { "approverIds", n => { ApproverIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "elevationDuration", n => { ElevationDuration = n.GetTimeSpanValue(); } },
                { "isMfaOnElevationConfigurable", n => { IsMfaOnElevationConfigurable = n.GetBoolValue(); } },
                { "lastGlobalAdmin", n => { LastGlobalAdmin = n.GetBoolValue(); } },
                { "maxElavationDuration", n => { MaxElavationDuration = n.GetTimeSpanValue(); } },
                { "mfaOnElevation", n => { MfaOnElevation = n.GetBoolValue(); } },
                { "minElevationDuration", n => { MinElevationDuration = n.GetTimeSpanValue(); } },
                { "notificationToUserOnElevation", n => { NotificationToUserOnElevation = n.GetBoolValue(); } },
                { "ticketingInfoOnElevation", n => { TicketingInfoOnElevation = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("approvalOnElevation", ApprovalOnElevation);
            writer.WriteCollectionOfPrimitiveValues<string>("approverIds", ApproverIds);
            writer.WriteTimeSpanValue("elevationDuration", ElevationDuration);
            writer.WriteBoolValue("isMfaOnElevationConfigurable", IsMfaOnElevationConfigurable);
            writer.WriteBoolValue("lastGlobalAdmin", LastGlobalAdmin);
            writer.WriteTimeSpanValue("maxElavationDuration", MaxElavationDuration);
            writer.WriteBoolValue("mfaOnElevation", MfaOnElevation);
            writer.WriteTimeSpanValue("minElevationDuration", MinElevationDuration);
            writer.WriteBoolValue("notificationToUserOnElevation", NotificationToUserOnElevation);
            writer.WriteBoolValue("ticketingInfoOnElevation", TicketingInfoOnElevation);
        }
    }
}
#pragma warning restore CS0618
