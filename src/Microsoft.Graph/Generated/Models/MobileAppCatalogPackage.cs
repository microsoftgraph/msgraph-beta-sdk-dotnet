// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// mobileAppCatalogPackage is an abstract type that application catalog package entities derive from. A mobileAppCatalogPackage entity contains information about an application catalog package that can be deployed to Intune-managed devices.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class MobileAppCatalogPackage : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>The name of the product (example: &quot;Fabrikam for Business&quot;). Returned by default. Read-only. Supports: $filter, $search, $select. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductDisplayName
        {
            get { return BackingStore?.Get<string?>("productDisplayName"); }
            set { BackingStore?.Set("productDisplayName", value); }
        }
#nullable restore
#else
        public string ProductDisplayName
        {
            get { return BackingStore?.Get<string>("productDisplayName"); }
            set { BackingStore?.Set("productDisplayName", value); }
        }
#endif
        /// <summary>The identifier of a specific product irrespective of version, or other attributes. Read-only. Returned by default. Supports: $filter, $select. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductId
        {
            get { return BackingStore?.Get<string?>("productId"); }
            set { BackingStore?.Set("productId", value); }
        }
#nullable restore
#else
        public string ProductId
        {
            get { return BackingStore?.Get<string>("productId"); }
            set { BackingStore?.Set("productId", value); }
        }
#endif
        /// <summary>The name of the application catalog package publisher (example: &quot;Fabrikam&quot;). Returned by default. Read-only. Supports $filter, $search, $select. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublisherDisplayName
        {
            get { return BackingStore?.Get<string?>("publisherDisplayName"); }
            set { BackingStore?.Set("publisherDisplayName", value); }
        }
#nullable restore
#else
        public string PublisherDisplayName
        {
            get { return BackingStore?.Get<string>("publisherDisplayName"); }
            set { BackingStore?.Set("publisherDisplayName", value); }
        }
#endif
        /// <summary>The name of the product version (example: &quot;1.2203.156&quot;). Returned by default. Read-only. Supports: $filter, $search, $select. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VersionDisplayName
        {
            get { return BackingStore?.Get<string?>("versionDisplayName"); }
            set { BackingStore?.Set("versionDisplayName", value); }
        }
#nullable restore
#else
        public string VersionDisplayName
        {
            get { return BackingStore?.Get<string>("versionDisplayName"); }
            set { BackingStore?.Set("versionDisplayName", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.MobileAppCatalogPackage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.MobileAppCatalogPackage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.win32MobileAppCatalogPackage" => new global::Microsoft.Graph.Beta.Models.Win32MobileAppCatalogPackage(),
                _ => new global::Microsoft.Graph.Beta.Models.MobileAppCatalogPackage(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "productDisplayName", n => { ProductDisplayName = n.GetStringValue(); } },
                { "productId", n => { ProductId = n.GetStringValue(); } },
                { "publisherDisplayName", n => { PublisherDisplayName = n.GetStringValue(); } },
                { "versionDisplayName", n => { VersionDisplayName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
        }
    }
}
#pragma warning restore CS0618
