// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class DriveItemAccessOperationsViewpoint : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Indicates whether the user can comment on this item.</summary>
        public bool? CanComment
        {
            get { return BackingStore?.Get<bool?>("canComment"); }
            set { BackingStore?.Set("canComment", value); }
        }
        /// <summary>Indicates whether the user can create files within this object. Returned only on folders.</summary>
        public bool? CanCreateFile
        {
            get { return BackingStore?.Get<bool?>("canCreateFile"); }
            set { BackingStore?.Set("canCreateFile", value); }
        }
        /// <summary>Indicates whether the user can create folders within this object. Returned only on folders.</summary>
        public bool? CanCreateFolder
        {
            get { return BackingStore?.Get<bool?>("canCreateFolder"); }
            set { BackingStore?.Set("canCreateFolder", value); }
        }
        /// <summary>Indicates whether the user can delete this item.</summary>
        public bool? CanDelete
        {
            get { return BackingStore?.Get<bool?>("canDelete"); }
            set { BackingStore?.Set("canDelete", value); }
        }
        /// <summary>Indicates whether the user can download this item.</summary>
        public bool? CanDownload
        {
            get { return BackingStore?.Get<bool?>("canDownload"); }
            set { BackingStore?.Set("canDownload", value); }
        }
        /// <summary>Indicates whether the user can read this item.</summary>
        public bool? CanRead
        {
            get { return BackingStore?.Get<bool?>("canRead"); }
            set { BackingStore?.Set("canRead", value); }
        }
        /// <summary>Indicates whether the user can update this item.</summary>
        public bool? CanUpdate
        {
            get { return BackingStore?.Get<bool?>("canUpdate"); }
            set { BackingStore?.Set("canUpdate", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.DriveItemAccessOperationsViewpoint"/> and sets the default values.
        /// </summary>
        public DriveItemAccessOperationsViewpoint()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.DriveItemAccessOperationsViewpoint"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.DriveItemAccessOperationsViewpoint CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.DriveItemAccessOperationsViewpoint();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "canComment", n => { CanComment = n.GetBoolValue(); } },
                { "canCreateFile", n => { CanCreateFile = n.GetBoolValue(); } },
                { "canCreateFolder", n => { CanCreateFolder = n.GetBoolValue(); } },
                { "canDelete", n => { CanDelete = n.GetBoolValue(); } },
                { "canDownload", n => { CanDownload = n.GetBoolValue(); } },
                { "canRead", n => { CanRead = n.GetBoolValue(); } },
                { "canUpdate", n => { CanUpdate = n.GetBoolValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("canComment", CanComment);
            writer.WriteBoolValue("canCreateFile", CanCreateFile);
            writer.WriteBoolValue("canCreateFolder", CanCreateFolder);
            writer.WriteBoolValue("canDelete", CanDelete);
            writer.WriteBoolValue("canDownload", CanDownload);
            writer.WriteBoolValue("canRead", CanRead);
            writer.WriteBoolValue("canUpdate", CanUpdate);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
