// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class VirtualEventWebinar : VirtualEvent, IParsable {
        /// <summary>To whom the webinar is visible.</summary>
        public MeetingAudience? Audience {
            get { return BackingStore?.Get<MeetingAudience?>("audience"); }
            set { BackingStore?.Set("audience", value); }
        }
        /// <summary>Identity information of coorganizers of the webinar.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CommunicationsUserIdentity>? CoOrganizers {
            get { return BackingStore?.Get<List<CommunicationsUserIdentity>?>("coOrganizers"); }
            set { BackingStore?.Set("coOrganizers", value); }
        }
#nullable restore
#else
        public List<CommunicationsUserIdentity> CoOrganizers {
            get { return BackingStore?.Get<List<CommunicationsUserIdentity>>("coOrganizers"); }
            set { BackingStore?.Set("coOrganizers", value); }
        }
#endif
        /// <summary>Registration configuration of the webinar.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public VirtualEventRegistrationConfiguration? RegistrationConfiguration {
            get { return BackingStore?.Get<VirtualEventRegistrationConfiguration?>("registrationConfiguration"); }
            set { BackingStore?.Set("registrationConfiguration", value); }
        }
#nullable restore
#else
        public VirtualEventRegistrationConfiguration RegistrationConfiguration {
            get { return BackingStore?.Get<VirtualEventRegistrationConfiguration>("registrationConfiguration"); }
            set { BackingStore?.Set("registrationConfiguration", value); }
        }
#endif
        /// <summary>Registration records of the webinar.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<VirtualEventRegistration>? Registrations {
            get { return BackingStore?.Get<List<VirtualEventRegistration>?>("registrations"); }
            set { BackingStore?.Set("registrations", value); }
        }
#nullable restore
#else
        public List<VirtualEventRegistration> Registrations {
            get { return BackingStore?.Get<List<VirtualEventRegistration>>("registrations"); }
            set { BackingStore?.Set("registrations", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new VirtualEventWebinar CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new VirtualEventWebinar();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"audience", n => { Audience = n.GetEnumValue<MeetingAudience>(); } },
                {"coOrganizers", n => { CoOrganizers = n.GetCollectionOfObjectValues<CommunicationsUserIdentity>(CommunicationsUserIdentity.CreateFromDiscriminatorValue)?.ToList(); } },
                {"registrationConfiguration", n => { RegistrationConfiguration = n.GetObjectValue<VirtualEventRegistrationConfiguration>(VirtualEventRegistrationConfiguration.CreateFromDiscriminatorValue); } },
                {"registrations", n => { Registrations = n.GetCollectionOfObjectValues<VirtualEventRegistration>(VirtualEventRegistration.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<MeetingAudience>("audience", Audience);
            writer.WriteCollectionOfObjectValues<CommunicationsUserIdentity>("coOrganizers", CoOrganizers);
            writer.WriteObjectValue<VirtualEventRegistrationConfiguration>("registrationConfiguration", RegistrationConfiguration);
            writer.WriteCollectionOfObjectValues<VirtualEventRegistration>("registrations", Registrations);
        }
    }
}
