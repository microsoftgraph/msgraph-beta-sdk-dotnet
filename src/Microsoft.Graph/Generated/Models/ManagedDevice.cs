// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Devices that are managed or pre-enrolled through Intune
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class ManagedDevice : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>Whether the device is Azure Active Directory registered. This property is read-only.</summary>
        public bool? AadRegistered
        {
            get { return BackingStore?.Get<bool?>("aadRegistered"); }
            set { BackingStore?.Set("aadRegistered", value); }
        }
        /// <summary>The code that allows the Activation Lock on managed device to be bypassed. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity in LIST call. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActivationLockBypassCode
        {
            get { return BackingStore?.Get<string?>("activationLockBypassCode"); }
            set { BackingStore?.Set("activationLockBypassCode", value); }
        }
#nullable restore
#else
        public string ActivationLockBypassCode
        {
            get { return BackingStore?.Get<string>("activationLockBypassCode"); }
            set { BackingStore?.Set("activationLockBypassCode", value); }
        }
#endif
        /// <summary>Android security patch level. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AndroidSecurityPatchLevel
        {
            get { return BackingStore?.Get<string?>("androidSecurityPatchLevel"); }
            set { BackingStore?.Set("androidSecurityPatchLevel", value); }
        }
#nullable restore
#else
        public string AndroidSecurityPatchLevel
        {
            get { return BackingStore?.Get<string>("androidSecurityPatchLevel"); }
            set { BackingStore?.Set("androidSecurityPatchLevel", value); }
        }
#endif
        /// <summary>Managed device mobile app configuration states for this device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AssignmentFilterEvaluationStatusDetails>? AssignmentFilterEvaluationStatusDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignmentFilterEvaluationStatusDetails>?>("assignmentFilterEvaluationStatusDetails"); }
            set { BackingStore?.Set("assignmentFilterEvaluationStatusDetails", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AssignmentFilterEvaluationStatusDetails> AssignmentFilterEvaluationStatusDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignmentFilterEvaluationStatusDetails>>("assignmentFilterEvaluationStatusDetails"); }
            set { BackingStore?.Set("assignmentFilterEvaluationStatusDetails", value); }
        }
#endif
        /// <summary>Reports if the managed device is enrolled via auto-pilot. This property is read-only.</summary>
        public bool? AutopilotEnrolled
        {
            get { return BackingStore?.Get<bool?>("autopilotEnrolled"); }
            set { BackingStore?.Set("autopilotEnrolled", value); }
        }
        /// <summary>The unique identifier for the Azure Active Directory device. Read only. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureActiveDirectoryDeviceId
        {
            get { return BackingStore?.Get<string?>("azureActiveDirectoryDeviceId"); }
            set { BackingStore?.Set("azureActiveDirectoryDeviceId", value); }
        }
#nullable restore
#else
        public string AzureActiveDirectoryDeviceId
        {
            get { return BackingStore?.Get<string>("azureActiveDirectoryDeviceId"); }
            set { BackingStore?.Set("azureActiveDirectoryDeviceId", value); }
        }
#endif
        /// <summary>The unique identifier for the Azure Active Directory device. Read only. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureADDeviceId
        {
            get { return BackingStore?.Get<string?>("azureADDeviceId"); }
            set { BackingStore?.Set("azureADDeviceId", value); }
        }
#nullable restore
#else
        public string AzureADDeviceId
        {
            get { return BackingStore?.Get<string>("azureADDeviceId"); }
            set { BackingStore?.Set("azureADDeviceId", value); }
        }
#endif
        /// <summary>Whether the device is Azure Active Directory registered. This property is read-only.</summary>
        public bool? AzureADRegistered
        {
            get { return BackingStore?.Get<bool?>("azureADRegistered"); }
            set { BackingStore?.Set("azureADRegistered", value); }
        }
        /// <summary>Reports if the managed device has an escrowed Bootstrap Token. This is only for macOS devices. To get, include BootstrapTokenEscrowed in the select clause and query with a device id. If FALSE, no bootstrap token is escrowed. If TRUE, the device has escrowed a bootstrap token with Intune. This property is read-only.</summary>
        public bool? BootstrapTokenEscrowed
        {
            get { return BackingStore?.Get<bool?>("bootstrapTokenEscrowed"); }
            set { BackingStore?.Set("bootstrapTokenEscrowed", value); }
        }
        /// <summary>Chassis type.</summary>
        public global::Microsoft.Graph.Beta.Models.ChassisType? ChassisType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ChassisType?>("chassisType"); }
            set { BackingStore?.Set("chassisType", value); }
        }
        /// <summary>List of properties of the ChromeOS Device. Default is an empty list. To retrieve actual values GET call needs to be made, with device id and included in select parameter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ChromeOSDeviceProperty>? ChromeOSDeviceInfo
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ChromeOSDeviceProperty>?>("chromeOSDeviceInfo"); }
            set { BackingStore?.Set("chromeOSDeviceInfo", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ChromeOSDeviceProperty> ChromeOSDeviceInfo
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ChromeOSDeviceProperty>>("chromeOSDeviceInfo"); }
            set { BackingStore?.Set("chromeOSDeviceInfo", value); }
        }
#endif
        /// <summary>The cloudPcRemoteActionResults property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.CloudPcRemoteActionResult>? CloudPcRemoteActionResults
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CloudPcRemoteActionResult>?>("cloudPcRemoteActionResults"); }
            set { BackingStore?.Set("cloudPcRemoteActionResults", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.CloudPcRemoteActionResult> CloudPcRemoteActionResults
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CloudPcRemoteActionResult>>("cloudPcRemoteActionResults"); }
            set { BackingStore?.Set("cloudPcRemoteActionResults", value); }
        }
#endif
        /// <summary>The DateTime when device compliance grace period expires. This property is read-only.</summary>
        public DateTimeOffset? ComplianceGracePeriodExpirationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("complianceGracePeriodExpirationDateTime"); }
            set { BackingStore?.Set("complianceGracePeriodExpirationDateTime", value); }
        }
        /// <summary>Compliance state.</summary>
        public global::Microsoft.Graph.Beta.Models.ComplianceState? ComplianceState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ComplianceState?>("complianceState"); }
            set { BackingStore?.Set("complianceState", value); }
        }
        /// <summary>ConfigrMgr client enabled features. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientEnabledFeatures? ConfigurationManagerClientEnabledFeatures
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientEnabledFeatures?>("configurationManagerClientEnabledFeatures"); }
            set { BackingStore?.Set("configurationManagerClientEnabledFeatures", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientEnabledFeatures ConfigurationManagerClientEnabledFeatures
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientEnabledFeatures>("configurationManagerClientEnabledFeatures"); }
            set { BackingStore?.Set("configurationManagerClientEnabledFeatures", value); }
        }
#endif
        /// <summary>Configuration manager client health state, valid only for devices managed by MDM/ConfigMgr Agent</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientHealthState? ConfigurationManagerClientHealthState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientHealthState?>("configurationManagerClientHealthState"); }
            set { BackingStore?.Set("configurationManagerClientHealthState", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientHealthState ConfigurationManagerClientHealthState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientHealthState>("configurationManagerClientHealthState"); }
            set { BackingStore?.Set("configurationManagerClientHealthState", value); }
        }
#endif
        /// <summary>Configuration manager client information, valid only for devices managed, duel-managed or tri-managed by ConfigMgr Agent</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientInformation? ConfigurationManagerClientInformation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientInformation?>("configurationManagerClientInformation"); }
            set { BackingStore?.Set("configurationManagerClientInformation", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientInformation ConfigurationManagerClientInformation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientInformation>("configurationManagerClientInformation"); }
            set { BackingStore?.Set("configurationManagerClientInformation", value); }
        }
#endif
        /// <summary>All applications currently installed on the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DetectedApp>? DetectedApps
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DetectedApp>?>("detectedApps"); }
            set { BackingStore?.Set("detectedApps", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DetectedApp> DetectedApps
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DetectedApp>>("detectedApps"); }
            set { BackingStore?.Set("detectedApps", value); }
        }
#endif
        /// <summary>List of ComplexType deviceActionResult objects. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceActionResult>? DeviceActionResults
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceActionResult>?>("deviceActionResults"); }
            set { BackingStore?.Set("deviceActionResults", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceActionResult> DeviceActionResults
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceActionResult>>("deviceActionResults"); }
            set { BackingStore?.Set("deviceActionResults", value); }
        }
#endif
        /// <summary>Device category</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.DeviceCategory? DeviceCategory
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceCategory?>("deviceCategory"); }
            set { BackingStore?.Set("deviceCategory", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.DeviceCategory DeviceCategory
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceCategory>("deviceCategory"); }
            set { BackingStore?.Set("deviceCategory", value); }
        }
#endif
        /// <summary>Device category display name. Default is an empty string. Supports $filter operator &apos;eq&apos; and &apos;or&apos;. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceCategoryDisplayName
        {
            get { return BackingStore?.Get<string?>("deviceCategoryDisplayName"); }
            set { BackingStore?.Set("deviceCategoryDisplayName", value); }
        }
#nullable restore
#else
        public string DeviceCategoryDisplayName
        {
            get { return BackingStore?.Get<string>("deviceCategoryDisplayName"); }
            set { BackingStore?.Set("deviceCategoryDisplayName", value); }
        }
#endif
        /// <summary>Device compliance policy states for this device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceCompliancePolicyState>? DeviceCompliancePolicyStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceCompliancePolicyState>?>("deviceCompliancePolicyStates"); }
            set { BackingStore?.Set("deviceCompliancePolicyStates", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceCompliancePolicyState> DeviceCompliancePolicyStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceCompliancePolicyState>>("deviceCompliancePolicyStates"); }
            set { BackingStore?.Set("deviceCompliancePolicyStates", value); }
        }
#endif
        /// <summary>Device configuration states for this device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceConfigurationState>? DeviceConfigurationStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceConfigurationState>?>("deviceConfigurationStates"); }
            set { BackingStore?.Set("deviceConfigurationStates", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceConfigurationState> DeviceConfigurationStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceConfigurationState>>("deviceConfigurationStates"); }
            set { BackingStore?.Set("deviceConfigurationStates", value); }
        }
#endif
        /// <summary>Possible ways of adding a mobile device to management.</summary>
        public global::Microsoft.Graph.Beta.Models.DeviceEnrollmentType? DeviceEnrollmentType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceEnrollmentType?>("deviceEnrollmentType"); }
            set { BackingStore?.Set("deviceEnrollmentType", value); }
        }
        /// <summary>Indicates whether the device is DFCI managed. When TRUE the device is DFCI managed. When FALSE, the device is not DFCI managed. The default value is FALSE.</summary>
        public bool? DeviceFirmwareConfigurationInterfaceManaged
        {
            get { return BackingStore?.Get<bool?>("deviceFirmwareConfigurationInterfaceManaged"); }
            set { BackingStore?.Set("deviceFirmwareConfigurationInterfaceManaged", value); }
        }
        /// <summary>The device health attestation state. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.DeviceHealthAttestationState? DeviceHealthAttestationState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceHealthAttestationState?>("deviceHealthAttestationState"); }
            set { BackingStore?.Set("deviceHealthAttestationState", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.DeviceHealthAttestationState DeviceHealthAttestationState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceHealthAttestationState>("deviceHealthAttestationState"); }
            set { BackingStore?.Set("deviceHealthAttestationState", value); }
        }
#endif
        /// <summary>Results of device health scripts that ran for this device. Default is empty list. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceHealthScriptPolicyState>? DeviceHealthScriptStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceHealthScriptPolicyState>?>("deviceHealthScriptStates"); }
            set { BackingStore?.Set("deviceHealthScriptStates", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceHealthScriptPolicyState> DeviceHealthScriptStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceHealthScriptPolicyState>>("deviceHealthScriptStates"); }
            set { BackingStore?.Set("deviceHealthScriptStates", value); }
        }
#endif
        /// <summary>Name of the device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceName
        {
            get { return BackingStore?.Get<string?>("deviceName"); }
            set { BackingStore?.Set("deviceName", value); }
        }
#nullable restore
#else
        public string DeviceName
        {
            get { return BackingStore?.Get<string>("deviceName"); }
            set { BackingStore?.Set("deviceName", value); }
        }
#endif
        /// <summary>Device registration status.</summary>
        public global::Microsoft.Graph.Beta.Models.DeviceRegistrationState? DeviceRegistrationState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceRegistrationState?>("deviceRegistrationState"); }
            set { BackingStore?.Set("deviceRegistrationState", value); }
        }
        /// <summary>Device type.</summary>
        public global::Microsoft.Graph.Beta.Models.DeviceType? DeviceType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceType?>("deviceType"); }
            set { BackingStore?.Set("deviceType", value); }
        }
        /// <summary>Whether the device is Exchange ActiveSync activated. This property is read-only.</summary>
        public bool? EasActivated
        {
            get { return BackingStore?.Get<bool?>("easActivated"); }
            set { BackingStore?.Set("easActivated", value); }
        }
        /// <summary>Exchange ActivationSync activation time of the device. This property is read-only.</summary>
        public DateTimeOffset? EasActivationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("easActivationDateTime"); }
            set { BackingStore?.Set("easActivationDateTime", value); }
        }
        /// <summary>Exchange ActiveSync Id of the device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EasDeviceId
        {
            get { return BackingStore?.Get<string?>("easDeviceId"); }
            set { BackingStore?.Set("easDeviceId", value); }
        }
#nullable restore
#else
        public string EasDeviceId
        {
            get { return BackingStore?.Get<string>("easDeviceId"); }
            set { BackingStore?.Set("easDeviceId", value); }
        }
#endif
        /// <summary>Email(s) for the user associated with the device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress
        {
            get { return BackingStore?.Get<string?>("emailAddress"); }
            set { BackingStore?.Set("emailAddress", value); }
        }
#nullable restore
#else
        public string EmailAddress
        {
            get { return BackingStore?.Get<string>("emailAddress"); }
            set { BackingStore?.Set("emailAddress", value); }
        }
#endif
        /// <summary>The Entra (Azure AD) User Principal Name (UPN) of the user responsible for the enrollment of the device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnrolledByUserPrincipalName
        {
            get { return BackingStore?.Get<string?>("enrolledByUserPrincipalName"); }
            set { BackingStore?.Set("enrolledByUserPrincipalName", value); }
        }
#nullable restore
#else
        public string EnrolledByUserPrincipalName
        {
            get { return BackingStore?.Get<string>("enrolledByUserPrincipalName"); }
            set { BackingStore?.Set("enrolledByUserPrincipalName", value); }
        }
#endif
        /// <summary>Enrollment time of the device. Supports $filter operator &apos;lt&apos; and &apos;gt&apos;. This property is read-only.</summary>
        public DateTimeOffset? EnrolledDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("enrolledDateTime"); }
            set { BackingStore?.Set("enrolledDateTime", value); }
        }
        /// <summary>Name of the enrollment profile assigned to the device. Default value is empty string, indicating no enrollment profile was assgined. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnrollmentProfileName
        {
            get { return BackingStore?.Get<string?>("enrollmentProfileName"); }
            set { BackingStore?.Set("enrollmentProfileName", value); }
        }
#nullable restore
#else
        public string EnrollmentProfileName
        {
            get { return BackingStore?.Get<string>("enrollmentProfileName"); }
            set { BackingStore?.Set("enrollmentProfileName", value); }
        }
#endif
        /// <summary>Indicates Ethernet MAC Address of the device. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity. Individual get call with select query options is needed to retrieve actual values. Example: deviceManagement/managedDevices({managedDeviceId})?$select=ethernetMacAddress Supports: $select. $Search is not supported. Read-only. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EthernetMacAddress
        {
            get { return BackingStore?.Get<string?>("ethernetMacAddress"); }
            set { BackingStore?.Set("ethernetMacAddress", value); }
        }
#nullable restore
#else
        public string EthernetMacAddress
        {
            get { return BackingStore?.Get<string>("ethernetMacAddress"); }
            set { BackingStore?.Set("ethernetMacAddress", value); }
        }
#endif
        /// <summary>Device Exchange Access State.</summary>
        public global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessState? ExchangeAccessState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessState?>("exchangeAccessState"); }
            set { BackingStore?.Set("exchangeAccessState", value); }
        }
        /// <summary>Device Exchange Access State Reason.</summary>
        public global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessStateReason? ExchangeAccessStateReason
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessStateReason?>("exchangeAccessStateReason"); }
            set { BackingStore?.Set("exchangeAccessStateReason", value); }
        }
        /// <summary>Last time the device contacted Exchange. This property is read-only.</summary>
        public DateTimeOffset? ExchangeLastSuccessfulSyncDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("exchangeLastSuccessfulSyncDateTime"); }
            set { BackingStore?.Set("exchangeLastSuccessfulSyncDateTime", value); }
        }
        /// <summary>Free Storage in Bytes. Default value is 0. Read-only. This property is read-only.</summary>
        public long? FreeStorageSpaceInBytes
        {
            get { return BackingStore?.Get<long?>("freeStorageSpaceInBytes"); }
            set { BackingStore?.Set("freeStorageSpaceInBytes", value); }
        }
        /// <summary>The hardward details for the device. Includes information such as storage space, manufacturer, serial number, etc. By default most property of this type are set to null/0/false and enum defaults for associated types. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.HardwareInformation? HardwareInformation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.HardwareInformation?>("hardwareInformation"); }
            set { BackingStore?.Set("hardwareInformation", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.HardwareInformation HardwareInformation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.HardwareInformation>("hardwareInformation"); }
            set { BackingStore?.Set("hardwareInformation", value); }
        }
#endif
        /// <summary>Integrated Circuit Card Identifier, it is A SIM card&apos;s unique identification number. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iccid
        {
            get { return BackingStore?.Get<string?>("iccid"); }
            set { BackingStore?.Set("iccid", value); }
        }
#nullable restore
#else
        public string Iccid
        {
            get { return BackingStore?.Get<string>("iccid"); }
            set { BackingStore?.Set("iccid", value); }
        }
#endif
        /// <summary>IMEI. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Imei
        {
            get { return BackingStore?.Get<string?>("imei"); }
            set { BackingStore?.Set("imei", value); }
        }
#nullable restore
#else
        public string Imei
        {
            get { return BackingStore?.Get<string>("imei"); }
            set { BackingStore?.Set("imei", value); }
        }
#endif
        /// <summary>Device encryption status. This property is read-only.</summary>
        public bool? IsEncrypted
        {
            get { return BackingStore?.Get<bool?>("isEncrypted"); }
            set { BackingStore?.Set("isEncrypted", value); }
        }
        /// <summary>Device supervised status. This property is read-only.</summary>
        public bool? IsSupervised
        {
            get { return BackingStore?.Get<bool?>("isSupervised"); }
            set { BackingStore?.Set("isSupervised", value); }
        }
        /// <summary>Whether the device is jail broken or rooted. Default is an empty string. Supports $filter operator &apos;eq&apos; and &apos;or&apos;. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JailBroken
        {
            get { return BackingStore?.Get<string?>("jailBroken"); }
            set { BackingStore?.Set("jailBroken", value); }
        }
#nullable restore
#else
        public string JailBroken
        {
            get { return BackingStore?.Get<string>("jailBroken"); }
            set { BackingStore?.Set("jailBroken", value); }
        }
#endif
        /// <summary>Device enrollment join type.</summary>
        public global::Microsoft.Graph.Beta.Models.JoinType? JoinType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.JoinType?>("joinType"); }
            set { BackingStore?.Set("joinType", value); }
        }
        /// <summary>The date and time that the device last completed a successful sync with Intune. Supports $filter operator &apos;lt&apos; and &apos;gt&apos;. This property is read-only.</summary>
        public DateTimeOffset? LastSyncDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastSyncDateTime"); }
            set { BackingStore?.Set("lastSyncDateTime", value); }
        }
        /// <summary>List of log collection requests</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceLogCollectionResponse>? LogCollectionRequests
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceLogCollectionResponse>?>("logCollectionRequests"); }
            set { BackingStore?.Set("logCollectionRequests", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceLogCollectionResponse> LogCollectionRequests
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceLogCollectionResponse>>("logCollectionRequests"); }
            set { BackingStore?.Set("logCollectionRequests", value); }
        }
#endif
        /// <summary>State of lost mode, indicating if lost mode is enabled or disabled</summary>
        public global::Microsoft.Graph.Beta.Models.LostModeState? LostModeState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.LostModeState?>("lostModeState"); }
            set { BackingStore?.Set("lostModeState", value); }
        }
        /// <summary>Managed device mobile app configuration states for this device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ManagedDeviceMobileAppConfigurationState>? ManagedDeviceMobileAppConfigurationStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedDeviceMobileAppConfigurationState>?>("managedDeviceMobileAppConfigurationStates"); }
            set { BackingStore?.Set("managedDeviceMobileAppConfigurationStates", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ManagedDeviceMobileAppConfigurationState> ManagedDeviceMobileAppConfigurationStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedDeviceMobileAppConfigurationState>>("managedDeviceMobileAppConfigurationStates"); }
            set { BackingStore?.Set("managedDeviceMobileAppConfigurationStates", value); }
        }
#endif
        /// <summary>Automatically generated name to identify a device. Can be overwritten to a user friendly name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManagedDeviceName
        {
            get { return BackingStore?.Get<string?>("managedDeviceName"); }
            set { BackingStore?.Set("managedDeviceName", value); }
        }
#nullable restore
#else
        public string ManagedDeviceName
        {
            get { return BackingStore?.Get<string>("managedDeviceName"); }
            set { BackingStore?.Set("managedDeviceName", value); }
        }
#endif
        /// <summary>Owner type of device.</summary>
        public global::Microsoft.Graph.Beta.Models.ManagedDeviceOwnerType? ManagedDeviceOwnerType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ManagedDeviceOwnerType?>("managedDeviceOwnerType"); }
            set { BackingStore?.Set("managedDeviceOwnerType", value); }
        }
        /// <summary>Management agent type.</summary>
        public global::Microsoft.Graph.Beta.Models.ManagementAgentType? ManagementAgent
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ManagementAgentType?>("managementAgent"); }
            set { BackingStore?.Set("managementAgent", value); }
        }
        /// <summary>Reports device management certificate expiration date. This property is read-only.</summary>
        public DateTimeOffset? ManagementCertificateExpirationDate
        {
            get { return BackingStore?.Get<DateTimeOffset?>("managementCertificateExpirationDate"); }
            set { BackingStore?.Set("managementCertificateExpirationDate", value); }
        }
        /// <summary>Device management features.</summary>
        public global::Microsoft.Graph.Beta.Models.ManagedDeviceManagementFeatures? ManagementFeatures
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ManagedDeviceManagementFeatures?>("managementFeatures"); }
            set { BackingStore?.Set("managementFeatures", value); }
        }
        /// <summary>Management state of device in Microsoft Intune.</summary>
        public global::Microsoft.Graph.Beta.Models.ManagementState? ManagementState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ManagementState?>("managementState"); }
            set { BackingStore?.Set("managementState", value); }
        }
        /// <summary>Manufacturer of the device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Manufacturer
        {
            get { return BackingStore?.Get<string?>("manufacturer"); }
            set { BackingStore?.Set("manufacturer", value); }
        }
#nullable restore
#else
        public string Manufacturer
        {
            get { return BackingStore?.Get<string>("manufacturer"); }
            set { BackingStore?.Set("manufacturer", value); }
        }
#endif
        /// <summary>MEID. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Meid
        {
            get { return BackingStore?.Get<string?>("meid"); }
            set { BackingStore?.Set("meid", value); }
        }
#nullable restore
#else
        public string Meid
        {
            get { return BackingStore?.Get<string>("meid"); }
            set { BackingStore?.Set("meid", value); }
        }
#endif
        /// <summary>Model of the device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model
        {
            get { return BackingStore?.Get<string?>("model"); }
            set { BackingStore?.Set("model", value); }
        }
#nullable restore
#else
        public string Model
        {
            get { return BackingStore?.Get<string>("model"); }
            set { BackingStore?.Set("model", value); }
        }
#endif
        /// <summary>Notes on the device created by IT Admin. Default is null. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes
        {
            get { return BackingStore?.Get<string?>("notes"); }
            set { BackingStore?.Set("notes", value); }
        }
#nullable restore
#else
        public string Notes
        {
            get { return BackingStore?.Get<string>("notes"); }
            set { BackingStore?.Set("notes", value); }
        }
#endif
        /// <summary>Operating system of the device. Windows, iOS, etc. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OperatingSystem
        {
            get { return BackingStore?.Get<string?>("operatingSystem"); }
            set { BackingStore?.Set("operatingSystem", value); }
        }
#nullable restore
#else
        public string OperatingSystem
        {
            get { return BackingStore?.Get<string>("operatingSystem"); }
            set { BackingStore?.Set("operatingSystem", value); }
        }
#endif
        /// <summary>Operating system version of the device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OsVersion
        {
            get { return BackingStore?.Get<string?>("osVersion"); }
            set { BackingStore?.Set("osVersion", value); }
        }
#nullable restore
#else
        public string OsVersion
        {
            get { return BackingStore?.Get<string>("osVersion"); }
            set { BackingStore?.Set("osVersion", value); }
        }
#endif
        /// <summary>Owner type of device.</summary>
        public global::Microsoft.Graph.Beta.Models.OwnerType? OwnerType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OwnerType?>("ownerType"); }
            set { BackingStore?.Set("ownerType", value); }
        }
        /// <summary>Available health states for the Device Health API</summary>
        public global::Microsoft.Graph.Beta.Models.ManagedDevicePartnerReportedHealthState? PartnerReportedThreatState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ManagedDevicePartnerReportedHealthState?>("partnerReportedThreatState"); }
            set { BackingStore?.Set("partnerReportedThreatState", value); }
        }
        /// <summary>Phone number of the device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhoneNumber
        {
            get { return BackingStore?.Get<string?>("phoneNumber"); }
            set { BackingStore?.Set("phoneNumber", value); }
        }
#nullable restore
#else
        public string PhoneNumber
        {
            get { return BackingStore?.Get<string>("phoneNumber"); }
            set { BackingStore?.Set("phoneNumber", value); }
        }
#endif
        /// <summary>Total Memory in Bytes. Default is 0. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. Read-only. This property is read-only.</summary>
        public long? PhysicalMemoryInBytes
        {
            get { return BackingStore?.Get<long?>("physicalMemoryInBytes"); }
            set { BackingStore?.Set("physicalMemoryInBytes", value); }
        }
        /// <summary>Reports the DateTime the preferMdmOverGroupPolicy setting was set.  When set, the Intune MDM settings will override Group Policy settings if there is a conflict. Read Only. This property is read-only.</summary>
        public DateTimeOffset? PreferMdmOverGroupPolicyAppliedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("preferMdmOverGroupPolicyAppliedDateTime"); }
            set { BackingStore?.Set("preferMdmOverGroupPolicyAppliedDateTime", value); }
        }
        /// <summary>Processor architecture</summary>
        public global::Microsoft.Graph.Beta.Models.ManagedDeviceArchitecture? ProcessorArchitecture
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ManagedDeviceArchitecture?>("processorArchitecture"); }
            set { BackingStore?.Set("processorArchitecture", value); }
        }
        /// <summary>An error string that identifies issues when creating Remote Assistance session objects. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteAssistanceSessionErrorDetails
        {
            get { return BackingStore?.Get<string?>("remoteAssistanceSessionErrorDetails"); }
            set { BackingStore?.Set("remoteAssistanceSessionErrorDetails", value); }
        }
#nullable restore
#else
        public string RemoteAssistanceSessionErrorDetails
        {
            get { return BackingStore?.Get<string>("remoteAssistanceSessionErrorDetails"); }
            set { BackingStore?.Set("remoteAssistanceSessionErrorDetails", value); }
        }
#endif
        /// <summary>Url that allows a Remote Assistance session to be established with the device. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteAssistanceSessionUrl
        {
            get { return BackingStore?.Get<string?>("remoteAssistanceSessionUrl"); }
            set { BackingStore?.Set("remoteAssistanceSessionUrl", value); }
        }
#nullable restore
#else
        public string RemoteAssistanceSessionUrl
        {
            get { return BackingStore?.Get<string>("remoteAssistanceSessionUrl"); }
            set { BackingStore?.Set("remoteAssistanceSessionUrl", value); }
        }
#endif
        /// <summary>Reports if the managed iOS device is user approval enrollment. This property is read-only.</summary>
        public bool? RequireUserEnrollmentApproval
        {
            get { return BackingStore?.Get<bool?>("requireUserEnrollmentApproval"); }
            set { BackingStore?.Set("requireUserEnrollmentApproval", value); }
        }
        /// <summary>Indicates the time after when a device will be auto retired because of scheduled action. This property is read-only.</summary>
        public DateTimeOffset? RetireAfterDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("retireAfterDateTime"); }
            set { BackingStore?.Set("retireAfterDateTime", value); }
        }
        /// <summary>List of Scope Tag IDs for this Device instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleScopeTagIds
        {
            get { return BackingStore?.Get<List<string>?>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#nullable restore
#else
        public List<string> RoleScopeTagIds
        {
            get { return BackingStore?.Get<List<string>>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#endif
        /// <summary>Security baseline states for this device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.SecurityBaselineState>? SecurityBaselineStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.SecurityBaselineState>?>("securityBaselineStates"); }
            set { BackingStore?.Set("securityBaselineStates", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.SecurityBaselineState> SecurityBaselineStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.SecurityBaselineState>>("securityBaselineStates"); }
            set { BackingStore?.Set("securityBaselineStates", value); }
        }
#endif
        /// <summary>This indicates the security patch level of the operating system. These special updates contain important security fixes. For iOS/MacOS they are in (a) format. For android its in 2017-08-07 format. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecurityPatchLevel
        {
            get { return BackingStore?.Get<string?>("securityPatchLevel"); }
            set { BackingStore?.Set("securityPatchLevel", value); }
        }
#nullable restore
#else
        public string SecurityPatchLevel
        {
            get { return BackingStore?.Get<string>("securityPatchLevel"); }
            set { BackingStore?.Set("securityPatchLevel", value); }
        }
#endif
        /// <summary>SerialNumber. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber
        {
            get { return BackingStore?.Get<string?>("serialNumber"); }
            set { BackingStore?.Set("serialNumber", value); }
        }
#nullable restore
#else
        public string SerialNumber
        {
            get { return BackingStore?.Get<string>("serialNumber"); }
            set { BackingStore?.Set("serialNumber", value); }
        }
#endif
        /// <summary>Device sku family</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SkuFamily
        {
            get { return BackingStore?.Get<string?>("skuFamily"); }
            set { BackingStore?.Set("skuFamily", value); }
        }
#nullable restore
#else
        public string SkuFamily
        {
            get { return BackingStore?.Get<string>("skuFamily"); }
            set { BackingStore?.Set("skuFamily", value); }
        }
#endif
        /// <summary>Device sku number, see also: https://learn.microsoft.com/windows/win32/api/sysinfoapi/nf-sysinfoapi-getproductinfo. Valid values 0 to 2147483647. This property is read-only.</summary>
        public int? SkuNumber
        {
            get { return BackingStore?.Get<int?>("skuNumber"); }
            set { BackingStore?.Set("skuNumber", value); }
        }
        /// <summary>Specification version. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SpecificationVersion
        {
            get { return BackingStore?.Get<string?>("specificationVersion"); }
            set { BackingStore?.Set("specificationVersion", value); }
        }
#nullable restore
#else
        public string SpecificationVersion
        {
            get { return BackingStore?.Get<string>("specificationVersion"); }
            set { BackingStore?.Set("specificationVersion", value); }
        }
#endif
        /// <summary>Subscriber Carrier. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriberCarrier
        {
            get { return BackingStore?.Get<string?>("subscriberCarrier"); }
            set { BackingStore?.Set("subscriberCarrier", value); }
        }
#nullable restore
#else
        public string SubscriberCarrier
        {
            get { return BackingStore?.Get<string>("subscriberCarrier"); }
            set { BackingStore?.Set("subscriberCarrier", value); }
        }
#endif
        /// <summary>Total Storage in Bytes. This property is read-only.</summary>
        public long? TotalStorageSpaceInBytes
        {
            get { return BackingStore?.Get<long?>("totalStorageSpaceInBytes"); }
            set { BackingStore?.Set("totalStorageSpaceInBytes", value); }
        }
        /// <summary>Unique Device Identifier for iOS and macOS devices. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Udid
        {
            get { return BackingStore?.Get<string?>("udid"); }
            set { BackingStore?.Set("udid", value); }
        }
#nullable restore
#else
        public string Udid
        {
            get { return BackingStore?.Get<string>("udid"); }
            set { BackingStore?.Set("udid", value); }
        }
#endif
        /// <summary>User display name. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserDisplayName
        {
            get { return BackingStore?.Get<string?>("userDisplayName"); }
            set { BackingStore?.Set("userDisplayName", value); }
        }
#nullable restore
#else
        public string UserDisplayName
        {
            get { return BackingStore?.Get<string>("userDisplayName"); }
            set { BackingStore?.Set("userDisplayName", value); }
        }
#endif
        /// <summary>Unique Identifier for the user associated with the device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId
        {
            get { return BackingStore?.Get<string?>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#nullable restore
#else
        public string UserId
        {
            get { return BackingStore?.Get<string>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#endif
        /// <summary>Device user principal name. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName
        {
            get { return BackingStore?.Get<string?>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#nullable restore
#else
        public string UserPrincipalName
        {
            get { return BackingStore?.Get<string>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#endif
        /// <summary>The primary users associated with the managed device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.User>? Users
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.User>?>("users"); }
            set { BackingStore?.Set("users", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.User> Users
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.User>>("users"); }
            set { BackingStore?.Set("users", value); }
        }
#endif
        /// <summary>Indicates the last logged on users of a device. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.LoggedOnUser>? UsersLoggedOn
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.LoggedOnUser>?>("usersLoggedOn"); }
            set { BackingStore?.Set("usersLoggedOn", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.LoggedOnUser> UsersLoggedOn
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.LoggedOnUser>>("usersLoggedOn"); }
            set { BackingStore?.Set("usersLoggedOn", value); }
        }
#endif
        /// <summary>Wi-Fi MAC. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WiFiMacAddress
        {
            get { return BackingStore?.Get<string?>("wiFiMacAddress"); }
            set { BackingStore?.Set("wiFiMacAddress", value); }
        }
#nullable restore
#else
        public string WiFiMacAddress
        {
            get { return BackingStore?.Get<string>("wiFiMacAddress"); }
            set { BackingStore?.Set("wiFiMacAddress", value); }
        }
#endif
        /// <summary>Count of active malware for this windows device. Default is 0. To retrieve actual values GET call needs to be made, with device id and included in select parameter. This property is read-only.</summary>
        public int? WindowsActiveMalwareCount
        {
            get { return BackingStore?.Get<int?>("windowsActiveMalwareCount"); }
            set { BackingStore?.Set("windowsActiveMalwareCount", value); }
        }
        /// <summary>The device protection status. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.WindowsProtectionState? WindowsProtectionState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WindowsProtectionState?>("windowsProtectionState"); }
            set { BackingStore?.Set("windowsProtectionState", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.WindowsProtectionState WindowsProtectionState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WindowsProtectionState>("windowsProtectionState"); }
            set { BackingStore?.Set("windowsProtectionState", value); }
        }
#endif
        /// <summary>Count of remediated malware for this windows device. Default is 0. To retrieve actual values GET call needs to be made, with device id and included in select parameter. This property is read-only.</summary>
        public int? WindowsRemediatedMalwareCount
        {
            get { return BackingStore?.Get<int?>("windowsRemediatedMalwareCount"); }
            set { BackingStore?.Set("windowsRemediatedMalwareCount", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.ManagedDevice"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.ManagedDevice CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.windowsManagedDevice" => new global::Microsoft.Graph.Beta.Models.WindowsManagedDevice(),
                _ => new global::Microsoft.Graph.Beta.Models.ManagedDevice(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "aadRegistered", n => { AadRegistered = n.GetBoolValue(); } },
                { "activationLockBypassCode", n => { ActivationLockBypassCode = n.GetStringValue(); } },
                { "androidSecurityPatchLevel", n => { AndroidSecurityPatchLevel = n.GetStringValue(); } },
                { "assignmentFilterEvaluationStatusDetails", n => { AssignmentFilterEvaluationStatusDetails = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignmentFilterEvaluationStatusDetails>(global::Microsoft.Graph.Beta.Models.AssignmentFilterEvaluationStatusDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "autopilotEnrolled", n => { AutopilotEnrolled = n.GetBoolValue(); } },
                { "azureADDeviceId", n => { AzureADDeviceId = n.GetStringValue(); } },
                { "azureADRegistered", n => { AzureADRegistered = n.GetBoolValue(); } },
                { "azureActiveDirectoryDeviceId", n => { AzureActiveDirectoryDeviceId = n.GetStringValue(); } },
                { "bootstrapTokenEscrowed", n => { BootstrapTokenEscrowed = n.GetBoolValue(); } },
                { "chassisType", n => { ChassisType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ChassisType>(); } },
                { "chromeOSDeviceInfo", n => { ChromeOSDeviceInfo = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ChromeOSDeviceProperty>(global::Microsoft.Graph.Beta.Models.ChromeOSDeviceProperty.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cloudPcRemoteActionResults", n => { CloudPcRemoteActionResults = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CloudPcRemoteActionResult>(global::Microsoft.Graph.Beta.Models.CloudPcRemoteActionResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "complianceGracePeriodExpirationDateTime", n => { ComplianceGracePeriodExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "complianceState", n => { ComplianceState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ComplianceState>(); } },
                { "configurationManagerClientEnabledFeatures", n => { ConfigurationManagerClientEnabledFeatures = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientEnabledFeatures>(global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientEnabledFeatures.CreateFromDiscriminatorValue); } },
                { "configurationManagerClientHealthState", n => { ConfigurationManagerClientHealthState = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientHealthState>(global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientHealthState.CreateFromDiscriminatorValue); } },
                { "configurationManagerClientInformation", n => { ConfigurationManagerClientInformation = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientInformation>(global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientInformation.CreateFromDiscriminatorValue); } },
                { "detectedApps", n => { DetectedApps = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DetectedApp>(global::Microsoft.Graph.Beta.Models.DetectedApp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceActionResults", n => { DeviceActionResults = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceActionResult>(global::Microsoft.Graph.Beta.Models.DeviceActionResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceCategory", n => { DeviceCategory = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.DeviceCategory>(global::Microsoft.Graph.Beta.Models.DeviceCategory.CreateFromDiscriminatorValue); } },
                { "deviceCategoryDisplayName", n => { DeviceCategoryDisplayName = n.GetStringValue(); } },
                { "deviceCompliancePolicyStates", n => { DeviceCompliancePolicyStates = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceCompliancePolicyState>(global::Microsoft.Graph.Beta.Models.DeviceCompliancePolicyState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceConfigurationStates", n => { DeviceConfigurationStates = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceConfigurationState>(global::Microsoft.Graph.Beta.Models.DeviceConfigurationState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceEnrollmentType", n => { DeviceEnrollmentType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.DeviceEnrollmentType>(); } },
                { "deviceFirmwareConfigurationInterfaceManaged", n => { DeviceFirmwareConfigurationInterfaceManaged = n.GetBoolValue(); } },
                { "deviceHealthAttestationState", n => { DeviceHealthAttestationState = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.DeviceHealthAttestationState>(global::Microsoft.Graph.Beta.Models.DeviceHealthAttestationState.CreateFromDiscriminatorValue); } },
                { "deviceHealthScriptStates", n => { DeviceHealthScriptStates = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceHealthScriptPolicyState>(global::Microsoft.Graph.Beta.Models.DeviceHealthScriptPolicyState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceName", n => { DeviceName = n.GetStringValue(); } },
                { "deviceRegistrationState", n => { DeviceRegistrationState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.DeviceRegistrationState>(); } },
                { "deviceType", n => { DeviceType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.DeviceType>(); } },
                { "easActivated", n => { EasActivated = n.GetBoolValue(); } },
                { "easActivationDateTime", n => { EasActivationDateTime = n.GetDateTimeOffsetValue(); } },
                { "easDeviceId", n => { EasDeviceId = n.GetStringValue(); } },
                { "emailAddress", n => { EmailAddress = n.GetStringValue(); } },
                { "enrolledByUserPrincipalName", n => { EnrolledByUserPrincipalName = n.GetStringValue(); } },
                { "enrolledDateTime", n => { EnrolledDateTime = n.GetDateTimeOffsetValue(); } },
                { "enrollmentProfileName", n => { EnrollmentProfileName = n.GetStringValue(); } },
                { "ethernetMacAddress", n => { EthernetMacAddress = n.GetStringValue(); } },
                { "exchangeAccessState", n => { ExchangeAccessState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessState>(); } },
                { "exchangeAccessStateReason", n => { ExchangeAccessStateReason = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessStateReason>(); } },
                { "exchangeLastSuccessfulSyncDateTime", n => { ExchangeLastSuccessfulSyncDateTime = n.GetDateTimeOffsetValue(); } },
                { "freeStorageSpaceInBytes", n => { FreeStorageSpaceInBytes = n.GetLongValue(); } },
                { "hardwareInformation", n => { HardwareInformation = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.HardwareInformation>(global::Microsoft.Graph.Beta.Models.HardwareInformation.CreateFromDiscriminatorValue); } },
                { "iccid", n => { Iccid = n.GetStringValue(); } },
                { "imei", n => { Imei = n.GetStringValue(); } },
                { "isEncrypted", n => { IsEncrypted = n.GetBoolValue(); } },
                { "isSupervised", n => { IsSupervised = n.GetBoolValue(); } },
                { "jailBroken", n => { JailBroken = n.GetStringValue(); } },
                { "joinType", n => { JoinType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.JoinType>(); } },
                { "lastSyncDateTime", n => { LastSyncDateTime = n.GetDateTimeOffsetValue(); } },
                { "logCollectionRequests", n => { LogCollectionRequests = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceLogCollectionResponse>(global::Microsoft.Graph.Beta.Models.DeviceLogCollectionResponse.CreateFromDiscriminatorValue)?.AsList(); } },
                { "lostModeState", n => { LostModeState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.LostModeState>(); } },
                { "managedDeviceMobileAppConfigurationStates", n => { ManagedDeviceMobileAppConfigurationStates = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedDeviceMobileAppConfigurationState>(global::Microsoft.Graph.Beta.Models.ManagedDeviceMobileAppConfigurationState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "managedDeviceName", n => { ManagedDeviceName = n.GetStringValue(); } },
                { "managedDeviceOwnerType", n => { ManagedDeviceOwnerType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDeviceOwnerType>(); } },
                { "managementAgent", n => { ManagementAgent = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ManagementAgentType>(); } },
                { "managementCertificateExpirationDate", n => { ManagementCertificateExpirationDate = n.GetDateTimeOffsetValue(); } },
                { "managementFeatures", n => { ManagementFeatures = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDeviceManagementFeatures>(); } },
                { "managementState", n => { ManagementState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ManagementState>(); } },
                { "manufacturer", n => { Manufacturer = n.GetStringValue(); } },
                { "meid", n => { Meid = n.GetStringValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "operatingSystem", n => { OperatingSystem = n.GetStringValue(); } },
                { "osVersion", n => { OsVersion = n.GetStringValue(); } },
                { "ownerType", n => { OwnerType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.OwnerType>(); } },
                { "partnerReportedThreatState", n => { PartnerReportedThreatState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDevicePartnerReportedHealthState>(); } },
                { "phoneNumber", n => { PhoneNumber = n.GetStringValue(); } },
                { "physicalMemoryInBytes", n => { PhysicalMemoryInBytes = n.GetLongValue(); } },
                { "preferMdmOverGroupPolicyAppliedDateTime", n => { PreferMdmOverGroupPolicyAppliedDateTime = n.GetDateTimeOffsetValue(); } },
                { "processorArchitecture", n => { ProcessorArchitecture = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDeviceArchitecture>(); } },
                { "remoteAssistanceSessionErrorDetails", n => { RemoteAssistanceSessionErrorDetails = n.GetStringValue(); } },
                { "remoteAssistanceSessionUrl", n => { RemoteAssistanceSessionUrl = n.GetStringValue(); } },
                { "requireUserEnrollmentApproval", n => { RequireUserEnrollmentApproval = n.GetBoolValue(); } },
                { "retireAfterDateTime", n => { RetireAfterDateTime = n.GetDateTimeOffsetValue(); } },
                { "roleScopeTagIds", n => { RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "securityBaselineStates", n => { SecurityBaselineStates = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.SecurityBaselineState>(global::Microsoft.Graph.Beta.Models.SecurityBaselineState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "securityPatchLevel", n => { SecurityPatchLevel = n.GetStringValue(); } },
                { "serialNumber", n => { SerialNumber = n.GetStringValue(); } },
                { "skuFamily", n => { SkuFamily = n.GetStringValue(); } },
                { "skuNumber", n => { SkuNumber = n.GetIntValue(); } },
                { "specificationVersion", n => { SpecificationVersion = n.GetStringValue(); } },
                { "subscriberCarrier", n => { SubscriberCarrier = n.GetStringValue(); } },
                { "totalStorageSpaceInBytes", n => { TotalStorageSpaceInBytes = n.GetLongValue(); } },
                { "udid", n => { Udid = n.GetStringValue(); } },
                { "userDisplayName", n => { UserDisplayName = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
                { "users", n => { Users = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.User>(global::Microsoft.Graph.Beta.Models.User.CreateFromDiscriminatorValue)?.AsList(); } },
                { "usersLoggedOn", n => { UsersLoggedOn = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.LoggedOnUser>(global::Microsoft.Graph.Beta.Models.LoggedOnUser.CreateFromDiscriminatorValue)?.AsList(); } },
                { "wiFiMacAddress", n => { WiFiMacAddress = n.GetStringValue(); } },
                { "windowsActiveMalwareCount", n => { WindowsActiveMalwareCount = n.GetIntValue(); } },
                { "windowsProtectionState", n => { WindowsProtectionState = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.WindowsProtectionState>(global::Microsoft.Graph.Beta.Models.WindowsProtectionState.CreateFromDiscriminatorValue); } },
                { "windowsRemediatedMalwareCount", n => { WindowsRemediatedMalwareCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignmentFilterEvaluationStatusDetails>("assignmentFilterEvaluationStatusDetails", AssignmentFilterEvaluationStatusDetails);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ChassisType>("chassisType", ChassisType);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ChromeOSDeviceProperty>("chromeOSDeviceInfo", ChromeOSDeviceInfo);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CloudPcRemoteActionResult>("cloudPcRemoteActionResults", CloudPcRemoteActionResults);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ComplianceState>("complianceState", ComplianceState);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientHealthState>("configurationManagerClientHealthState", ConfigurationManagerClientHealthState);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ConfigurationManagerClientInformation>("configurationManagerClientInformation", ConfigurationManagerClientInformation);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DetectedApp>("detectedApps", DetectedApps);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.DeviceCategory>("deviceCategory", DeviceCategory);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceCompliancePolicyState>("deviceCompliancePolicyStates", DeviceCompliancePolicyStates);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceConfigurationState>("deviceConfigurationStates", DeviceConfigurationStates);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.DeviceEnrollmentType>("deviceEnrollmentType", DeviceEnrollmentType);
            writer.WriteBoolValue("deviceFirmwareConfigurationInterfaceManaged", DeviceFirmwareConfigurationInterfaceManaged);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceHealthScriptPolicyState>("deviceHealthScriptStates", DeviceHealthScriptStates);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.DeviceRegistrationState>("deviceRegistrationState", DeviceRegistrationState);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.DeviceType>("deviceType", DeviceType);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessState>("exchangeAccessState", ExchangeAccessState);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessStateReason>("exchangeAccessStateReason", ExchangeAccessStateReason);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.JoinType>("joinType", JoinType);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceLogCollectionResponse>("logCollectionRequests", LogCollectionRequests);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.LostModeState>("lostModeState", LostModeState);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedDeviceMobileAppConfigurationState>("managedDeviceMobileAppConfigurationStates", ManagedDeviceMobileAppConfigurationStates);
            writer.WriteStringValue("managedDeviceName", ManagedDeviceName);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDeviceOwnerType>("managedDeviceOwnerType", ManagedDeviceOwnerType);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ManagementAgentType>("managementAgent", ManagementAgent);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDeviceManagementFeatures>("managementFeatures", ManagementFeatures);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ManagementState>("managementState", ManagementState);
            writer.WriteStringValue("notes", Notes);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.OwnerType>("ownerType", OwnerType);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDevicePartnerReportedHealthState>("partnerReportedThreatState", PartnerReportedThreatState);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ManagedDeviceArchitecture>("processorArchitecture", ProcessorArchitecture);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.SecurityBaselineState>("securityBaselineStates", SecurityBaselineStates);
            writer.WriteStringValue("skuFamily", SkuFamily);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.User>("users", Users);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.WindowsProtectionState>("windowsProtectionState", WindowsProtectionState);
        }
    }
}
#pragma warning restore CS0618
