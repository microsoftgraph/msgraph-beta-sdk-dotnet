// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Singleton entity which represents the Exchange OnPremises policy configured for a tenant.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DeviceManagementExchangeOnPremisesPolicy : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>The list of device access rules in Exchange. The access rules apply globally to the entire Exchange organization</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessRule>? AccessRules
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessRule>?>("accessRules"); }
            set { BackingStore?.Set("accessRules", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessRule> AccessRules
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessRule>>("accessRules"); }
            set { BackingStore?.Set("accessRules", value); }
        }
#endif
        /// <summary>The Exchange on premises conditional access settings. On premises conditional access will require devices to be both enrolled and compliant for mail access</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.OnPremisesConditionalAccessSettings? ConditionalAccessSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OnPremisesConditionalAccessSettings?>("conditionalAccessSettings"); }
            set { BackingStore?.Set("conditionalAccessSettings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.OnPremisesConditionalAccessSettings ConditionalAccessSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OnPremisesConditionalAccessSettings>("conditionalAccessSettings"); }
            set { BackingStore?.Set("conditionalAccessSettings", value); }
        }
#endif
        /// <summary>Access Level in Exchange.</summary>
        public global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessLevel? DefaultAccessLevel
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessLevel?>("defaultAccessLevel"); }
            set { BackingStore?.Set("defaultAccessLevel", value); }
        }
        /// <summary>The list of device classes known to Exchange</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeDeviceClass>? KnownDeviceClasses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeDeviceClass>?>("knownDeviceClasses"); }
            set { BackingStore?.Set("knownDeviceClasses", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeDeviceClass> KnownDeviceClasses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeDeviceClass>>("knownDeviceClasses"); }
            set { BackingStore?.Set("knownDeviceClasses", value); }
        }
#endif
        /// <summary>Notification text that will be sent to users quarantined by this policy. This is UTF8 encoded byte array HTML.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? NotificationContent
        {
            get { return BackingStore?.Get<byte[]?>("notificationContent"); }
            set { BackingStore?.Set("notificationContent", value); }
        }
#nullable restore
#else
        public byte[] NotificationContent
        {
            get { return BackingStore?.Get<byte[]>("notificationContent"); }
            set { BackingStore?.Set("notificationContent", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeOnPremisesPolicy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeOnPremisesPolicy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeOnPremisesPolicy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accessRules", n => { AccessRules = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessRule>(global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessRule.CreateFromDiscriminatorValue)?.AsList(); } },
                { "conditionalAccessSettings", n => { ConditionalAccessSettings = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.OnPremisesConditionalAccessSettings>(global::Microsoft.Graph.Beta.Models.OnPremisesConditionalAccessSettings.CreateFromDiscriminatorValue); } },
                { "defaultAccessLevel", n => { DefaultAccessLevel = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessLevel>(); } },
                { "knownDeviceClasses", n => { KnownDeviceClasses = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeDeviceClass>(global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeDeviceClass.CreateFromDiscriminatorValue)?.AsList(); } },
                { "notificationContent", n => { NotificationContent = n.GetByteArrayValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessRule>("accessRules", AccessRules);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.OnPremisesConditionalAccessSettings>("conditionalAccessSettings", ConditionalAccessSettings);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeAccessLevel>("defaultAccessLevel", DefaultAccessLevel);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementExchangeDeviceClass>("knownDeviceClasses", KnownDeviceClasses);
            writer.WriteByteArrayValue("notificationContent", NotificationContent);
        }
    }
}
#pragma warning restore CS0618
