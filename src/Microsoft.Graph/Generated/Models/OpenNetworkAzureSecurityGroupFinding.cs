// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class OpenNetworkAzureSecurityGroupFinding : Finding, IParsable 
    {
        /// <summary>The inboundPorts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.InboundPorts? InboundPorts {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.InboundPorts?>("inboundPorts"); }
            set { BackingStore?.Set("inboundPorts", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.InboundPorts InboundPorts {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.InboundPorts>("inboundPorts"); }
            set { BackingStore?.Set("inboundPorts", value); }
        }
#endif
        /// <summary>The securityGroup property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AuthorizationSystemResource? SecurityGroup {
            get { return BackingStore?.Get<AuthorizationSystemResource?>("securityGroup"); }
            set { BackingStore?.Set("securityGroup", value); }
        }
#nullable restore
#else
        public AuthorizationSystemResource SecurityGroup {
            get { return BackingStore?.Get<AuthorizationSystemResource>("securityGroup"); }
            set { BackingStore?.Set("securityGroup", value); }
        }
#endif
        /// <summary>Represents a virtual machine in an authorization system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<VirtualMachineDetails>? VirtualMachines {
            get { return BackingStore?.Get<List<VirtualMachineDetails>?>("virtualMachines"); }
            set { BackingStore?.Set("virtualMachines", value); }
        }
#nullable restore
#else
        public List<VirtualMachineDetails> VirtualMachines {
            get { return BackingStore?.Get<List<VirtualMachineDetails>>("virtualMachines"); }
            set { BackingStore?.Set("virtualMachines", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="OpenNetworkAzureSecurityGroupFinding"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new OpenNetworkAzureSecurityGroupFinding CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new OpenNetworkAzureSecurityGroupFinding();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"inboundPorts", n => { InboundPorts = n.GetObjectValue<Microsoft.Graph.Beta.Models.InboundPorts>(Microsoft.Graph.Beta.Models.InboundPorts.CreateFromDiscriminatorValue); } },
                {"securityGroup", n => { SecurityGroup = n.GetObjectValue<AuthorizationSystemResource>(AuthorizationSystemResource.CreateFromDiscriminatorValue); } },
                {"virtualMachines", n => { VirtualMachines = n.GetCollectionOfObjectValues<VirtualMachineDetails>(VirtualMachineDetails.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.InboundPorts>("inboundPorts", InboundPorts);
            writer.WriteObjectValue<AuthorizationSystemResource>("securityGroup", SecurityGroup);
            writer.WriteCollectionOfObjectValues<VirtualMachineDetails>("virtualMachines", VirtualMachines);
        }
    }
}
