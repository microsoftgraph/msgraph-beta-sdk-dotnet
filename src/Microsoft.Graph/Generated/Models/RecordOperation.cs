// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RecordOperation : global::Microsoft.Graph.Beta.Models.CommsOperation, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Possible values are: operationCanceled, stopToneDetected, maxRecordDurationReached, initialSilenceTimeout, maxSilenceTimeout, playPromptFailed, playBeepFailed, mediaReceiveTimeout, unspecifiedError, none.</summary>
        public global::Microsoft.Graph.Beta.Models.RecordCompletionReason? CompletionReason
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RecordCompletionReason?>("completionReason"); }
            set { BackingStore?.Set("completionReason", value); }
        }
        /// <summary>The access token required to retrieve the recording.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingAccessToken
        {
            get { return BackingStore?.Get<string?>("recordingAccessToken"); }
            set { BackingStore?.Set("recordingAccessToken", value); }
        }
#nullable restore
#else
        public string RecordingAccessToken
        {
            get { return BackingStore?.Get<string>("recordingAccessToken"); }
            set { BackingStore?.Set("recordingAccessToken", value); }
        }
#endif
        /// <summary>The location where the recording is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingLocation
        {
            get { return BackingStore?.Get<string?>("recordingLocation"); }
            set { BackingStore?.Set("recordingLocation", value); }
        }
#nullable restore
#else
        public string RecordingLocation
        {
            get { return BackingStore?.Get<string>("recordingLocation"); }
            set { BackingStore?.Set("recordingLocation", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.RecordOperation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.RecordOperation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.RecordOperation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "completionReason", n => { CompletionReason = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.RecordCompletionReason>(); } },
                { "recordingAccessToken", n => { RecordingAccessToken = n.GetStringValue(); } },
                { "recordingLocation", n => { RecordingLocation = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.RecordCompletionReason>("completionReason", CompletionReason);
            writer.WriteStringValue("recordingAccessToken", RecordingAccessToken);
            writer.WriteStringValue("recordingLocation", RecordingLocation);
        }
    }
}
#pragma warning restore CS0618
