// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class AwsExternalSystemAccessFinding : Microsoft.Graph.Beta.Models.Finding, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accessMethods property</summary>
        public Microsoft.Graph.Beta.Models.ExternalSystemAccessMethods? AccessMethods
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ExternalSystemAccessMethods?>("accessMethods"); }
            set { BackingStore?.Set("accessMethods", value); }
        }
        /// <summary>The affectedSystem property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AuthorizationSystem? AffectedSystem
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AuthorizationSystem?>("affectedSystem"); }
            set { BackingStore?.Set("affectedSystem", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AuthorizationSystem AffectedSystem
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AuthorizationSystem>("affectedSystem"); }
            set { BackingStore?.Set("affectedSystem", value); }
        }
#endif
        /// <summary>The systemWithAccess property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AuthorizationSystemInfo? SystemWithAccess
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AuthorizationSystemInfo?>("systemWithAccess"); }
            set { BackingStore?.Set("systemWithAccess", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AuthorizationSystemInfo SystemWithAccess
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AuthorizationSystemInfo>("systemWithAccess"); }
            set { BackingStore?.Set("systemWithAccess", value); }
        }
#endif
        /// <summary>The number of identities in the external system that are trusted, if not all. Supports $orderby.</summary>
        public int? TrustedIdentityCount
        {
            get { return BackingStore?.Get<int?>("trustedIdentityCount"); }
            set { BackingStore?.Set("trustedIdentityCount", value); }
        }
        /// <summary>Flag that determines if all identities in the external system are trusted, or only a subset.</summary>
        public bool? TrustsAllIdentities
        {
            get { return BackingStore?.Get<bool?>("trustsAllIdentities"); }
            set { BackingStore?.Set("trustsAllIdentities", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.AwsExternalSystemAccessFinding"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.AwsExternalSystemAccessFinding CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.AwsExternalSystemAccessFinding();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accessMethods", n => { AccessMethods = n.GetEnumValue<Microsoft.Graph.Beta.Models.ExternalSystemAccessMethods>(); } },
                { "affectedSystem", n => { AffectedSystem = n.GetObjectValue<Microsoft.Graph.Beta.Models.AuthorizationSystem>(Microsoft.Graph.Beta.Models.AuthorizationSystem.CreateFromDiscriminatorValue); } },
                { "systemWithAccess", n => { SystemWithAccess = n.GetObjectValue<Microsoft.Graph.Beta.Models.AuthorizationSystemInfo>(Microsoft.Graph.Beta.Models.AuthorizationSystemInfo.CreateFromDiscriminatorValue); } },
                { "trustedIdentityCount", n => { TrustedIdentityCount = n.GetIntValue(); } },
                { "trustsAllIdentities", n => { TrustsAllIdentities = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.ExternalSystemAccessMethods>("accessMethods", AccessMethods);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AuthorizationSystem>("affectedSystem", AffectedSystem);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AuthorizationSystemInfo>("systemWithAccess", SystemWithAccess);
            writer.WriteIntValue("trustedIdentityCount", TrustedIdentityCount);
            writer.WriteBoolValue("trustsAllIdentities", TrustsAllIdentities);
        }
    }
}
