// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class AwsExternalSystemAccessFinding : Finding, IParsable {
        /// <summary>The accessMethods property</summary>
        public ExternalSystemAccessMethods? AccessMethods {
            get { return BackingStore?.Get<ExternalSystemAccessMethods?>("accessMethods"); }
            set { BackingStore?.Set("accessMethods", value); }
        }
        /// <summary>The affectedSystem property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AuthorizationSystem? AffectedSystem {
            get { return BackingStore?.Get<AuthorizationSystem?>("affectedSystem"); }
            set { BackingStore?.Set("affectedSystem", value); }
        }
#nullable restore
#else
        public AuthorizationSystem AffectedSystem {
            get { return BackingStore?.Get<AuthorizationSystem>("affectedSystem"); }
            set { BackingStore?.Set("affectedSystem", value); }
        }
#endif
        /// <summary>The systemWithAccess property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AuthorizationSystemInfo? SystemWithAccess {
            get { return BackingStore?.Get<AuthorizationSystemInfo?>("systemWithAccess"); }
            set { BackingStore?.Set("systemWithAccess", value); }
        }
#nullable restore
#else
        public AuthorizationSystemInfo SystemWithAccess {
            get { return BackingStore?.Get<AuthorizationSystemInfo>("systemWithAccess"); }
            set { BackingStore?.Set("systemWithAccess", value); }
        }
#endif
        /// <summary>The trustedIdentityCount property</summary>
        public int? TrustedIdentityCount {
            get { return BackingStore?.Get<int?>("trustedIdentityCount"); }
            set { BackingStore?.Set("trustedIdentityCount", value); }
        }
        /// <summary>The trustsAllIdentities property</summary>
        public bool? TrustsAllIdentities {
            get { return BackingStore?.Get<bool?>("trustsAllIdentities"); }
            set { BackingStore?.Set("trustsAllIdentities", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new AwsExternalSystemAccessFinding CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AwsExternalSystemAccessFinding();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"accessMethods", n => { AccessMethods = n.GetEnumValue<ExternalSystemAccessMethods>(); } },
                {"affectedSystem", n => { AffectedSystem = n.GetObjectValue<AuthorizationSystem>(AuthorizationSystem.CreateFromDiscriminatorValue); } },
                {"systemWithAccess", n => { SystemWithAccess = n.GetObjectValue<AuthorizationSystemInfo>(AuthorizationSystemInfo.CreateFromDiscriminatorValue); } },
                {"trustedIdentityCount", n => { TrustedIdentityCount = n.GetIntValue(); } },
                {"trustsAllIdentities", n => { TrustsAllIdentities = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<ExternalSystemAccessMethods>("accessMethods", AccessMethods);
            writer.WriteObjectValue<AuthorizationSystem>("affectedSystem", AffectedSystem);
            writer.WriteObjectValue<AuthorizationSystemInfo>("systemWithAccess", SystemWithAccess);
            writer.WriteIntValue("trustedIdentityCount", TrustedIdentityCount);
            writer.WriteBoolValue("trustsAllIdentities", TrustsAllIdentities);
        }
    }
}
