// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Security
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AddWatermarkAction : global::Microsoft.Graph.Beta.Models.Security.InformationProtectionAction, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Color of the font to use for the watermark.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FontColor
        {
            get { return BackingStore?.Get<string?>("fontColor"); }
            set { BackingStore?.Set("fontColor", value); }
        }
#nullable restore
#else
        public string FontColor
        {
            get { return BackingStore?.Get<string>("fontColor"); }
            set { BackingStore?.Set("fontColor", value); }
        }
#endif
        /// <summary>Name of the font to use for the watermark.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FontName
        {
            get { return BackingStore?.Get<string?>("fontName"); }
            set { BackingStore?.Set("fontName", value); }
        }
#nullable restore
#else
        public string FontName
        {
            get { return BackingStore?.Get<string>("fontName"); }
            set { BackingStore?.Set("fontName", value); }
        }
#endif
        /// <summary>Font size to use for the watermark.</summary>
        public int? FontSize
        {
            get { return BackingStore?.Get<int?>("fontSize"); }
            set { BackingStore?.Set("fontSize", value); }
        }
        /// <summary>The layout property</summary>
        public global::Microsoft.Graph.Beta.Models.Security.WatermarkLayout? Layout
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.WatermarkLayout?>("layout"); }
            set { BackingStore?.Set("layout", value); }
        }
        /// <summary>The contents of the watermark itself.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text
        {
            get { return BackingStore?.Get<string?>("text"); }
            set { BackingStore?.Set("text", value); }
        }
#nullable restore
#else
        public string Text
        {
            get { return BackingStore?.Get<string>("text"); }
            set { BackingStore?.Set("text", value); }
        }
#endif
        /// <summary>The name of the UI element where the watermark should be placed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UiElementName
        {
            get { return BackingStore?.Get<string?>("uiElementName"); }
            set { BackingStore?.Set("uiElementName", value); }
        }
#nullable restore
#else
        public string UiElementName
        {
            get { return BackingStore?.Get<string>("uiElementName"); }
            set { BackingStore?.Set("uiElementName", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.Security.AddWatermarkAction"/> and sets the default values.
        /// </summary>
        public AddWatermarkAction() : base()
        {
            OdataType = "#microsoft.graph.security.addWatermarkAction";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Security.AddWatermarkAction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Security.AddWatermarkAction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Security.AddWatermarkAction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "fontColor", n => { FontColor = n.GetStringValue(); } },
                { "fontName", n => { FontName = n.GetStringValue(); } },
                { "fontSize", n => { FontSize = n.GetIntValue(); } },
                { "layout", n => { Layout = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Security.WatermarkLayout>(); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "uiElementName", n => { UiElementName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("fontColor", FontColor);
            writer.WriteStringValue("fontName", FontName);
            writer.WriteIntValue("fontSize", FontSize);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Security.WatermarkLayout>("layout", Layout);
            writer.WriteStringValue("text", Text);
            writer.WriteStringValue("uiElementName", UiElementName);
        }
    }
}
#pragma warning restore CS0618
