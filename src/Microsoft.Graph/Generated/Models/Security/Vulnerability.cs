// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models.Security {
    public class Vulnerability : Microsoft.Graph.Beta.Models.Entity, IParsable 
    {
        /// <summary>Indicates whether this vulnerability has any known exploits associated to known bad actors.</summary>
        public bool? ActiveExploitsObserved {
            get { return BackingStore?.Get<bool?>("activeExploitsObserved"); }
            set { BackingStore?.Set("activeExploitsObserved", value); }
        }
        /// <summary>Articles related to this vulnerability.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Article>? Articles {
            get { return BackingStore?.Get<List<Article>?>("articles"); }
            set { BackingStore?.Set("articles", value); }
        }
#nullable restore
#else
        public List<Article> Articles {
            get { return BackingStore?.Get<List<Article>>("articles"); }
            set { BackingStore?.Set("articles", value); }
        }
#endif
        /// <summary>Community-defined common weakness enumerations (CWE).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CommonWeaknessEnumerationIds {
            get { return BackingStore?.Get<List<string>?>("commonWeaknessEnumerationIds"); }
            set { BackingStore?.Set("commonWeaknessEnumerationIds", value); }
        }
#nullable restore
#else
        public List<string> CommonWeaknessEnumerationIds {
            get { return BackingStore?.Get<List<string>>("commonWeaknessEnumerationIds"); }
            set { BackingStore?.Set("commonWeaknessEnumerationIds", value); }
        }
#endif
        /// <summary>Components related to this vulnerability article.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<VulnerabilityComponent>? Components {
            get { return BackingStore?.Get<List<VulnerabilityComponent>?>("components"); }
            set { BackingStore?.Set("components", value); }
        }
#nullable restore
#else
        public List<VulnerabilityComponent> Components {
            get { return BackingStore?.Get<List<VulnerabilityComponent>>("components"); }
            set { BackingStore?.Set("components", value); }
        }
#endif
        /// <summary>The date and time when this vulnerability article was first created.</summary>
        public DateTimeOffset? CreatedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The cvss2Summary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CvssSummary? Cvss2Summary {
            get { return BackingStore?.Get<CvssSummary?>("cvss2Summary"); }
            set { BackingStore?.Set("cvss2Summary", value); }
        }
#nullable restore
#else
        public CvssSummary Cvss2Summary {
            get { return BackingStore?.Get<CvssSummary>("cvss2Summary"); }
            set { BackingStore?.Set("cvss2Summary", value); }
        }
#endif
        /// <summary>The cvss3Summary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CvssSummary? Cvss3Summary {
            get { return BackingStore?.Get<CvssSummary?>("cvss3Summary"); }
            set { BackingStore?.Set("cvss3Summary", value); }
        }
#nullable restore
#else
        public CvssSummary Cvss3Summary {
            get { return BackingStore?.Get<CvssSummary>("cvss3Summary"); }
            set { BackingStore?.Set("cvss3Summary", value); }
        }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FormattedContent? Description {
            get { return BackingStore?.Get<FormattedContent?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public FormattedContent Description {
            get { return BackingStore?.Get<FormattedContent>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>Known exploits for this vulnerability.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Hyperlink>? Exploits {
            get { return BackingStore?.Get<List<Hyperlink>?>("exploits"); }
            set { BackingStore?.Set("exploits", value); }
        }
#nullable restore
#else
        public List<Hyperlink> Exploits {
            get { return BackingStore?.Get<List<Hyperlink>>("exploits"); }
            set { BackingStore?.Set("exploits", value); }
        }
#endif
        /// <summary>Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online.</summary>
        public bool? ExploitsAvailable {
            get { return BackingStore?.Get<bool?>("exploitsAvailable"); }
            set { BackingStore?.Set("exploitsAvailable", value); }
        }
        /// <summary>Indicates whether chatter about this vulnerability has been discovered online.</summary>
        public bool? HasChatter {
            get { return BackingStore?.Get<bool?>("hasChatter"); }
            set { BackingStore?.Set("hasChatter", value); }
        }
        /// <summary>The date and time when this vulnerability article was most recently updated.</summary>
        public DateTimeOffset? LastModifiedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("lastModifiedDateTime"); }
            set { BackingStore?.Set("lastModifiedDateTime", value); }
        }
        /// <summary>A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and linkage to malware. This property also evaluates the recency of these components so users can understand which vulnerability should be remediated first.</summary>
        public int? PriorityScore {
            get { return BackingStore?.Get<int?>("priorityScore"); }
            set { BackingStore?.Set("priorityScore", value); }
        }
        /// <summary>The date and time when this vulnerability article was published.</summary>
        public DateTimeOffset? PublishedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("publishedDateTime"); }
            set { BackingStore?.Set("publishedDateTime", value); }
        }
        /// <summary>Reference links where further information can be learned about this vulnerability.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Hyperlink>? References {
            get { return BackingStore?.Get<List<Hyperlink>?>("references"); }
            set { BackingStore?.Set("references", value); }
        }
#nullable restore
#else
        public List<Hyperlink> References {
            get { return BackingStore?.Get<List<Hyperlink>>("references"); }
            set { BackingStore?.Set("references", value); }
        }
#endif
        /// <summary>Any known remediation steps.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FormattedContent? Remediation {
            get { return BackingStore?.Get<FormattedContent?>("remediation"); }
            set { BackingStore?.Set("remediation", value); }
        }
#nullable restore
#else
        public FormattedContent Remediation {
            get { return BackingStore?.Get<FormattedContent>("remediation"); }
            set { BackingStore?.Set("remediation", value); }
        }
#endif
        /// <summary>The severity property</summary>
        public VulnerabilitySeverity? Severity {
            get { return BackingStore?.Get<VulnerabilitySeverity?>("severity"); }
            set { BackingStore?.Set("severity", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Vulnerability"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Vulnerability CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Vulnerability();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"activeExploitsObserved", n => { ActiveExploitsObserved = n.GetBoolValue(); } },
                {"articles", n => { Articles = n.GetCollectionOfObjectValues<Article>(Article.CreateFromDiscriminatorValue)?.ToList(); } },
                {"commonWeaknessEnumerationIds", n => { CommonWeaknessEnumerationIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"components", n => { Components = n.GetCollectionOfObjectValues<VulnerabilityComponent>(VulnerabilityComponent.CreateFromDiscriminatorValue)?.ToList(); } },
                {"createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                {"cvss2Summary", n => { Cvss2Summary = n.GetObjectValue<CvssSummary>(CvssSummary.CreateFromDiscriminatorValue); } },
                {"cvss3Summary", n => { Cvss3Summary = n.GetObjectValue<CvssSummary>(CvssSummary.CreateFromDiscriminatorValue); } },
                {"description", n => { Description = n.GetObjectValue<FormattedContent>(FormattedContent.CreateFromDiscriminatorValue); } },
                {"exploits", n => { Exploits = n.GetCollectionOfObjectValues<Hyperlink>(Hyperlink.CreateFromDiscriminatorValue)?.ToList(); } },
                {"exploitsAvailable", n => { ExploitsAvailable = n.GetBoolValue(); } },
                {"hasChatter", n => { HasChatter = n.GetBoolValue(); } },
                {"lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                {"priorityScore", n => { PriorityScore = n.GetIntValue(); } },
                {"publishedDateTime", n => { PublishedDateTime = n.GetDateTimeOffsetValue(); } },
                {"references", n => { References = n.GetCollectionOfObjectValues<Hyperlink>(Hyperlink.CreateFromDiscriminatorValue)?.ToList(); } },
                {"remediation", n => { Remediation = n.GetObjectValue<FormattedContent>(FormattedContent.CreateFromDiscriminatorValue); } },
                {"severity", n => { Severity = n.GetEnumValue<VulnerabilitySeverity>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("activeExploitsObserved", ActiveExploitsObserved);
            writer.WriteCollectionOfObjectValues<Article>("articles", Articles);
            writer.WriteCollectionOfPrimitiveValues<string>("commonWeaknessEnumerationIds", CommonWeaknessEnumerationIds);
            writer.WriteCollectionOfObjectValues<VulnerabilityComponent>("components", Components);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<CvssSummary>("cvss2Summary", Cvss2Summary);
            writer.WriteObjectValue<CvssSummary>("cvss3Summary", Cvss3Summary);
            writer.WriteObjectValue<FormattedContent>("description", Description);
            writer.WriteCollectionOfObjectValues<Hyperlink>("exploits", Exploits);
            writer.WriteBoolValue("exploitsAvailable", ExploitsAvailable);
            writer.WriteBoolValue("hasChatter", HasChatter);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteIntValue("priorityScore", PriorityScore);
            writer.WriteDateTimeOffsetValue("publishedDateTime", PublishedDateTime);
            writer.WriteCollectionOfObjectValues<Hyperlink>("references", References);
            writer.WriteObjectValue<FormattedContent>("remediation", Remediation);
            writer.WriteEnumValue<VulnerabilitySeverity>("severity", Severity);
        }
    }
}
