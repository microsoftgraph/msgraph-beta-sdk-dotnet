// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Security
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Sensor : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The date and time when the sensor was generated.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The deploymentStatus property</summary>
        public global::Microsoft.Graph.Beta.Models.Security.DeploymentStatus? DeploymentStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.DeploymentStatus?>("deploymentStatus"); }
            set { BackingStore?.Set("deploymentStatus", value); }
        }
        /// <summary>The display name of the sensor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The fully qualified domain name of the sensor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DomainName
        {
            get { return BackingStore?.Get<string?>("domainName"); }
            set { BackingStore?.Set("domainName", value); }
        }
#nullable restore
#else
        public string DomainName
        {
            get { return BackingStore?.Get<string>("domainName"); }
            set { BackingStore?.Set("domainName", value); }
        }
#endif
        /// <summary>Represents potential issues within a customer&apos;s Microsoft Defender for Identity configuration that Microsoft Defender for Identity identified related to the sensor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Security.HealthIssue>? HealthIssues
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Security.HealthIssue>?>("healthIssues"); }
            set { BackingStore?.Set("healthIssues", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Security.HealthIssue> HealthIssues
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Security.HealthIssue>>("healthIssues"); }
            set { BackingStore?.Set("healthIssues", value); }
        }
#endif
        /// <summary>The healthStatus property</summary>
        public global::Microsoft.Graph.Beta.Models.Security.SensorHealthStatus? HealthStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SensorHealthStatus?>("healthStatus"); }
            set { BackingStore?.Set("healthStatus", value); }
        }
        /// <summary>This field displays the count of health issues related to this sensor.</summary>
        public long? OpenHealthIssuesCount
        {
            get { return BackingStore?.Get<long?>("openHealthIssuesCount"); }
            set { BackingStore?.Set("openHealthIssuesCount", value); }
        }
        /// <summary>The sensorType property</summary>
        public global::Microsoft.Graph.Beta.Models.Security.SensorType? SensorType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SensorType?>("sensorType"); }
            set { BackingStore?.Set("sensorType", value); }
        }
        /// <summary>The settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Security.SensorSettings? Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SensorSettings?>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Security.SensorSettings Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SensorSettings>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#endif
        /// <summary>The version of the sensor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version
        {
            get { return BackingStore?.Get<string?>("version"); }
            set { BackingStore?.Set("version", value); }
        }
#nullable restore
#else
        public string Version
        {
            get { return BackingStore?.Get<string>("version"); }
            set { BackingStore?.Set("version", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Security.Sensor"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Security.Sensor CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Security.Sensor();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "deploymentStatus", n => { DeploymentStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Security.DeploymentStatus>(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "domainName", n => { DomainName = n.GetStringValue(); } },
                { "healthIssues", n => { HealthIssues = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Security.HealthIssue>(global::Microsoft.Graph.Beta.Models.Security.HealthIssue.CreateFromDiscriminatorValue)?.AsList(); } },
                { "healthStatus", n => { HealthStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Security.SensorHealthStatus>(); } },
                { "openHealthIssuesCount", n => { OpenHealthIssuesCount = n.GetLongValue(); } },
                { "sensorType", n => { SensorType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Security.SensorType>(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Security.SensorSettings>(global::Microsoft.Graph.Beta.Models.Security.SensorSettings.CreateFromDiscriminatorValue); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Security.DeploymentStatus>("deploymentStatus", DeploymentStatus);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("domainName", DomainName);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Security.HealthIssue>("healthIssues", HealthIssues);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Security.SensorHealthStatus>("healthStatus", HealthStatus);
            writer.WriteLongValue("openHealthIssuesCount", OpenHealthIssuesCount);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Security.SensorType>("sensorType", SensorType);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Security.SensorSettings>("settings", Settings);
            writer.WriteStringValue("version", Version);
        }
    }
}
#pragma warning restore CS0618
