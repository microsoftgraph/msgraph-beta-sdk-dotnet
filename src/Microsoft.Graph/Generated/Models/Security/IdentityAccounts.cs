// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Security
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IdentityAccounts : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Collection of accounts of the identity in different identity providers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Security.Account>? Accounts
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Security.Account>?>("accounts"); }
            set { BackingStore?.Set("accounts", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Security.Account> Accounts
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Security.Account>>("accounts"); }
            set { BackingStore?.Set("accounts", value); }
        }
#endif
        /// <summary>The cloud security identifier of the identityAccount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloudSecurityIdentifier
        {
            get { return BackingStore?.Get<string?>("cloudSecurityIdentifier"); }
            set { BackingStore?.Set("cloudSecurityIdentifier", value); }
        }
#nullable restore
#else
        public string CloudSecurityIdentifier
        {
            get { return BackingStore?.Get<string>("cloudSecurityIdentifier"); }
            set { BackingStore?.Set("cloudSecurityIdentifier", value); }
        }
#endif
        /// <summary>The  Active Directory display name of the identityAccount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The Active Directory domain name of the identityAccount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain
        {
            get { return BackingStore?.Get<string?>("domain"); }
            set { BackingStore?.Set("domain", value); }
        }
#nullable restore
#else
        public string Domain
        {
            get { return BackingStore?.Get<string>("domain"); }
            set { BackingStore?.Set("domain", value); }
        }
#endif
        /// <summary>Boolean indicating if the identityAccounts is enabled.</summary>
        public bool? IsEnabled
        {
            get { return BackingStore?.Get<bool?>("isEnabled"); }
            set { BackingStore?.Set("isEnabled", value); }
        }
        /// <summary>The on-premises security identifier of the identityAccount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesSecurityIdentifier
        {
            get { return BackingStore?.Get<string?>("onPremisesSecurityIdentifier"); }
            set { BackingStore?.Set("onPremisesSecurityIdentifier", value); }
        }
#nullable restore
#else
        public string OnPremisesSecurityIdentifier
        {
            get { return BackingStore?.Get<string>("onPremisesSecurityIdentifier"); }
            set { BackingStore?.Set("onPremisesSecurityIdentifier", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Security.IdentityAccounts"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Security.IdentityAccounts CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.security.user" => new global::Microsoft.Graph.Beta.Models.Security.User(),
                _ => new global::Microsoft.Graph.Beta.Models.Security.IdentityAccounts(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accounts", n => { Accounts = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Security.Account>(global::Microsoft.Graph.Beta.Models.Security.Account.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cloudSecurityIdentifier", n => { CloudSecurityIdentifier = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "isEnabled", n => { IsEnabled = n.GetBoolValue(); } },
                { "onPremisesSecurityIdentifier", n => { OnPremisesSecurityIdentifier = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Security.Account>("accounts", Accounts);
            writer.WriteStringValue("cloudSecurityIdentifier", CloudSecurityIdentifier);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("domain", Domain);
            writer.WriteBoolValue("isEnabled", IsEnabled);
            writer.WriteStringValue("onPremisesSecurityIdentifier", OnPremisesSecurityIdentifier);
        }
    }
}
#pragma warning restore CS0618
