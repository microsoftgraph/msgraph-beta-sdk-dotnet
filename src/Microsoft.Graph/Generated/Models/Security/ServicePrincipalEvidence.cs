// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models.Security
{
    #pragma warning disable CS1591
    public class ServicePrincipalEvidence : Microsoft.Graph.Beta.Models.Security.AlertEvidence, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The appId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId
        {
            get { return BackingStore?.Get<string?>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#nullable restore
#else
        public string AppId
        {
            get { return BackingStore?.Get<string>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#endif
        /// <summary>The appOwnerTenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppOwnerTenantId
        {
            get { return BackingStore?.Get<string?>("appOwnerTenantId"); }
            set { BackingStore?.Set("appOwnerTenantId", value); }
        }
#nullable restore
#else
        public string AppOwnerTenantId
        {
            get { return BackingStore?.Get<string>("appOwnerTenantId"); }
            set { BackingStore?.Set("appOwnerTenantId", value); }
        }
#endif
        /// <summary>The servicePrincipalName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePrincipalName
        {
            get { return BackingStore?.Get<string?>("servicePrincipalName"); }
            set { BackingStore?.Set("servicePrincipalName", value); }
        }
#nullable restore
#else
        public string ServicePrincipalName
        {
            get { return BackingStore?.Get<string>("servicePrincipalName"); }
            set { BackingStore?.Set("servicePrincipalName", value); }
        }
#endif
        /// <summary>The servicePrincipalObjectId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePrincipalObjectId
        {
            get { return BackingStore?.Get<string?>("servicePrincipalObjectId"); }
            set { BackingStore?.Set("servicePrincipalObjectId", value); }
        }
#nullable restore
#else
        public string ServicePrincipalObjectId
        {
            get { return BackingStore?.Get<string>("servicePrincipalObjectId"); }
            set { BackingStore?.Set("servicePrincipalObjectId", value); }
        }
#endif
        /// <summary>The servicePrincipalType property</summary>
        public Microsoft.Graph.Beta.Models.Security.ServicePrincipalType? ServicePrincipalType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Security.ServicePrincipalType?>("servicePrincipalType"); }
            set { BackingStore?.Set("servicePrincipalType", value); }
        }
        /// <summary>The tenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId
        {
            get { return BackingStore?.Get<string?>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#nullable restore
#else
        public string TenantId
        {
            get { return BackingStore?.Get<string>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.Security.ServicePrincipalEvidence"/> and sets the default values.
        /// </summary>
        public ServicePrincipalEvidence() : base()
        {
            OdataType = "#microsoft.graph.security.servicePrincipalEvidence";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.Security.ServicePrincipalEvidence"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.Security.ServicePrincipalEvidence CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.Security.ServicePrincipalEvidence();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "appId", n => { AppId = n.GetStringValue(); } },
                { "appOwnerTenantId", n => { AppOwnerTenantId = n.GetStringValue(); } },
                { "servicePrincipalName", n => { ServicePrincipalName = n.GetStringValue(); } },
                { "servicePrincipalObjectId", n => { ServicePrincipalObjectId = n.GetStringValue(); } },
                { "servicePrincipalType", n => { ServicePrincipalType = n.GetEnumValue<Microsoft.Graph.Beta.Models.Security.ServicePrincipalType>(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("appId", AppId);
            writer.WriteStringValue("appOwnerTenantId", AppOwnerTenantId);
            writer.WriteStringValue("servicePrincipalName", ServicePrincipalName);
            writer.WriteStringValue("servicePrincipalObjectId", ServicePrincipalObjectId);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.Security.ServicePrincipalType>("servicePrincipalType", ServicePrincipalType);
            writer.WriteStringValue("tenantId", TenantId);
        }
    }
}
