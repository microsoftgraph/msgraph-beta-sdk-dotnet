// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Security
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ContainerImageEvidence : global::Microsoft.Graph.Beta.Models.Security.AlertEvidence, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The digest image entity, in case this is a tag image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence? DigestImage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence?>("digestImage"); }
            set { BackingStore?.Set("digestImage", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence DigestImage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence>("digestImage"); }
            set { BackingStore?.Set("digestImage", value); }
        }
#endif
        /// <summary>The unique identifier for the container image entity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageId
        {
            get { return BackingStore?.Get<string?>("imageId"); }
            set { BackingStore?.Set("imageId", value); }
        }
#nullable restore
#else
        public string ImageId
        {
            get { return BackingStore?.Get<string>("imageId"); }
            set { BackingStore?.Set("imageId", value); }
        }
#endif
        /// <summary>The container registry for this image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Security.ContainerRegistryEvidence? Registry
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.ContainerRegistryEvidence?>("registry"); }
            set { BackingStore?.Set("registry", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Security.ContainerRegistryEvidence Registry
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.ContainerRegistryEvidence>("registry"); }
            set { BackingStore?.Set("registry", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence"/> and sets the default values.
        /// </summary>
        public ContainerImageEvidence() : base()
        {
            OdataType = "#microsoft.graph.security.containerImageEvidence";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "digestImage", n => { DigestImage = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence>(global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence.CreateFromDiscriminatorValue); } },
                { "imageId", n => { ImageId = n.GetStringValue(); } },
                { "registry", n => { Registry = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Security.ContainerRegistryEvidence>(global::Microsoft.Graph.Beta.Models.Security.ContainerRegistryEvidence.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Security.ContainerImageEvidence>("digestImage", DigestImage);
            writer.WriteStringValue("imageId", ImageId);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Security.ContainerRegistryEvidence>("registry", Registry);
        }
    }
}
#pragma warning restore CS0618
