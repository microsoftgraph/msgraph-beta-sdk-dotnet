// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Security.SecurityCopilot
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Plugin : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>The authorization property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuth? Authorization
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuth?>("authorization"); }
            set { BackingStore?.Set("authorization", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuth Authorization
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuth>("authorization"); }
            set { BackingStore?.Set("authorization", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The catalogScope property</summary>
        public global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginCatalogScope? CatalogScope
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginCatalogScope?>("catalogScope"); }
            set { BackingStore?.Set("catalogScope", value); }
        }
        /// <summary>The category property</summary>
        public global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginCategory? Category
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginCategory?>("category"); }
            set { BackingStore?.Set("category", value); }
        }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The isEnabled property</summary>
        public bool? IsEnabled
        {
            get { return BackingStore?.Get<bool?>("isEnabled"); }
            set { BackingStore?.Set("isEnabled", value); }
        }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name
        {
            get { return BackingStore?.Get<string?>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#nullable restore
#else
        public string Name
        {
            get { return BackingStore?.Get<string>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The previewState property</summary>
        public global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginPreviewStates? PreviewState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginPreviewStates?>("previewState"); }
            set { BackingStore?.Set("previewState", value); }
        }
        /// <summary>The settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginSetting>? Settings
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginSetting>?>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginSetting> Settings
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginSetting>>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#endif
        /// <summary>The supportedAuthTypes property</summary>
        public global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuthTypes? SupportedAuthTypes
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuthTypes?>("supportedAuthTypes"); }
            set { BackingStore?.Set("supportedAuthTypes", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.Plugin"/> and sets the default values.
        /// </summary>
        public Plugin()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.Plugin"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.Plugin CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.Plugin();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authorization", n => { Authorization = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuth>(global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuth.CreateFromDiscriminatorValue); } },
                { "catalogScope", n => { CatalogScope = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginCatalogScope>(); } },
                { "category", n => { Category = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginCategory>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "isEnabled", n => { IsEnabled = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "previewState", n => { PreviewState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginPreviewStates>(); } },
                { "settings", n => { Settings = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginSetting>(global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginSetting.CreateFromDiscriminatorValue)?.AsList(); } },
                { "supportedAuthTypes", n => { SupportedAuthTypes = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuthTypes>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuth>("authorization", Authorization);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginCatalogScope>("catalogScope", CatalogScope);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginCategory>("category", Category);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("isEnabled", IsEnabled);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginPreviewStates>("previewState", PreviewState);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginSetting>("settings", Settings);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Security.SecurityCopilot.PluginAuthTypes>("supportedAuthTypes", SupportedAuthTypes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
