// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class AuthenticationMethodTarget : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Determines if the user is enforced to register the authentication method.</summary>
        public bool? IsRegistrationRequired
        {
            get { return BackingStore?.Get<bool?>("isRegistrationRequired"); }
            set { BackingStore?.Set("isRegistrationRequired", value); }
        }
        /// <summary>The targetType property</summary>
        public Microsoft.Graph.Beta.Models.AuthenticationMethodTargetType? TargetType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AuthenticationMethodTargetType?>("targetType"); }
            set { BackingStore?.Set("targetType", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.AuthenticationMethodTarget"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.AuthenticationMethodTarget CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.microsoftAuthenticatorAuthenticationMethodTarget" => new Microsoft.Graph.Beta.Models.MicrosoftAuthenticatorAuthenticationMethodTarget(),
                "#microsoft.graph.passkeyAuthenticationMethodTarget" => new Microsoft.Graph.Beta.Models.PasskeyAuthenticationMethodTarget(),
                "#microsoft.graph.smsAuthenticationMethodTarget" => new Microsoft.Graph.Beta.Models.SmsAuthenticationMethodTarget(),
                "#microsoft.graph.voiceAuthenticationMethodTarget" => new Microsoft.Graph.Beta.Models.VoiceAuthenticationMethodTarget(),
                _ => new Microsoft.Graph.Beta.Models.AuthenticationMethodTarget(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "isRegistrationRequired", n => { IsRegistrationRequired = n.GetBoolValue(); } },
                { "targetType", n => { TargetType = n.GetEnumValue<Microsoft.Graph.Beta.Models.AuthenticationMethodTargetType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("isRegistrationRequired", IsRegistrationRequired);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.AuthenticationMethodTargetType>("targetType", TargetType);
        }
    }
}
