// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class SynchronizationRule : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The names and identifiers of organizational units that are in scope for a synchronization rule. containerFilter and groupFilter are mutually exclusive properties that cannot be configured in the same request. Currently only supported for Azure AD Connect cloud sync scenarios.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ContainerFilter? ContainerFilter
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ContainerFilter?>("containerFilter"); }
            set { BackingStore?.Set("containerFilter", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ContainerFilter ContainerFilter
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ContainerFilter>("containerFilter"); }
            set { BackingStore?.Set("containerFilter", value); }
        }
#endif
        /// <summary>true if the synchronization rule can be customized; false if this rule is read-only and shouldn&apos;t be changed.</summary>
        public bool? Editable
        {
            get { return BackingStore?.Get<bool?>("editable"); }
            set { BackingStore?.Set("editable", value); }
        }
        /// <summary>The names and identifiers of groups that are in scope for a synchronization rule. containerFilter and groupFilter are mutually exclusive properties that cannot be configured in the same request. Currently only supported for Azure AD Connect cloud sync scenarios.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.GroupFilter? GroupFilter
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.GroupFilter?>("groupFilter"); }
            set { BackingStore?.Set("groupFilter", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.GroupFilter GroupFilter
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.GroupFilter>("groupFilter"); }
            set { BackingStore?.Set("groupFilter", value); }
        }
#endif
        /// <summary>Synchronization rule identifier. Must be one of the identifiers recognized by the synchronization engine. Supported rule identifiers can be found in the synchronization template returned by the API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id
        {
            get { return BackingStore?.Get<string?>("id"); }
            set { BackingStore?.Set("id", value); }
        }
#nullable restore
#else
        public string Id
        {
            get { return BackingStore?.Get<string>("id"); }
            set { BackingStore?.Set("id", value); }
        }
#endif
        /// <summary>Additional extension properties. Unless instructed explicitly by the support team, metadata values shouldn&apos;t be changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.StringKeyStringValuePair>? Metadata
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.StringKeyStringValuePair>?>("metadata"); }
            set { BackingStore?.Set("metadata", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.StringKeyStringValuePair> Metadata
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.StringKeyStringValuePair>>("metadata"); }
            set { BackingStore?.Set("metadata", value); }
        }
#endif
        /// <summary>Human-readable name of the synchronization rule. Not nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name
        {
            get { return BackingStore?.Get<string?>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#nullable restore
#else
        public string Name
        {
            get { return BackingStore?.Get<string>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#endif
        /// <summary>Collection of object mappings supported by the rule. Tells the synchronization engine which objects should be synchronized.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ObjectMapping>? ObjectMappings
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ObjectMapping>?>("objectMappings"); }
            set { BackingStore?.Set("objectMappings", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ObjectMapping> ObjectMappings
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ObjectMapping>>("objectMappings"); }
            set { BackingStore?.Set("objectMappings", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>Priority relative to other rules in the synchronizationSchema. Rules with the lowest priority number will be processed first.</summary>
        public int? Priority
        {
            get { return BackingStore?.Get<int?>("priority"); }
            set { BackingStore?.Set("priority", value); }
        }
        /// <summary>Name of the source directory. Must match one of the directory definitions in synchronizationSchema.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceDirectoryName
        {
            get { return BackingStore?.Get<string?>("sourceDirectoryName"); }
            set { BackingStore?.Set("sourceDirectoryName", value); }
        }
#nullable restore
#else
        public string SourceDirectoryName
        {
            get { return BackingStore?.Get<string>("sourceDirectoryName"); }
            set { BackingStore?.Set("sourceDirectoryName", value); }
        }
#endif
        /// <summary>Name of the target directory. Must match one of the directory definitions in synchronizationSchema.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetDirectoryName
        {
            get { return BackingStore?.Get<string?>("targetDirectoryName"); }
            set { BackingStore?.Set("targetDirectoryName", value); }
        }
#nullable restore
#else
        public string TargetDirectoryName
        {
            get { return BackingStore?.Get<string>("targetDirectoryName"); }
            set { BackingStore?.Set("targetDirectoryName", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.SynchronizationRule"/> and sets the default values.
        /// </summary>
        public SynchronizationRule()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.SynchronizationRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.SynchronizationRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.SynchronizationRule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "containerFilter", n => { ContainerFilter = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ContainerFilter>(global::Microsoft.Graph.Beta.Models.ContainerFilter.CreateFromDiscriminatorValue); } },
                { "editable", n => { Editable = n.GetBoolValue(); } },
                { "groupFilter", n => { GroupFilter = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.GroupFilter>(global::Microsoft.Graph.Beta.Models.GroupFilter.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "metadata", n => { Metadata = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.StringKeyStringValuePair>(global::Microsoft.Graph.Beta.Models.StringKeyStringValuePair.CreateFromDiscriminatorValue)?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "objectMappings", n => { ObjectMappings = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ObjectMapping>(global::Microsoft.Graph.Beta.Models.ObjectMapping.CreateFromDiscriminatorValue)?.AsList(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "priority", n => { Priority = n.GetIntValue(); } },
                { "sourceDirectoryName", n => { SourceDirectoryName = n.GetStringValue(); } },
                { "targetDirectoryName", n => { TargetDirectoryName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ContainerFilter>("containerFilter", ContainerFilter);
            writer.WriteBoolValue("editable", Editable);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.GroupFilter>("groupFilter", GroupFilter);
            writer.WriteStringValue("id", Id);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.StringKeyStringValuePair>("metadata", Metadata);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ObjectMapping>("objectMappings", ObjectMappings);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteIntValue("priority", Priority);
            writer.WriteStringValue("sourceDirectoryName", SourceDirectoryName);
            writer.WriteStringValue("targetDirectoryName", TargetDirectoryName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
