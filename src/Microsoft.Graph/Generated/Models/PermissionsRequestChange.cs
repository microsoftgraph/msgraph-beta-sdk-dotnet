// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class PermissionsRequestChange : Entity, IParsable 
    {
        /// <summary>The status of the active occurence of the schedule if one exists. The possible values are: grantingFailed, granted, granting, revoked, revoking, revokingFailed, unknownFutureValue.</summary>
        public PermissionsRequestOccurrenceStatus? ActiveOccurrenceStatus {
            get { return BackingStore?.Get<PermissionsRequestOccurrenceStatus?>("activeOccurrenceStatus"); }
            set { BackingStore?.Set("activeOccurrenceStatus", value); }
        }
        /// <summary>Time when the change occurred.</summary>
        public DateTimeOffset? ModificationDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("modificationDateTime"); }
            set { BackingStore?.Set("modificationDateTime", value); }
        }
        /// <summary>The ID of the scheduledPermissionsRequest object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PermissionsRequestId {
            get { return BackingStore?.Get<string?>("permissionsRequestId"); }
            set { BackingStore?.Set("permissionsRequestId", value); }
        }
#nullable restore
#else
        public string PermissionsRequestId {
            get { return BackingStore?.Get<string>("permissionsRequestId"); }
            set { BackingStore?.Set("permissionsRequestId", value); }
        }
#endif
        /// <summary>The statusDetail property</summary>
        public Microsoft.Graph.Beta.Models.StatusDetail? StatusDetail {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.StatusDetail?>("statusDetail"); }
            set { BackingStore?.Set("statusDetail", value); }
        }
        /// <summary>Represents the ticketing system identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TicketId {
            get { return BackingStore?.Get<string?>("ticketId"); }
            set { BackingStore?.Set("ticketId", value); }
        }
#nullable restore
#else
        public string TicketId {
            get { return BackingStore?.Get<string>("ticketId"); }
            set { BackingStore?.Set("ticketId", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PermissionsRequestChange"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new PermissionsRequestChange CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PermissionsRequestChange();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"activeOccurrenceStatus", n => { ActiveOccurrenceStatus = n.GetEnumValue<PermissionsRequestOccurrenceStatus>(); } },
                {"modificationDateTime", n => { ModificationDateTime = n.GetDateTimeOffsetValue(); } },
                {"permissionsRequestId", n => { PermissionsRequestId = n.GetStringValue(); } },
                {"statusDetail", n => { StatusDetail = n.GetEnumValue<StatusDetail>(); } },
                {"ticketId", n => { TicketId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<PermissionsRequestOccurrenceStatus>("activeOccurrenceStatus", ActiveOccurrenceStatus);
            writer.WriteDateTimeOffsetValue("modificationDateTime", ModificationDateTime);
            writer.WriteStringValue("permissionsRequestId", PermissionsRequestId);
            writer.WriteEnumValue<StatusDetail>("statusDetail", StatusDetail);
            writer.WriteStringValue("ticketId", TicketId);
        }
    }
}
