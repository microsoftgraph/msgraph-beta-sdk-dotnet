// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class MessageRule : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Actions to be taken on a message when the corresponding conditions are fulfilled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.MessageRuleActions? Actions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.MessageRuleActions?>("actions"); }
            set { BackingStore?.Set("actions", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.MessageRuleActions Actions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.MessageRuleActions>("actions"); }
            set { BackingStore?.Set("actions", value); }
        }
#endif
        /// <summary>Conditions that when fulfilled trigger the corresponding actions for that rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.MessageRulePredicates? Conditions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.MessageRulePredicates?>("conditions"); }
            set { BackingStore?.Set("conditions", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.MessageRulePredicates Conditions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.MessageRulePredicates>("conditions"); }
            set { BackingStore?.Set("conditions", value); }
        }
#endif
        /// <summary>The display name of the rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Exception conditions for the rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.MessageRulePredicates? Exceptions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.MessageRulePredicates?>("exceptions"); }
            set { BackingStore?.Set("exceptions", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.MessageRulePredicates Exceptions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.MessageRulePredicates>("exceptions"); }
            set { BackingStore?.Set("exceptions", value); }
        }
#endif
        /// <summary>Indicates whether the rule is in an error condition. Read-only.</summary>
        public bool? HasError
        {
            get { return BackingStore?.Get<bool?>("hasError"); }
            set { BackingStore?.Set("hasError", value); }
        }
        /// <summary>Indicates whether the rule is enabled to be applied to messages.</summary>
        public bool? IsEnabled
        {
            get { return BackingStore?.Get<bool?>("isEnabled"); }
            set { BackingStore?.Set("isEnabled", value); }
        }
        /// <summary>Indicates if the rule is read-only and cannot be modified or deleted by the rules REST API.</summary>
        public bool? IsReadOnly
        {
            get { return BackingStore?.Get<bool?>("isReadOnly"); }
            set { BackingStore?.Set("isReadOnly", value); }
        }
        /// <summary>Indicates the order in which the rule is executed, among other rules.</summary>
        public int? Sequence
        {
            get { return BackingStore?.Get<int?>("sequence"); }
            set { BackingStore?.Set("sequence", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.MessageRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.MessageRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.MessageRule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "actions", n => { Actions = n.GetObjectValue<Microsoft.Graph.Beta.Models.MessageRuleActions>(Microsoft.Graph.Beta.Models.MessageRuleActions.CreateFromDiscriminatorValue); } },
                { "conditions", n => { Conditions = n.GetObjectValue<Microsoft.Graph.Beta.Models.MessageRulePredicates>(Microsoft.Graph.Beta.Models.MessageRulePredicates.CreateFromDiscriminatorValue); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "exceptions", n => { Exceptions = n.GetObjectValue<Microsoft.Graph.Beta.Models.MessageRulePredicates>(Microsoft.Graph.Beta.Models.MessageRulePredicates.CreateFromDiscriminatorValue); } },
                { "hasError", n => { HasError = n.GetBoolValue(); } },
                { "isEnabled", n => { IsEnabled = n.GetBoolValue(); } },
                { "isReadOnly", n => { IsReadOnly = n.GetBoolValue(); } },
                { "sequence", n => { Sequence = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.MessageRuleActions>("actions", Actions);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.MessageRulePredicates>("conditions", Conditions);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.MessageRulePredicates>("exceptions", Exceptions);
            writer.WriteBoolValue("hasError", HasError);
            writer.WriteBoolValue("isEnabled", IsEnabled);
            writer.WriteBoolValue("isReadOnly", IsReadOnly);
            writer.WriteIntValue("sequence", Sequence);
        }
    }
}
