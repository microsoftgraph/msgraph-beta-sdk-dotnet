// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DelegateAllowedActions : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Indicates whether the delegator or delegate allows participation in active calls.</summary>
        public bool? JoinActiveCalls
        {
            get { return BackingStore?.Get<bool?>("joinActiveCalls"); }
            set { BackingStore?.Set("joinActiveCalls", value); }
        }
        /// <summary>Indicates whether the delegator or delegate allows calls to be made on their behalf.</summary>
        public bool? MakeCalls
        {
            get { return BackingStore?.Get<bool?>("makeCalls"); }
            set { BackingStore?.Set("makeCalls", value); }
        }
        /// <summary>Indicates whether the delegator or delegate allows the management of call and delegation settings.</summary>
        public bool? ManageCallAndDelegateSettings
        {
            get { return BackingStore?.Get<bool?>("manageCallAndDelegateSettings"); }
            set { BackingStore?.Set("manageCallAndDelegateSettings", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>Indicates whether the delegator or delegate allows held calls to be picked up.</summary>
        public bool? PickUpHeldCalls
        {
            get { return BackingStore?.Get<bool?>("pickUpHeldCalls"); }
            set { BackingStore?.Set("pickUpHeldCalls", value); }
        }
        /// <summary>Indicates whether the delegator or delegate allows calls to be received on their behalf.</summary>
        public bool? ReceiveCalls
        {
            get { return BackingStore?.Get<bool?>("receiveCalls"); }
            set { BackingStore?.Set("receiveCalls", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.DelegateAllowedActions"/> and sets the default values.
        /// </summary>
        public DelegateAllowedActions()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.DelegateAllowedActions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.DelegateAllowedActions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.DelegateAllowedActions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "joinActiveCalls", n => { JoinActiveCalls = n.GetBoolValue(); } },
                { "makeCalls", n => { MakeCalls = n.GetBoolValue(); } },
                { "manageCallAndDelegateSettings", n => { ManageCallAndDelegateSettings = n.GetBoolValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "pickUpHeldCalls", n => { PickUpHeldCalls = n.GetBoolValue(); } },
                { "receiveCalls", n => { ReceiveCalls = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("joinActiveCalls", JoinActiveCalls);
            writer.WriteBoolValue("makeCalls", MakeCalls);
            writer.WriteBoolValue("manageCallAndDelegateSettings", ManageCallAndDelegateSettings);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteBoolValue("pickUpHeldCalls", PickUpHeldCalls);
            writer.WriteBoolValue("receiveCalls", ReceiveCalls);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
