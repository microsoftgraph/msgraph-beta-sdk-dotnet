// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models.IdentityGovernance
{
    #pragma warning disable CS1591
    public class CustomTaskExtensionCalloutData : Microsoft.Graph.Beta.Models.CustomExtensionData, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The subject property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.User? Subject
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.User?>("subject"); }
            set { BackingStore?.Set("subject", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.User Subject
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.User>("subject"); }
            set { BackingStore?.Set("subject", value); }
        }
#endif
        /// <summary>The task property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.IdentityGovernance.TaskObject? Task
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentityGovernance.TaskObject?>("task"); }
            set { BackingStore?.Set("task", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.IdentityGovernance.TaskObject Task
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentityGovernance.TaskObject>("task"); }
            set { BackingStore?.Set("task", value); }
        }
#endif
        /// <summary>The taskProcessingresult property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.IdentityGovernance.TaskProcessingResult? TaskProcessingresult
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentityGovernance.TaskProcessingResult?>("taskProcessingresult"); }
            set { BackingStore?.Set("taskProcessingresult", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.IdentityGovernance.TaskProcessingResult TaskProcessingresult
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentityGovernance.TaskProcessingResult>("taskProcessingresult"); }
            set { BackingStore?.Set("taskProcessingresult", value); }
        }
#endif
        /// <summary>The workflow property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.IdentityGovernance.Workflow? Workflow
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentityGovernance.Workflow?>("workflow"); }
            set { BackingStore?.Set("workflow", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.IdentityGovernance.Workflow Workflow
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentityGovernance.Workflow>("workflow"); }
            set { BackingStore?.Set("workflow", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.IdentityGovernance.CustomTaskExtensionCalloutData"/> and sets the default values.
        /// </summary>
        public CustomTaskExtensionCalloutData() : base()
        {
            OdataType = "#microsoft.graph.identityGovernance.customTaskExtensionCalloutData";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.IdentityGovernance.CustomTaskExtensionCalloutData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.IdentityGovernance.CustomTaskExtensionCalloutData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.IdentityGovernance.CustomTaskExtensionCalloutData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "subject", n => { Subject = n.GetObjectValue<Microsoft.Graph.Beta.Models.User>(Microsoft.Graph.Beta.Models.User.CreateFromDiscriminatorValue); } },
                { "task", n => { Task = n.GetObjectValue<Microsoft.Graph.Beta.Models.IdentityGovernance.TaskObject>(Microsoft.Graph.Beta.Models.IdentityGovernance.TaskObject.CreateFromDiscriminatorValue); } },
                { "taskProcessingresult", n => { TaskProcessingresult = n.GetObjectValue<Microsoft.Graph.Beta.Models.IdentityGovernance.TaskProcessingResult>(Microsoft.Graph.Beta.Models.IdentityGovernance.TaskProcessingResult.CreateFromDiscriminatorValue); } },
                { "workflow", n => { Workflow = n.GetObjectValue<Microsoft.Graph.Beta.Models.IdentityGovernance.Workflow>(Microsoft.Graph.Beta.Models.IdentityGovernance.Workflow.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.User>("subject", Subject);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.IdentityGovernance.TaskObject>("task", Task);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.IdentityGovernance.TaskProcessingResult>("taskProcessingresult", TaskProcessingresult);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.IdentityGovernance.Workflow>("workflow", Workflow);
        }
    }
}
