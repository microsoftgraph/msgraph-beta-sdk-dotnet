// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Graph.Beta.Models.Security;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Represents a Microsoft Entra user account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class User : global::Microsoft.Graph.Beta.Models.DirectoryObject, IParsable
    {
        /// <summary>A freeform text entry field for users to describe themselves. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AboutMe
        {
            get { return BackingStore?.Get<string?>("aboutMe"); }
            set { BackingStore?.Set("aboutMe", value); }
        }
#nullable restore
#else
        public string AboutMe
        {
            get { return BackingStore?.Get<string>("aboutMe"); }
            set { BackingStore?.Set("aboutMe", value); }
        }
#endif
        /// <summary>true if the account is enabled; otherwise, false. This property is required when a user is created. Supports $filter (eq, ne, not, and in).</summary>
        public bool? AccountEnabled
        {
            get { return BackingStore?.Get<bool?>("accountEnabled"); }
            set { BackingStore?.Set("accountEnabled", value); }
        }
        /// <summary>The user&apos;s activities across devices. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.UserActivity>? Activities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.UserActivity>?>("activities"); }
            set { BackingStore?.Set("activities", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.UserActivity> Activities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.UserActivity>>("activities"); }
            set { BackingStore?.Set("activities", value); }
        }
#endif
        /// <summary>Sets the age group of the user. Allowed values: null, Minor, NotAdult, and Adult. For more information, see legal age group property definitions. Supports $filter (eq, ne, not, and in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AgeGroup
        {
            get { return BackingStore?.Get<string?>("ageGroup"); }
            set { BackingStore?.Set("ageGroup", value); }
        }
#nullable restore
#else
        public string AgeGroup
        {
            get { return BackingStore?.Get<string>("ageGroup"); }
            set { BackingStore?.Set("ageGroup", value); }
        }
#endif
        /// <summary>The user&apos;s terms of use acceptance statuses. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AgreementAcceptance>? AgreementAcceptances
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AgreementAcceptance>?>("agreementAcceptances"); }
            set { BackingStore?.Set("agreementAcceptances", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AgreementAcceptance> AgreementAcceptances
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AgreementAcceptance>>("agreementAcceptances"); }
            set { BackingStore?.Set("agreementAcceptances", value); }
        }
#endif
        /// <summary>The analytics property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.UserAnalytics? Analytics
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserAnalytics?>("analytics"); }
            set { BackingStore?.Set("analytics", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.UserAnalytics Analytics
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserAnalytics>("analytics"); }
            set { BackingStore?.Set("analytics", value); }
        }
#endif
        /// <summary>The appConsentRequestsForApproval property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AppConsentRequest>? AppConsentRequestsForApproval
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AppConsentRequest>?>("appConsentRequestsForApproval"); }
            set { BackingStore?.Set("appConsentRequestsForApproval", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AppConsentRequest> AppConsentRequestsForApproval
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AppConsentRequest>>("appConsentRequestsForApproval"); }
            set { BackingStore?.Set("appConsentRequestsForApproval", value); }
        }
#endif
        /// <summary>The appRoleAssignedResources property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ServicePrincipal>? AppRoleAssignedResources
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ServicePrincipal>?>("appRoleAssignedResources"); }
            set { BackingStore?.Set("appRoleAssignedResources", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ServicePrincipal> AppRoleAssignedResources
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ServicePrincipal>>("appRoleAssignedResources"); }
            set { BackingStore?.Set("appRoleAssignedResources", value); }
        }
#endif
        /// <summary>Represents the app roles a user has been granted for an application. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>? AppRoleAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>?>("appRoleAssignments"); }
            set { BackingStore?.Set("appRoleAssignments", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AppRoleAssignment> AppRoleAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>>("appRoleAssignments"); }
            set { BackingStore?.Set("appRoleAssignments", value); }
        }
#endif
        /// <summary>The approvals property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Approval>? Approvals
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Approval>?>("approvals"); }
            set { BackingStore?.Set("approvals", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Approval> Approvals
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Approval>>("approvals"); }
            set { BackingStore?.Set("approvals", value); }
        }
#endif
        /// <summary>The licenses that are assigned to the user, including inherited (group-based) licenses. This property doesn&apos;t differentiate between directly assigned and inherited licenses. Use the licenseAssignmentStates property to identify the directly assigned and inherited licenses. Not nullable. Supports $filter (eq, not, /$count eq 0, /$count ne 0).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AssignedLicense>? AssignedLicenses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignedLicense>?>("assignedLicenses"); }
            set { BackingStore?.Set("assignedLicenses", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AssignedLicense> AssignedLicenses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignedLicense>>("assignedLicenses"); }
            set { BackingStore?.Set("assignedLicenses", value); }
        }
#endif
        /// <summary>The plans that are assigned to the user. Read-only. Not nullable.Supports $filter (eq and not).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AssignedPlan>? AssignedPlans
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignedPlan>?>("assignedPlans"); }
            set { BackingStore?.Set("assignedPlans", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AssignedPlan> AssignedPlans
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignedPlan>>("assignedPlans"); }
            set { BackingStore?.Set("assignedPlans", value); }
        }
#endif
        /// <summary>The authentication methods that are supported for the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Authentication? Authentication
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Authentication?>("authentication"); }
            set { BackingStore?.Set("authentication", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Authentication Authentication
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Authentication>("authentication"); }
            set { BackingStore?.Set("authentication", value); }
        }
#endif
        /// <summary>Identifiers that can be used to identify and authenticate a user in non-Azure AD environments. This property can store identifiers for smartcard-based certificates that users use to access on-premises Active Directory deployments or federated access. It can also be used to store the Subject Alternate Name (SAN) that&apos;s associated with a Common Access Card (CAC). Nullable.Supports $filter (eq and startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.AuthorizationInfo? AuthorizationInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AuthorizationInfo?>("authorizationInfo"); }
            set { BackingStore?.Set("authorizationInfo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.AuthorizationInfo AuthorizationInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AuthorizationInfo>("authorizationInfo"); }
            set { BackingStore?.Set("authorizationInfo", value); }
        }
#endif
        /// <summary>The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Returned only on $select.</summary>
        public DateTimeOffset? Birthday
        {
            get { return BackingStore?.Get<DateTimeOffset?>("birthday"); }
            set { BackingStore?.Set("birthday", value); }
        }
        /// <summary>The telephone numbers for the user. Only one number can be set for this property. Read-only for users synced from on-premises directory. Supports $filter (eq, not, ge, le, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BusinessPhones
        {
            get { return BackingStore?.Get<List<string>?>("businessPhones"); }
            set { BackingStore?.Set("businessPhones", value); }
        }
#nullable restore
#else
        public List<string> BusinessPhones
        {
            get { return BackingStore?.Get<List<string>>("businessPhones"); }
            set { BackingStore?.Set("businessPhones", value); }
        }
#endif
        /// <summary>The user&apos;s primary calendar. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Calendar? Calendar
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Calendar?>("calendar"); }
            set { BackingStore?.Set("calendar", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Calendar Calendar
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Calendar>("calendar"); }
            set { BackingStore?.Set("calendar", value); }
        }
#endif
        /// <summary>The user&apos;s calendar groups. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.CalendarGroup>? CalendarGroups
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CalendarGroup>?>("calendarGroups"); }
            set { BackingStore?.Set("calendarGroups", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.CalendarGroup> CalendarGroups
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CalendarGroup>>("calendarGroups"); }
            set { BackingStore?.Set("calendarGroups", value); }
        }
#endif
        /// <summary>The user&apos;s calendars. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Calendar>? Calendars
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Calendar>?>("calendars"); }
            set { BackingStore?.Set("calendars", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Calendar> Calendars
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Calendar>>("calendars"); }
            set { BackingStore?.Set("calendars", value); }
        }
#endif
        /// <summary>The calendar view for the calendar. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Event>? CalendarView
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Event>?>("calendarView"); }
            set { BackingStore?.Set("calendarView", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Event> CalendarView
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Event>>("calendarView"); }
            set { BackingStore?.Set("calendarView", value); }
        }
#endif
        /// <summary>The chats property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Chat>? Chats
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Chat>?>("chats"); }
            set { BackingStore?.Set("chats", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Chat> Chats
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Chat>>("chats"); }
            set { BackingStore?.Set("chats", value); }
        }
#endif
        /// <summary>The city where the user is located. Maximum length is 128 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City
        {
            get { return BackingStore?.Get<string?>("city"); }
            set { BackingStore?.Set("city", value); }
        }
#nullable restore
#else
        public string City
        {
            get { return BackingStore?.Get<string>("city"); }
            set { BackingStore?.Set("city", value); }
        }
#endif
        /// <summary>The cloudClipboard property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.CloudClipboardRoot? CloudClipboard
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CloudClipboardRoot?>("cloudClipboard"); }
            set { BackingStore?.Set("cloudClipboard", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.CloudClipboardRoot CloudClipboard
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CloudClipboardRoot>("cloudClipboard"); }
            set { BackingStore?.Set("cloudClipboard", value); }
        }
#endif
        /// <summary>The cloudPCs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.CloudPC>? CloudPCs
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CloudPC>?>("cloudPCs"); }
            set { BackingStore?.Set("cloudPCs", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.CloudPC> CloudPCs
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CloudPC>>("cloudPCs"); }
            set { BackingStore?.Set("cloudPCs", value); }
        }
#endif
        /// <summary>Microsoft realtime communication information related to the user.  Supports $filter (eq, ne,not).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.CloudRealtimeCommunicationInfo? CloudRealtimeCommunicationInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CloudRealtimeCommunicationInfo?>("cloudRealtimeCommunicationInfo"); }
            set { BackingStore?.Set("cloudRealtimeCommunicationInfo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.CloudRealtimeCommunicationInfo CloudRealtimeCommunicationInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CloudRealtimeCommunicationInfo>("cloudRealtimeCommunicationInfo"); }
            set { BackingStore?.Set("cloudRealtimeCommunicationInfo", value); }
        }
#endif
        /// <summary>The name of the company the user is associated with. This property can be useful for describing the company that an external user comes from. The maximum length is 64 characters.Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName
        {
            get { return BackingStore?.Get<string?>("companyName"); }
            set { BackingStore?.Set("companyName", value); }
        }
#nullable restore
#else
        public string CompanyName
        {
            get { return BackingStore?.Get<string>("companyName"); }
            set { BackingStore?.Set("companyName", value); }
        }
#endif
        /// <summary>Sets whether consent has been obtained for minors. Allowed values: null, Granted, Denied and NotRequired. Refer to the legal age group property definitions for further information. Supports $filter (eq, ne, not, and in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConsentProvidedForMinor
        {
            get { return BackingStore?.Get<string?>("consentProvidedForMinor"); }
            set { BackingStore?.Set("consentProvidedForMinor", value); }
        }
#nullable restore
#else
        public string ConsentProvidedForMinor
        {
            get { return BackingStore?.Get<string>("consentProvidedForMinor"); }
            set { BackingStore?.Set("consentProvidedForMinor", value); }
        }
#endif
        /// <summary>The user&apos;s contacts folders. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ContactFolder>? ContactFolders
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ContactFolder>?>("contactFolders"); }
            set { BackingStore?.Set("contactFolders", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ContactFolder> ContactFolders
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ContactFolder>>("contactFolders"); }
            set { BackingStore?.Set("contactFolders", value); }
        }
#endif
        /// <summary>The user&apos;s contacts. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Contact>? Contacts
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Contact>?>("contacts"); }
            set { BackingStore?.Set("contacts", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Contact> Contacts
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Contact>>("contacts"); }
            set { BackingStore?.Set("contacts", value); }
        }
#endif
        /// <summary>The country or region where the user is located; for example, US or UK. Maximum length is 128 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country
        {
            get { return BackingStore?.Get<string?>("country"); }
            set { BackingStore?.Set("country", value); }
        }
#nullable restore
#else
        public string Country
        {
            get { return BackingStore?.Get<string>("country"); }
            set { BackingStore?.Set("country", value); }
        }
#endif
        /// <summary>The date and time the user was created in ISO 8601 format and UTC. The value cannot be modified and is automatically populated when the entity is created. Nullable. For on-premises users, the value represents when they were first created in Microsoft Entra ID. Property is null for some users created before June 2018 and on-premises users synced to Microsoft Entra ID before June 2018. Read-only. Supports $filter (eq, ne, not , ge, le, in).</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Directory objects that the user created. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? CreatedObjects
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("createdObjects"); }
            set { BackingStore?.Set("createdObjects", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> CreatedObjects
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("createdObjects"); }
            set { BackingStore?.Set("createdObjects", value); }
        }
#endif
        /// <summary>Indicates whether the user account was created through one of the following methods:  As a regular school or work account (null). As an external account (Invitation). As a local account for an Azure Active Directory B2C tenant (LocalAccount). Through self-service sign-up by an internal user using email verification (EmailVerified). Through self-service sign-up by an external user signing up through a link that is part of a user flow (SelfServiceSignUp).  Read-only.Supports $filter (eq, ne, not, and in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreationType
        {
            get { return BackingStore?.Get<string?>("creationType"); }
            set { BackingStore?.Set("creationType", value); }
        }
#nullable restore
#else
        public string CreationType
        {
            get { return BackingStore?.Get<string>("creationType"); }
            set { BackingStore?.Set("creationType", value); }
        }
#endif
        /// <summary>An open complex type that holds the value of a custom security attribute that is assigned to a directory object. Nullable. Returned only on $select. Supports $filter (eq, ne, not, startsWith). The filter value is case-sensitive. To read this property, the calling app must be assigned the CustomSecAttributeAssignment.Read.All permission. To write this property, the calling app must be assigned the CustomSecAttributeAssignment.ReadWrite.All permissions. To read or write this property in delegated scenarios, the admin must be assigned the Attribute Assignment Administrator role. Supports $filter (eq, ne, not , ge, le, in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.CustomSecurityAttributeValue? CustomSecurityAttributes
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CustomSecurityAttributeValue?>("customSecurityAttributes"); }
            set { BackingStore?.Set("customSecurityAttributes", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.CustomSecurityAttributeValue CustomSecurityAttributes
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CustomSecurityAttributeValue>("customSecurityAttributes"); }
            set { BackingStore?.Set("customSecurityAttributes", value); }
        }
#endif
        /// <summary>The name of the department where the user works. Maximum length is 64 characters.Supports $filter (eq, ne, not , ge, le, in, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Department
        {
            get { return BackingStore?.Get<string?>("department"); }
            set { BackingStore?.Set("department", value); }
        }
#nullable restore
#else
        public string Department
        {
            get { return BackingStore?.Get<string>("department"); }
            set { BackingStore?.Set("department", value); }
        }
#endif
        /// <summary>Get enrollment configurations targeted to the user</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceEnrollmentConfiguration>? DeviceEnrollmentConfigurations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceEnrollmentConfiguration>?>("deviceEnrollmentConfigurations"); }
            set { BackingStore?.Set("deviceEnrollmentConfigurations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceEnrollmentConfiguration> DeviceEnrollmentConfigurations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceEnrollmentConfiguration>>("deviceEnrollmentConfigurations"); }
            set { BackingStore?.Set("deviceEnrollmentConfigurations", value); }
        }
#endif
        /// <summary>The limit on the maximum number of devices that the user is permitted to enroll. Allowed values are 5 or 1000.</summary>
        public int? DeviceEnrollmentLimit
        {
            get { return BackingStore?.Get<int?>("deviceEnrollmentLimit"); }
            set { BackingStore?.Set("deviceEnrollmentLimit", value); }
        }
        /// <summary>The deviceKeys property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceKey>? DeviceKeys
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceKey>?>("deviceKeys"); }
            set { BackingStore?.Set("deviceKeys", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceKey> DeviceKeys
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceKey>>("deviceKeys"); }
            set { BackingStore?.Set("deviceKeys", value); }
        }
#endif
        /// <summary>The list of troubleshooting events for this user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementTroubleshootingEvent>? DeviceManagementTroubleshootingEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementTroubleshootingEvent>?>("deviceManagementTroubleshootingEvents"); }
            set { BackingStore?.Set("deviceManagementTroubleshootingEvents", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DeviceManagementTroubleshootingEvent> DeviceManagementTroubleshootingEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DeviceManagementTroubleshootingEvent>>("deviceManagementTroubleshootingEvents"); }
            set { BackingStore?.Set("deviceManagementTroubleshootingEvents", value); }
        }
#endif
        /// <summary>The devices property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Device>? Devices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Device>?>("devices"); }
            set { BackingStore?.Set("devices", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Device> Devices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Device>>("devices"); }
            set { BackingStore?.Set("devices", value); }
        }
#endif
        /// <summary>The users and contacts that report to the user. (The users and contacts with their manager property set to this user.) Read-only. Nullable. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? DirectReports
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("directReports"); }
            set { BackingStore?.Set("directReports", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> DirectReports
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("directReports"); }
            set { BackingStore?.Set("directReports", value); }
        }
#endif
        /// <summary>The name displayed in the address book for the user. This value is usually the combination of the user&apos;s first name, middle initial, and last name. This property is required when a user is created, and it cannot be cleared during updates. Maximum length is 256 characters. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values), $orderby, and $search.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The user&apos;s OneDrive. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Drive? Drive
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Drive?>("drive"); }
            set { BackingStore?.Set("drive", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Drive Drive
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Drive>("drive"); }
            set { BackingStore?.Set("drive", value); }
        }
#endif
        /// <summary>A collection of drives available for this user. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Drive>? Drives
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Drive>?>("drives"); }
            set { BackingStore?.Set("drives", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Drive> Drives
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Drive>>("drives"); }
            set { BackingStore?.Set("drives", value); }
        }
#endif
        /// <summary>The employeeExperience property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.EmployeeExperienceUser? EmployeeExperience
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.EmployeeExperienceUser?>("employeeExperience"); }
            set { BackingStore?.Set("employeeExperience", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.EmployeeExperienceUser EmployeeExperience
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.EmployeeExperienceUser>("employeeExperience"); }
            set { BackingStore?.Set("employeeExperience", value); }
        }
#endif
        /// <summary>The date and time when the user was hired or will start work if there is a future hire. Supports $filter (eq, ne, not , ge, le, in).</summary>
        public DateTimeOffset? EmployeeHireDate
        {
            get { return BackingStore?.Get<DateTimeOffset?>("employeeHireDate"); }
            set { BackingStore?.Set("employeeHireDate", value); }
        }
        /// <summary>The employee identifier assigned to the user by the organization. The maximum length is 16 characters.Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmployeeId
        {
            get { return BackingStore?.Get<string?>("employeeId"); }
            set { BackingStore?.Set("employeeId", value); }
        }
#nullable restore
#else
        public string EmployeeId
        {
            get { return BackingStore?.Get<string>("employeeId"); }
            set { BackingStore?.Set("employeeId", value); }
        }
#endif
        /// <summary>The date and time when the user left or will leave the organization. To read this property, the calling app must be assigned the User-LifeCycleInfo.Read.All permission. To write this property, the calling app must be assigned the User.Read.All and User-LifeCycleInfo.ReadWrite.All permissions. To read this property in delegated scenarios, the admin needs at least one of the following Microsoft Entra roles: Lifecycle Workflows Administrator (least privilege), Global Reader. To write this property in delegated scenarios, the admin needs the Global Administrator role. Supports $filter (eq, ne, not , ge, le, in). For more information, see Configure the employeeLeaveDateTime property for a user.</summary>
        public DateTimeOffset? EmployeeLeaveDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("employeeLeaveDateTime"); }
            set { BackingStore?.Set("employeeLeaveDateTime", value); }
        }
        /// <summary>Represents organization data (for example, division and costCenter) associated with a user. Supports $filter (eq, ne, not , ge, le, in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.EmployeeOrgData? EmployeeOrgData
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.EmployeeOrgData?>("employeeOrgData"); }
            set { BackingStore?.Set("employeeOrgData", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.EmployeeOrgData EmployeeOrgData
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.EmployeeOrgData>("employeeOrgData"); }
            set { BackingStore?.Set("employeeOrgData", value); }
        }
#endif
        /// <summary>Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor. Supports $filter (eq, ne, not , ge, le, in, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmployeeType
        {
            get { return BackingStore?.Get<string?>("employeeType"); }
            set { BackingStore?.Set("employeeType", value); }
        }
#nullable restore
#else
        public string EmployeeType
        {
            get { return BackingStore?.Get<string>("employeeType"); }
            set { BackingStore?.Set("employeeType", value); }
        }
#endif
        /// <summary>The user&apos;s events. The default is to show events under the Default Calendar. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Event>? Events
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Event>?>("events"); }
            set { BackingStore?.Set("events", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Event> Events
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Event>>("events"); }
            set { BackingStore?.Set("events", value); }
        }
#endif
        /// <summary>The collection of open extensions defined for the user. Supports $expand. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Extension>? Extensions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Extension>?>("extensions"); }
            set { BackingStore?.Set("extensions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Extension> Extensions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Extension>>("extensions"); }
            set { BackingStore?.Set("extensions", value); }
        }
#endif
        /// <summary>For an external user invited to the tenant using the invitation API, this property represents the invited user&apos;s invitation status. For invited users, the state can be PendingAcceptance or Accepted, or null for all other users. Supports $filter (eq, ne, not , in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalUserState
        {
            get { return BackingStore?.Get<string?>("externalUserState"); }
            set { BackingStore?.Set("externalUserState", value); }
        }
#nullable restore
#else
        public string ExternalUserState
        {
            get { return BackingStore?.Get<string>("externalUserState"); }
            set { BackingStore?.Set("externalUserState", value); }
        }
#endif
        /// <summary>Shows the timestamp for the latest change to the externalUserState property. Supports $filter (eq, ne, not , in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalUserStateChangeDateTime
        {
            get { return BackingStore?.Get<string?>("externalUserStateChangeDateTime"); }
            set { BackingStore?.Set("externalUserStateChangeDateTime", value); }
        }
#nullable restore
#else
        public string ExternalUserStateChangeDateTime
        {
            get { return BackingStore?.Get<string>("externalUserStateChangeDateTime"); }
            set { BackingStore?.Set("externalUserStateChangeDateTime", value); }
        }
#endif
        /// <summary>The fax number of the user. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FaxNumber
        {
            get { return BackingStore?.Get<string?>("faxNumber"); }
            set { BackingStore?.Set("faxNumber", value); }
        }
#nullable restore
#else
        public string FaxNumber
        {
            get { return BackingStore?.Get<string>("faxNumber"); }
            set { BackingStore?.Set("faxNumber", value); }
        }
#endif
        /// <summary>The followedSites property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Site>? FollowedSites
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Site>?>("followedSites"); }
            set { BackingStore?.Set("followedSites", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Site> FollowedSites
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Site>>("followedSites"); }
            set { BackingStore?.Set("followedSites", value); }
        }
#endif
        /// <summary>The given name (first name) of the user. Maximum length is 64 characters. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GivenName
        {
            get { return BackingStore?.Get<string?>("givenName"); }
            set { BackingStore?.Set("givenName", value); }
        }
#nullable restore
#else
        public string GivenName
        {
            get { return BackingStore?.Get<string>("givenName"); }
            set { BackingStore?.Set("givenName", value); }
        }
#endif
        /// <summary>The hire date of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.  Returned only on $select.  Note: This property is specific to SharePoint Online. We recommend using the native employeeHireDate property to set and update hire date values using Microsoft Graph APIs.</summary>
        public DateTimeOffset? HireDate
        {
            get { return BackingStore?.Get<DateTimeOffset?>("hireDate"); }
            set { BackingStore?.Set("hireDate", value); }
        }
        /// <summary>Represents the identities that can be used to sign in to this user account. An identity can be provided by Microsoft (also known as a local account), by organizations, or by social identity providers such as Facebook, Google, and Microsoft and tied to a user account. It may contain multiple items with the same signInType value.  Supports $filter (eq) with limitations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ObjectIdentity>? Identities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ObjectIdentity>?>("identities"); }
            set { BackingStore?.Set("identities", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ObjectIdentity> Identities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ObjectIdentity>>("identities"); }
            set { BackingStore?.Set("identities", value); }
        }
#endif
        /// <summary>The instant message voice-over IP (VOIP) session initiation protocol (SIP) addresses for the user. Read-only. Supports $filter (eq, not, ge, le, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ImAddresses
        {
            get { return BackingStore?.Get<List<string>?>("imAddresses"); }
            set { BackingStore?.Set("imAddresses", value); }
        }
#nullable restore
#else
        public List<string> ImAddresses
        {
            get { return BackingStore?.Get<List<string>>("imAddresses"); }
            set { BackingStore?.Set("imAddresses", value); }
        }
#endif
        /// <summary>Relevance classification of the user&apos;s messages based on explicit designations that override inferred relevance or importance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.InferenceClassification? InferenceClassification
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.InferenceClassification?>("inferenceClassification"); }
            set { BackingStore?.Set("inferenceClassification", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.InferenceClassification InferenceClassification
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.InferenceClassification>("inferenceClassification"); }
            set { BackingStore?.Set("inferenceClassification", value); }
        }
#endif
        /// <summary>Identifies the info segments assigned to the user.  Supports $filter (eq, not, ge, le, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? InfoCatalogs
        {
            get { return BackingStore?.Get<List<string>?>("infoCatalogs"); }
            set { BackingStore?.Set("infoCatalogs", value); }
        }
#nullable restore
#else
        public List<string> InfoCatalogs
        {
            get { return BackingStore?.Get<List<string>>("infoCatalogs"); }
            set { BackingStore?.Set("infoCatalogs", value); }
        }
#endif
        /// <summary>The informationProtection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.InformationProtection? InformationProtection
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.InformationProtection?>("informationProtection"); }
            set { BackingStore?.Set("informationProtection", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.InformationProtection InformationProtection
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.InformationProtection>("informationProtection"); }
            set { BackingStore?.Set("informationProtection", value); }
        }
#endif
        /// <summary>Represents relationships between a user and items such as OneDrive for work or school documents, calculated using advanced analytics and machine learning techniques. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ItemInsights? Insights
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ItemInsights?>("insights"); }
            set { BackingStore?.Set("insights", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ItemInsights Insights
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ItemInsights>("insights"); }
            set { BackingStore?.Set("insights", value); }
        }
#endif
        /// <summary>A list for users to describe their interests. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Interests
        {
            get { return BackingStore?.Get<List<string>?>("interests"); }
            set { BackingStore?.Set("interests", value); }
        }
#nullable restore
#else
        public List<string> Interests
        {
            get { return BackingStore?.Get<List<string>>("interests"); }
            set { BackingStore?.Set("interests", value); }
        }
#endif
        /// <summary>The user or service principal that invited the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.DirectoryObject? InvitedBy
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DirectoryObject?>("invitedBy"); }
            set { BackingStore?.Set("invitedBy", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.DirectoryObject InvitedBy
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DirectoryObject>("invitedBy"); }
            set { BackingStore?.Set("invitedBy", value); }
        }
#endif
        /// <summary>Indicates whether the user is pending an exchange mailbox license assignment.  Read-only.  Supports $filter (eq where true only).</summary>
        public bool? IsLicenseReconciliationNeeded
        {
            get { return BackingStore?.Get<bool?>("isLicenseReconciliationNeeded"); }
            set { BackingStore?.Set("isLicenseReconciliationNeeded", value); }
        }
        /// <summary>true if the user is a member of a restricted management administrative unit. Default value is false. Read-only.  To manage a user who is a member of a restricted management administrative unit, the administrator or calling app must be assigned a Microsoft Entra role at the scope of the restricted management administrative unit.</summary>
        public bool? IsManagementRestricted
        {
            get { return BackingStore?.Get<bool?>("isManagementRestricted"); }
            set { BackingStore?.Set("isManagementRestricted", value); }
        }
        /// <summary>Do not use – reserved for future use.</summary>
        public bool? IsResourceAccount
        {
            get { return BackingStore?.Get<bool?>("isResourceAccount"); }
            set { BackingStore?.Set("isResourceAccount", value); }
        }
        /// <summary>The user&apos;s job title. Maximum length is 128 characters. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobTitle
        {
            get { return BackingStore?.Get<string?>("jobTitle"); }
            set { BackingStore?.Set("jobTitle", value); }
        }
#nullable restore
#else
        public string JobTitle
        {
            get { return BackingStore?.Get<string>("jobTitle"); }
            set { BackingStore?.Set("jobTitle", value); }
        }
#endif
        /// <summary>The joinedGroups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Group>? JoinedGroups
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Group>?>("joinedGroups"); }
            set { BackingStore?.Set("joinedGroups", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Group> JoinedGroups
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Group>>("joinedGroups"); }
            set { BackingStore?.Set("joinedGroups", value); }
        }
#endif
        /// <summary>The Microsoft Teams teams the user is a member of. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Team>? JoinedTeams
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Team>?>("joinedTeams"); }
            set { BackingStore?.Set("joinedTeams", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Team> JoinedTeams
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Team>>("joinedTeams"); }
            set { BackingStore?.Set("joinedTeams", value); }
        }
#endif
        /// <summary>When this Microsoft Entra user last changed their password or when their password was created, whichever date the latest action was performed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Returned only on $select.</summary>
        public DateTimeOffset? LastPasswordChangeDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastPasswordChangeDateTime"); }
            set { BackingStore?.Set("lastPasswordChangeDateTime", value); }
        }
        /// <summary>Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, MinorWithOutParentalConsent, MinorWithParentalConsent, MinorNoParentalConsentRequired, NotAdult, and Adult. For more information, see legal age group property definitions. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegalAgeGroupClassification
        {
            get { return BackingStore?.Get<string?>("legalAgeGroupClassification"); }
            set { BackingStore?.Set("legalAgeGroupClassification", value); }
        }
#nullable restore
#else
        public string LegalAgeGroupClassification
        {
            get { return BackingStore?.Get<string>("legalAgeGroupClassification"); }
            set { BackingStore?.Set("legalAgeGroupClassification", value); }
        }
#endif
        /// <summary>State of license assignments for this user. It also indicates licenses that are directly assigned and the ones the user inherited through group memberships. Read-only. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.LicenseAssignmentState>? LicenseAssignmentStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.LicenseAssignmentState>?>("licenseAssignmentStates"); }
            set { BackingStore?.Set("licenseAssignmentStates", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.LicenseAssignmentState> LicenseAssignmentStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.LicenseAssignmentState>>("licenseAssignmentStates"); }
            set { BackingStore?.Set("licenseAssignmentStates", value); }
        }
#endif
        /// <summary>The licenseDetails property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.LicenseDetails>? LicenseDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.LicenseDetails>?>("licenseDetails"); }
            set { BackingStore?.Set("licenseDetails", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.LicenseDetails> LicenseDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.LicenseDetails>>("licenseDetails"); }
            set { BackingStore?.Set("licenseDetails", value); }
        }
#endif
        /// <summary>The SMTP address for the user, for example, admin@contoso.com. Changes to this property also update the user&apos;s proxyAddresses collection to include the value as an SMTP address. This property can&apos;t contain accent characters.  NOTE: We don&apos;t recommend updating this property for Azure AD B2C user profiles. Use the otherMails property instead.  Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mail
        {
            get { return BackingStore?.Get<string?>("mail"); }
            set { BackingStore?.Set("mail", value); }
        }
#nullable restore
#else
        public string Mail
        {
            get { return BackingStore?.Get<string>("mail"); }
            set { BackingStore?.Set("mail", value); }
        }
#endif
        /// <summary>Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale, and time zone. For more information, see User preferences for languages and regional formats. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.MailboxSettings? MailboxSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MailboxSettings?>("mailboxSettings"); }
            set { BackingStore?.Set("mailboxSettings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.MailboxSettings MailboxSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MailboxSettings>("mailboxSettings"); }
            set { BackingStore?.Set("mailboxSettings", value); }
        }
#endif
        /// <summary>The user&apos;s mail folders. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.MailFolder>? MailFolders
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MailFolder>?>("mailFolders"); }
            set { BackingStore?.Set("mailFolders", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.MailFolder> MailFolders
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MailFolder>>("mailFolders"); }
            set { BackingStore?.Set("mailFolders", value); }
        }
#endif
        /// <summary>The mail alias for the user. This property must be specified when a user is created. Maximum length is 64 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MailNickname
        {
            get { return BackingStore?.Get<string?>("mailNickname"); }
            set { BackingStore?.Set("mailNickname", value); }
        }
#nullable restore
#else
        public string MailNickname
        {
            get { return BackingStore?.Get<string>("mailNickname"); }
            set { BackingStore?.Set("mailNickname", value); }
        }
#endif
        /// <summary>Zero or more log collection requests triggered for the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ManagedAppLogCollectionRequest>? ManagedAppLogCollectionRequests
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedAppLogCollectionRequest>?>("managedAppLogCollectionRequests"); }
            set { BackingStore?.Set("managedAppLogCollectionRequests", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ManagedAppLogCollectionRequest> ManagedAppLogCollectionRequests
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedAppLogCollectionRequest>>("managedAppLogCollectionRequests"); }
            set { BackingStore?.Set("managedAppLogCollectionRequests", value); }
        }
#endif
        /// <summary>Zero or more managed app registrations that belong to the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ManagedAppRegistration>? ManagedAppRegistrations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedAppRegistration>?>("managedAppRegistrations"); }
            set { BackingStore?.Set("managedAppRegistrations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ManagedAppRegistration> ManagedAppRegistrations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedAppRegistration>>("managedAppRegistrations"); }
            set { BackingStore?.Set("managedAppRegistrations", value); }
        }
#endif
        /// <summary>The managed devices associated with the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ManagedDevice>? ManagedDevices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedDevice>?>("managedDevices"); }
            set { BackingStore?.Set("managedDevices", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ManagedDevice> ManagedDevices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedDevice>>("managedDevices"); }
            set { BackingStore?.Set("managedDevices", value); }
        }
#endif
        /// <summary>The user or contact that is this user&apos;s manager. Read-only. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.DirectoryObject? Manager
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DirectoryObject?>("manager"); }
            set { BackingStore?.Set("manager", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.DirectoryObject Manager
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DirectoryObject>("manager"); }
            set { BackingStore?.Set("manager", value); }
        }
#endif
        /// <summary>The groups, directory roles, and administrative units that the user is a member of. Read-only. Nullable. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? MemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("memberOf"); }
            set { BackingStore?.Set("memberOf", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> MemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("memberOf"); }
            set { BackingStore?.Set("memberOf", value); }
        }
#endif
        /// <summary>The messages in a mailbox or folder. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Message>? Messages
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Message>?>("messages"); }
            set { BackingStore?.Set("messages", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Message> Messages
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Message>>("messages"); }
            set { BackingStore?.Set("messages", value); }
        }
#endif
        /// <summary>The list of troubleshooting events for this user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.MobileAppIntentAndState>? MobileAppIntentAndStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MobileAppIntentAndState>?>("mobileAppIntentAndStates"); }
            set { BackingStore?.Set("mobileAppIntentAndStates", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.MobileAppIntentAndState> MobileAppIntentAndStates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MobileAppIntentAndState>>("mobileAppIntentAndStates"); }
            set { BackingStore?.Set("mobileAppIntentAndStates", value); }
        }
#endif
        /// <summary>The list of mobile app troubleshooting events for this user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.MobileAppTroubleshootingEvent>? MobileAppTroubleshootingEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MobileAppTroubleshootingEvent>?>("mobileAppTroubleshootingEvents"); }
            set { BackingStore?.Set("mobileAppTroubleshootingEvents", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.MobileAppTroubleshootingEvent> MobileAppTroubleshootingEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.MobileAppTroubleshootingEvent>>("mobileAppTroubleshootingEvents"); }
            set { BackingStore?.Set("mobileAppTroubleshootingEvents", value); }
        }
#endif
        /// <summary>The primary cellular telephone number for the user. Read-only for users synced from the on-premises directory.  Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values) and $search.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MobilePhone
        {
            get { return BackingStore?.Get<string?>("mobilePhone"); }
            set { BackingStore?.Set("mobilePhone", value); }
        }
#nullable restore
#else
        public string MobilePhone
        {
            get { return BackingStore?.Get<string>("mobilePhone"); }
            set { BackingStore?.Set("mobilePhone", value); }
        }
#endif
        /// <summary>The URL for the user&apos;s site. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MySite
        {
            get { return BackingStore?.Get<string?>("mySite"); }
            set { BackingStore?.Set("mySite", value); }
        }
#nullable restore
#else
        public string MySite
        {
            get { return BackingStore?.Get<string>("mySite"); }
            set { BackingStore?.Set("mySite", value); }
        }
#endif
        /// <summary>The notifications property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Notification>? Notifications
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Notification>?>("notifications"); }
            set { BackingStore?.Set("notifications", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Notification> Notifications
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Notification>>("notifications"); }
            set { BackingStore?.Set("notifications", value); }
        }
#endif
        /// <summary>The oauth2PermissionGrants property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.OAuth2PermissionGrant>? Oauth2PermissionGrants
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OAuth2PermissionGrant>?>("oauth2PermissionGrants"); }
            set { BackingStore?.Set("oauth2PermissionGrants", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.OAuth2PermissionGrant> Oauth2PermissionGrants
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OAuth2PermissionGrant>>("oauth2PermissionGrants"); }
            set { BackingStore?.Set("oauth2PermissionGrants", value); }
        }
#endif
        /// <summary>The office location in the user&apos;s place of business. Maximum length is 128 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OfficeLocation
        {
            get { return BackingStore?.Get<string?>("officeLocation"); }
            set { BackingStore?.Set("officeLocation", value); }
        }
#nullable restore
#else
        public string OfficeLocation
        {
            get { return BackingStore?.Get<string>("officeLocation"); }
            set { BackingStore?.Set("officeLocation", value); }
        }
#endif
        /// <summary>The onenote property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Onenote? Onenote
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Onenote?>("onenote"); }
            set { BackingStore?.Set("onenote", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Onenote Onenote
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Onenote>("onenote"); }
            set { BackingStore?.Set("onenote", value); }
        }
#endif
        /// <summary>Information about a meeting, including the URL used to join a meeting, the attendees list, and the description.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.OnlineMeeting>? OnlineMeetings
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OnlineMeeting>?>("onlineMeetings"); }
            set { BackingStore?.Set("onlineMeetings", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.OnlineMeeting> OnlineMeetings
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OnlineMeeting>>("onlineMeetings"); }
            set { BackingStore?.Set("onlineMeetings", value); }
        }
#endif
        /// <summary>Contains the on-premises Active Directory distinguished name or DN.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesDistinguishedName
        {
            get { return BackingStore?.Get<string?>("onPremisesDistinguishedName"); }
            set { BackingStore?.Set("onPremisesDistinguishedName", value); }
        }
#nullable restore
#else
        public string OnPremisesDistinguishedName
        {
            get { return BackingStore?.Get<string>("onPremisesDistinguishedName"); }
            set { BackingStore?.Set("onPremisesDistinguishedName", value); }
        }
#endif
        /// <summary>Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesDomainName
        {
            get { return BackingStore?.Get<string?>("onPremisesDomainName"); }
            set { BackingStore?.Set("onPremisesDomainName", value); }
        }
#nullable restore
#else
        public string OnPremisesDomainName
        {
            get { return BackingStore?.Get<string>("onPremisesDomainName"); }
            set { BackingStore?.Set("onPremisesDomainName", value); }
        }
#endif
        /// <summary>Contains extensionAttributes1-15 for the user. These extension attributes are also known as Exchange custom attributes 1-15. Each attribute can store up to 1024 characters. For an onPremisesSyncEnabled user, the source of authority for this set of properties is the on-premises and is read-only. For a cloud-only user (where onPremisesSyncEnabled is false), these properties can be set during the creation or update of a user object.  For a cloud-only user previously synced from on-premises Active Directory, these properties are read-only in Microsoft Graph but can be fully managed through the Exchange Admin Center or the Exchange Online V2 module in PowerShell. Supports $filter (eq, ne, not, in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.OnPremisesExtensionAttributes? OnPremisesExtensionAttributes
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OnPremisesExtensionAttributes?>("onPremisesExtensionAttributes"); }
            set { BackingStore?.Set("onPremisesExtensionAttributes", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.OnPremisesExtensionAttributes OnPremisesExtensionAttributes
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OnPremisesExtensionAttributes>("onPremisesExtensionAttributes"); }
            set { BackingStore?.Set("onPremisesExtensionAttributes", value); }
        }
#endif
        /// <summary>This property associates an on-premises Active Directory user account to their Microsoft Entra user object. This property must be specified when creating a new user account in the Graph if you&apos;re using a federated domain for the user&apos;s userPrincipalName (UPN) property. Note: The $ and _ characters can&apos;t be used when specifying this property. Supports $filter (eq, ne, not, ge, le, in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesImmutableId
        {
            get { return BackingStore?.Get<string?>("onPremisesImmutableId"); }
            set { BackingStore?.Set("onPremisesImmutableId", value); }
        }
#nullable restore
#else
        public string OnPremisesImmutableId
        {
            get { return BackingStore?.Get<string>("onPremisesImmutableId"); }
            set { BackingStore?.Set("onPremisesImmutableId", value); }
        }
#endif
        /// <summary>Indicates the last time at which the object was synced with the on-premises directory; for example: &apos;2013-02-16T03:04:54Z&apos;. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Supports $filter (eq, ne, not, ge, le, in).</summary>
        public DateTimeOffset? OnPremisesLastSyncDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("onPremisesLastSyncDateTime"); }
            set { BackingStore?.Set("onPremisesLastSyncDateTime", value); }
        }
        /// <summary>Errors when using Microsoft synchronization product during provisioning.  Supports $filter (eq, not, ge, le).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>? OnPremisesProvisioningErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>?>("onPremisesProvisioningErrors"); }
            set { BackingStore?.Set("onPremisesProvisioningErrors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError> OnPremisesProvisioningErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>>("onPremisesProvisioningErrors"); }
            set { BackingStore?.Set("onPremisesProvisioningErrors", value); }
        }
#endif
        /// <summary>Contains the on-premises sAMAccountName synchronized from the on-premises directory.  Supports $filter (eq, ne, not, ge, le, in, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesSamAccountName
        {
            get { return BackingStore?.Get<string?>("onPremisesSamAccountName"); }
            set { BackingStore?.Set("onPremisesSamAccountName", value); }
        }
#nullable restore
#else
        public string OnPremisesSamAccountName
        {
            get { return BackingStore?.Get<string>("onPremisesSamAccountName"); }
            set { BackingStore?.Set("onPremisesSamAccountName", value); }
        }
#endif
        /// <summary>Contains the on-premises security identifier (SID) for the user synchronized from on-premises to the cloud. Must be in the format of SID, such as &apos;S-1-5-21-1180699209-877415012-3182824384-1006&apos;. Supports $filter (eq including on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesSecurityIdentifier
        {
            get { return BackingStore?.Get<string?>("onPremisesSecurityIdentifier"); }
            set { BackingStore?.Set("onPremisesSecurityIdentifier", value); }
        }
#nullable restore
#else
        public string OnPremisesSecurityIdentifier
        {
            get { return BackingStore?.Get<string>("onPremisesSecurityIdentifier"); }
            set { BackingStore?.Set("onPremisesSecurityIdentifier", value); }
        }
#endif
        /// <summary>Contains all on-premises Session Initiation Protocol (SIP) information related to the user. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.OnPremisesSipInfo? OnPremisesSipInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OnPremisesSipInfo?>("onPremisesSipInfo"); }
            set { BackingStore?.Set("onPremisesSipInfo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.OnPremisesSipInfo OnPremisesSipInfo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OnPremisesSipInfo>("onPremisesSipInfo"); }
            set { BackingStore?.Set("onPremisesSipInfo", value); }
        }
#endif
        /// <summary>true if this user object is currently being synced from an on-premises Active Directory (AD); otherwise, the user isn&apos;t being synced and can be managed in Microsoft Entra ID. Read-only. Supports $filter (eq, ne, not, in, and eq on null values).</summary>
        public bool? OnPremisesSyncEnabled
        {
            get { return BackingStore?.Get<bool?>("onPremisesSyncEnabled"); }
            set { BackingStore?.Set("onPremisesSyncEnabled", value); }
        }
        /// <summary>Contains the on-premises userPrincipalName synchronized from the on-premises directory. Supports $filter (eq, ne, not, ge, le, in, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesUserPrincipalName
        {
            get { return BackingStore?.Get<string?>("onPremisesUserPrincipalName"); }
            set { BackingStore?.Set("onPremisesUserPrincipalName", value); }
        }
#nullable restore
#else
        public string OnPremisesUserPrincipalName
        {
            get { return BackingStore?.Get<string>("onPremisesUserPrincipalName"); }
            set { BackingStore?.Set("onPremisesUserPrincipalName", value); }
        }
#endif
        /// <summary>A list of additional email addresses for the user; for example: [&apos;bob@contoso.com&apos;, &apos;Robert@fabrikam.com&apos;].NOTE: This property can&apos;t contain accent characters.Supports $filter (eq, not, ge, le, in, startsWith, endsWith, /$count eq 0, /$count ne 0).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OtherMails
        {
            get { return BackingStore?.Get<List<string>?>("otherMails"); }
            set { BackingStore?.Set("otherMails", value); }
        }
#nullable restore
#else
        public List<string> OtherMails
        {
            get { return BackingStore?.Get<List<string>>("otherMails"); }
            set { BackingStore?.Set("otherMails", value); }
        }
#endif
        /// <summary>Selective Outlook services available to the user. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.OutlookUser? Outlook
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OutlookUser?>("outlook"); }
            set { BackingStore?.Set("outlook", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.OutlookUser Outlook
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.OutlookUser>("outlook"); }
            set { BackingStore?.Set("outlook", value); }
        }
#endif
        /// <summary>Devices owned by the user. Read-only. Nullable. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? OwnedDevices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("ownedDevices"); }
            set { BackingStore?.Set("ownedDevices", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> OwnedDevices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("ownedDevices"); }
            set { BackingStore?.Set("ownedDevices", value); }
        }
#endif
        /// <summary>Directory objects owned by the user. Read-only. Nullable. Supports $expand, $select nested in $expand, and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? OwnedObjects
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("ownedObjects"); }
            set { BackingStore?.Set("ownedObjects", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> OwnedObjects
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("ownedObjects"); }
            set { BackingStore?.Set("ownedObjects", value); }
        }
#endif
        /// <summary>Specifies password policies for the user. This value is an enumeration with one possible value being DisableStrongPassword, which allows weaker passwords than the default policy to be specified. DisablePasswordExpiration can also be specified. The two may be specified together; for example: DisablePasswordExpiration, DisableStrongPassword. For more information on the default password policies, see Microsoft Entra password policies. Supports $filter (ne, not, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PasswordPolicies
        {
            get { return BackingStore?.Get<string?>("passwordPolicies"); }
            set { BackingStore?.Set("passwordPolicies", value); }
        }
#nullable restore
#else
        public string PasswordPolicies
        {
            get { return BackingStore?.Get<string>("passwordPolicies"); }
            set { BackingStore?.Set("passwordPolicies", value); }
        }
#endif
        /// <summary>Specifies the password profile for the user. The profile contains the user&apos;s password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. Supports $filter (eq, ne, not, in, and eq on null values). To update this property:  In delegated access, the calling app must be assigned the Directory.AccessAsUser.All delegated permission on behalf of the signed-in user.  In application-only access, the calling app must be assigned the User.ReadWrite.All (least privilege) or Directory.ReadWrite.All (higher privilege) application permission and at least the User Administrator Microsoft Entra role.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PasswordProfile? PasswordProfile
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PasswordProfile?>("passwordProfile"); }
            set { BackingStore?.Set("passwordProfile", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PasswordProfile PasswordProfile
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PasswordProfile>("passwordProfile"); }
            set { BackingStore?.Set("passwordProfile", value); }
        }
#endif
        /// <summary>A list for users to enumerate their past projects. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PastProjects
        {
            get { return BackingStore?.Get<List<string>?>("pastProjects"); }
            set { BackingStore?.Set("pastProjects", value); }
        }
#nullable restore
#else
        public List<string> PastProjects
        {
            get { return BackingStore?.Get<List<string>>("pastProjects"); }
            set { BackingStore?.Set("pastProjects", value); }
        }
#endif
        /// <summary>Navigation property to get a list of access reviews pending approval by the reviewer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AccessReviewInstance>? PendingAccessReviewInstances
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AccessReviewInstance>?>("pendingAccessReviewInstances"); }
            set { BackingStore?.Set("pendingAccessReviewInstances", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AccessReviewInstance> PendingAccessReviewInstances
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AccessReviewInstance>>("pendingAccessReviewInstances"); }
            set { BackingStore?.Set("pendingAccessReviewInstances", value); }
        }
#endif
        /// <summary>Read-only. The most relevant people to the user. The collection is ordered by their relevance to the user, which is determined by the user&apos;s communication, collaboration, and business relationships. A person aggregates information from mail, contacts, and social networks.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Person>? People
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Person>?>("people"); }
            set { BackingStore?.Set("people", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Person> People
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Person>>("people"); }
            set { BackingStore?.Set("people", value); }
        }
#endif
        /// <summary>List all resource-specific permission grants of a user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>? PermissionGrants
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>?>("permissionGrants"); }
            set { BackingStore?.Set("permissionGrants", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant> PermissionGrants
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>>("permissionGrants"); }
            set { BackingStore?.Set("permissionGrants", value); }
        }
#endif
        /// <summary>The user&apos;s profile photo. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ProfilePhoto? Photo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ProfilePhoto?>("photo"); }
            set { BackingStore?.Set("photo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ProfilePhoto Photo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ProfilePhoto>("photo"); }
            set { BackingStore?.Set("photo", value); }
        }
#endif
        /// <summary>The collection of the user&apos;s profile photos in different sizes. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ProfilePhoto>? Photos
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ProfilePhoto>?>("photos"); }
            set { BackingStore?.Set("photos", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ProfilePhoto> Photos
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ProfilePhoto>>("photos"); }
            set { BackingStore?.Set("photos", value); }
        }
#endif
        /// <summary>Selective Planner services available to the user. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PlannerUser? Planner
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerUser?>("planner"); }
            set { BackingStore?.Set("planner", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PlannerUser Planner
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerUser>("planner"); }
            set { BackingStore?.Set("planner", value); }
        }
#endif
        /// <summary>The postal code for the user&apos;s postal address. The postal code is specific to the user&apos;s country/region. In the United States of America, this attribute contains the ZIP code. Maximum length is 40 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostalCode
        {
            get { return BackingStore?.Get<string?>("postalCode"); }
            set { BackingStore?.Set("postalCode", value); }
        }
#nullable restore
#else
        public string PostalCode
        {
            get { return BackingStore?.Get<string>("postalCode"); }
            set { BackingStore?.Set("postalCode", value); }
        }
#endif
        /// <summary>The preferred data location for the user. For more information, see OneDrive Online Multi-Geo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredDataLocation
        {
            get { return BackingStore?.Get<string?>("preferredDataLocation"); }
            set { BackingStore?.Set("preferredDataLocation", value); }
        }
#nullable restore
#else
        public string PreferredDataLocation
        {
            get { return BackingStore?.Get<string>("preferredDataLocation"); }
            set { BackingStore?.Set("preferredDataLocation", value); }
        }
#endif
        /// <summary>The preferred language for the user. The preferred language format is based on RFC 4646. The name combines an ISO 639 two-letter lowercase culture code associated with the language and an ISO 3166 two-letter uppercase subculture code associated with the country or region. Example: &apos;en-US&apos;, or &apos;es-ES&apos;. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredLanguage
        {
            get { return BackingStore?.Get<string?>("preferredLanguage"); }
            set { BackingStore?.Set("preferredLanguage", value); }
        }
#nullable restore
#else
        public string PreferredLanguage
        {
            get { return BackingStore?.Get<string>("preferredLanguage"); }
            set { BackingStore?.Set("preferredLanguage", value); }
        }
#endif
        /// <summary>The preferred name for the user. Not Supported. This attribute returns an empty string.Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredName
        {
            get { return BackingStore?.Get<string?>("preferredName"); }
            set { BackingStore?.Set("preferredName", value); }
        }
#nullable restore
#else
        public string PreferredName
        {
            get { return BackingStore?.Get<string>("preferredName"); }
            set { BackingStore?.Set("preferredName", value); }
        }
#endif
        /// <summary>The presence property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Presence? Presence
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Presence?>("presence"); }
            set { BackingStore?.Set("presence", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Presence Presence
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Presence>("presence"); }
            set { BackingStore?.Set("presence", value); }
        }
#endif
        /// <summary>The print property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.UserPrint? Print
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserPrint?>("print"); }
            set { BackingStore?.Set("print", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.UserPrint Print
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserPrint>("print"); }
            set { BackingStore?.Set("print", value); }
        }
#endif
        /// <summary>Represents properties that are descriptive of a user in a tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Profile? Profile
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Profile?>("profile"); }
            set { BackingStore?.Set("profile", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Profile Profile
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Profile>("profile"); }
            set { BackingStore?.Set("profile", value); }
        }
#endif
        /// <summary>The plans that are provisioned for the user. Read-only. Not nullable. Supports $filter (eq, not, ge, le).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ProvisionedPlan>? ProvisionedPlans
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ProvisionedPlan>?>("provisionedPlans"); }
            set { BackingStore?.Set("provisionedPlans", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ProvisionedPlan> ProvisionedPlans
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ProvisionedPlan>>("provisionedPlans"); }
            set { BackingStore?.Set("provisionedPlans", value); }
        }
#endif
        /// <summary>For example: [&apos;SMTP: bob@contoso.com&apos;, &apos;smtp: bob@sales.contoso.com&apos;]. Changes to the mail property also update this collection to include the value as an SMTP address. For more information, see mail and proxyAddresses properties. The proxy address prefixed with SMTP (capitalized) is the primary proxy address, while the ones prefixed with smtp are the secondary proxy addresses. For Azure AD B2C accounts, this property has a limit of 10 unique addresses. Read-only in Microsoft Graph; you can update this property only through the Microsoft 365 admin center. Not nullable. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ProxyAddresses
        {
            get { return BackingStore?.Get<List<string>?>("proxyAddresses"); }
            set { BackingStore?.Set("proxyAddresses", value); }
        }
#nullable restore
#else
        public List<string> ProxyAddresses
        {
            get { return BackingStore?.Get<List<string>>("proxyAddresses"); }
            set { BackingStore?.Set("proxyAddresses", value); }
        }
#endif
        /// <summary>Any refresh tokens or sessions tokens (session cookies) issued before this time are invalid, and applications get an error when using an invalid refresh or sessions token to acquire a delegated access token (to access APIs such as Microsoft Graph).  If it happens, the application must acquire a new refresh token by requesting the authorized endpoint. Read-only. Use invalidateAllRefreshTokens to reset.</summary>
        public DateTimeOffset? RefreshTokensValidFromDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("refreshTokensValidFromDateTime"); }
            set { BackingStore?.Set("refreshTokensValidFromDateTime", value); }
        }
        /// <summary>Devices that are registered for the user. Read-only. Nullable. Supports $expand and returns up to 100 objects.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? RegisteredDevices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("registeredDevices"); }
            set { BackingStore?.Set("registeredDevices", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> RegisteredDevices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("registeredDevices"); }
            set { BackingStore?.Set("registeredDevices", value); }
        }
#endif
        /// <summary>A list for the user to enumerate their responsibilities. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Responsibilities
        {
            get { return BackingStore?.Get<List<string>?>("responsibilities"); }
            set { BackingStore?.Set("responsibilities", value); }
        }
#nullable restore
#else
        public List<string> Responsibilities
        {
            get { return BackingStore?.Get<List<string>>("responsibilities"); }
            set { BackingStore?.Set("responsibilities", value); }
        }
#endif
        /// <summary>A list for the user to enumerate the schools they have attended. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Schools
        {
            get { return BackingStore?.Get<List<string>?>("schools"); }
            set { BackingStore?.Set("schools", value); }
        }
#nullable restore
#else
        public List<string> Schools
        {
            get { return BackingStore?.Get<List<string>>("schools"); }
            set { BackingStore?.Set("schools", value); }
        }
#endif
        /// <summary>The scoped-role administrative unit memberships for this user. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ScopedRoleMembership>? ScopedRoleMemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ScopedRoleMembership>?>("scopedRoleMemberOf"); }
            set { BackingStore?.Set("scopedRoleMemberOf", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ScopedRoleMembership> ScopedRoleMemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ScopedRoleMembership>>("scopedRoleMemberOf"); }
            set { BackingStore?.Set("scopedRoleMemberOf", value); }
        }
#endif
        /// <summary>The security property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Security.Security? Security
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.Security?>("security"); }
            set { BackingStore?.Set("security", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Security.Security Security
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Security.Security>("security"); }
            set { BackingStore?.Set("security", value); }
        }
#endif
        /// <summary>Security identifier (SID) of the user, used in Windows scenarios. Read-only. Returned by default. Supports $select and $filter (eq, not, ge, le, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecurityIdentifier
        {
            get { return BackingStore?.Get<string?>("securityIdentifier"); }
            set { BackingStore?.Set("securityIdentifier", value); }
        }
#nullable restore
#else
        public string SecurityIdentifier
        {
            get { return BackingStore?.Get<string>("securityIdentifier"); }
            set { BackingStore?.Set("securityIdentifier", value); }
        }
#endif
        /// <summary>Errors published by a federated service describing a nontransient, service-specific error regarding the properties or link from a user object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>? ServiceProvisioningErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>?>("serviceProvisioningErrors"); }
            set { BackingStore?.Set("serviceProvisioningErrors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError> ServiceProvisioningErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>>("serviceProvisioningErrors"); }
            set { BackingStore?.Set("serviceProvisioningErrors", value); }
        }
#endif
        /// <summary>The settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.UserSettings? Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserSettings?>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.UserSettings Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserSettings>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#endif
        /// <summary>Do not use in Microsoft Graph. Manage this property through the Microsoft 365 admin center instead. Represents whether the user should be included in the Outlook global address list. See Known issue.</summary>
        public bool? ShowInAddressList
        {
            get { return BackingStore?.Get<bool?>("showInAddressList"); }
            set { BackingStore?.Set("showInAddressList", value); }
        }
        /// <summary>Get the last signed-in date and request ID of the sign-in for a given user. Read-only.Returned only on $select. Supports $filter (eq, ne, not, ge, le) but not with any other filterable properties. Note:  Details for this property require a Microsoft Entra ID P1 or P2 license and the AuditLog.Read.All permission.This property is not returned for a user who has never signed in or last signed in before April 2020.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.SignInActivity? SignInActivity
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SignInActivity?>("signInActivity"); }
            set { BackingStore?.Set("signInActivity", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.SignInActivity SignInActivity
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SignInActivity>("signInActivity"); }
            set { BackingStore?.Set("signInActivity", value); }
        }
#endif
        /// <summary>Any refresh tokens or sessions tokens (session cookies) issued before this time are invalid, and applications get an error when using an invalid refresh or sessions token to acquire a delegated access token (to access APIs such as Microsoft Graph).  If this happens, the application must acquire a new refresh token by requesting the authorized endpoint. Read-only. Use revokeSignInSessions to reset.</summary>
        public DateTimeOffset? SignInSessionsValidFromDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("signInSessionsValidFromDateTime"); }
            set { BackingStore?.Set("signInSessionsValidFromDateTime", value); }
        }
        /// <summary>A list for the user to enumerate their skills. Returned only on $select.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Skills
        {
            get { return BackingStore?.Get<List<string>?>("skills"); }
            set { BackingStore?.Set("skills", value); }
        }
#nullable restore
#else
        public List<string> Skills
        {
            get { return BackingStore?.Get<List<string>>("skills"); }
            set { BackingStore?.Set("skills", value); }
        }
#endif
        /// <summary>Represents a user&apos;s custom solution entity. Read-Only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.UserSolutionRoot? Solutions
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserSolutionRoot?>("solutions"); }
            set { BackingStore?.Set("solutions", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.UserSolutionRoot Solutions
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserSolutionRoot>("solutions"); }
            set { BackingStore?.Set("solutions", value); }
        }
#endif
        /// <summary>The users and groups responsible for this guest user&apos;s privileges in the tenant and keep the guest user&apos;s information and access updated. (HTTP Methods: GET, POST, DELETE.). Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? Sponsors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("sponsors"); }
            set { BackingStore?.Set("sponsors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> Sponsors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("sponsors"); }
            set { BackingStore?.Set("sponsors", value); }
        }
#endif
        /// <summary>The state or province in the user&apos;s address. Maximum length is 128 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State
        {
            get { return BackingStore?.Get<string?>("state"); }
            set { BackingStore?.Set("state", value); }
        }
#nullable restore
#else
        public string State
        {
            get { return BackingStore?.Get<string>("state"); }
            set { BackingStore?.Set("state", value); }
        }
#endif
        /// <summary>The street address of the user&apos;s place of business. Maximum length is 1024 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StreetAddress
        {
            get { return BackingStore?.Get<string?>("streetAddress"); }
            set { BackingStore?.Set("streetAddress", value); }
        }
#nullable restore
#else
        public string StreetAddress
        {
            get { return BackingStore?.Get<string>("streetAddress"); }
            set { BackingStore?.Set("streetAddress", value); }
        }
#endif
        /// <summary>The user&apos;s surname (family name or last name). Maximum length is 64 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Surname
        {
            get { return BackingStore?.Get<string?>("surname"); }
            set { BackingStore?.Set("surname", value); }
        }
#nullable restore
#else
        public string Surname
        {
            get { return BackingStore?.Get<string>("surname"); }
            set { BackingStore?.Set("surname", value); }
        }
#endif
        /// <summary>A container for Microsoft Teams features available for the user. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.UserTeamwork? Teamwork
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserTeamwork?>("teamwork"); }
            set { BackingStore?.Set("teamwork", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.UserTeamwork Teamwork
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserTeamwork>("teamwork"); }
            set { BackingStore?.Set("teamwork", value); }
        }
#endif
        /// <summary>Represents the To Do services available to a user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Todo? Todo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Todo?>("todo"); }
            set { BackingStore?.Set("todo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Todo Todo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Todo>("todo"); }
            set { BackingStore?.Set("todo", value); }
        }
#endif
        /// <summary>The groups, including nested groups and directory roles that a user is a member of. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? TransitiveMemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("transitiveMemberOf"); }
            set { BackingStore?.Set("transitiveMemberOf", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> TransitiveMemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("transitiveMemberOf"); }
            set { BackingStore?.Set("transitiveMemberOf", value); }
        }
#endif
        /// <summary>The transitive reports for a user. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? TransitiveReports
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("transitiveReports"); }
            set { BackingStore?.Set("transitiveReports", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> TransitiveReports
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("transitiveReports"); }
            set { BackingStore?.Set("transitiveReports", value); }
        }
#endif
        /// <summary>A two-letter country code (ISO standard 3166). Required for users that are assigned licenses due to legal requirements to check for availability of services in countries.  Examples include: US, JP, and GB. Not nullable. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsageLocation
        {
            get { return BackingStore?.Get<string?>("usageLocation"); }
            set { BackingStore?.Set("usageLocation", value); }
        }
#nullable restore
#else
        public string UsageLocation
        {
            get { return BackingStore?.Get<string>("usageLocation"); }
            set { BackingStore?.Set("usageLocation", value); }
        }
#endif
        /// <summary>Represents the usage rights a user has been granted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.UsageRight>? UsageRights
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.UsageRight>?>("usageRights"); }
            set { BackingStore?.Set("usageRights", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.UsageRight> UsageRights
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.UsageRight>>("usageRights"); }
            set { BackingStore?.Set("usageRights", value); }
        }
#endif
        /// <summary>The user principal name (UPN) of the user. The UPN is an Internet-style sign-in name for the user based on the Internet standard RFC 822. By convention, this should map to the user&apos;s email name. The general format is alias@domain, where the domain must be present in the tenant&apos;s verified domain collection. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization.NOTE: This property can&apos;t contain accent characters. Only the following characters are allowed A - Z, a - z, 0 - 9, &apos; . - _ ! # ^ ~. For the complete list of allowed characters, see username policies. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith) and $orderby.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName
        {
            get { return BackingStore?.Get<string?>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#nullable restore
#else
        public string UserPrincipalName
        {
            get { return BackingStore?.Get<string>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#endif
        /// <summary>A String value that can be used to classify user types in your directory. The possible values are Member and Guest. Supports $filter (eq, ne, not, in, and eq on null values). NOTE: For more information about the permissions for member and guest users, see What are the default user permissions in Microsoft Entra ID?</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserType
        {
            get { return BackingStore?.Get<string?>("userType"); }
            set { BackingStore?.Set("userType", value); }
        }
#nullable restore
#else
        public string UserType
        {
            get { return BackingStore?.Get<string>("userType"); }
            set { BackingStore?.Set("userType", value); }
        }
#endif
        /// <summary>The virtualEvents property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.UserVirtualEventsRoot? VirtualEvents
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserVirtualEventsRoot?>("virtualEvents"); }
            set { BackingStore?.Set("virtualEvents", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.UserVirtualEventsRoot VirtualEvents
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserVirtualEventsRoot>("virtualEvents"); }
            set { BackingStore?.Set("virtualEvents", value); }
        }
#endif
        /// <summary>Zero or more WIP device registrations that belong to the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.WindowsInformationProtectionDeviceRegistration>? WindowsInformationProtectionDeviceRegistrations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.WindowsInformationProtectionDeviceRegistration>?>("windowsInformationProtectionDeviceRegistrations"); }
            set { BackingStore?.Set("windowsInformationProtectionDeviceRegistrations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.WindowsInformationProtectionDeviceRegistration> WindowsInformationProtectionDeviceRegistrations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.WindowsInformationProtectionDeviceRegistration>>("windowsInformationProtectionDeviceRegistrations"); }
            set { BackingStore?.Set("windowsInformationProtectionDeviceRegistrations", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.User"/> and sets the default values.
        /// </summary>
        public User() : base()
        {
            OdataType = "#microsoft.graph.user";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.User"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.User CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.User();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "aboutMe", n => { AboutMe = n.GetStringValue(); } },
                { "accountEnabled", n => { AccountEnabled = n.GetBoolValue(); } },
                { "activities", n => { Activities = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.UserActivity>(global::Microsoft.Graph.Beta.Models.UserActivity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "ageGroup", n => { AgeGroup = n.GetStringValue(); } },
                { "agreementAcceptances", n => { AgreementAcceptances = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AgreementAcceptance>(global::Microsoft.Graph.Beta.Models.AgreementAcceptance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "analytics", n => { Analytics = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.UserAnalytics>(global::Microsoft.Graph.Beta.Models.UserAnalytics.CreateFromDiscriminatorValue); } },
                { "appConsentRequestsForApproval", n => { AppConsentRequestsForApproval = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AppConsentRequest>(global::Microsoft.Graph.Beta.Models.AppConsentRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "appRoleAssignedResources", n => { AppRoleAssignedResources = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ServicePrincipal>(global::Microsoft.Graph.Beta.Models.ServicePrincipal.CreateFromDiscriminatorValue)?.AsList(); } },
                { "appRoleAssignments", n => { AppRoleAssignments = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>(global::Microsoft.Graph.Beta.Models.AppRoleAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "approvals", n => { Approvals = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Approval>(global::Microsoft.Graph.Beta.Models.Approval.CreateFromDiscriminatorValue)?.AsList(); } },
                { "assignedLicenses", n => { AssignedLicenses = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignedLicense>(global::Microsoft.Graph.Beta.Models.AssignedLicense.CreateFromDiscriminatorValue)?.AsList(); } },
                { "assignedPlans", n => { AssignedPlans = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignedPlan>(global::Microsoft.Graph.Beta.Models.AssignedPlan.CreateFromDiscriminatorValue)?.AsList(); } },
                { "authentication", n => { Authentication = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Authentication>(global::Microsoft.Graph.Beta.Models.Authentication.CreateFromDiscriminatorValue); } },
                { "authorizationInfo", n => { AuthorizationInfo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.AuthorizationInfo>(global::Microsoft.Graph.Beta.Models.AuthorizationInfo.CreateFromDiscriminatorValue); } },
                { "birthday", n => { Birthday = n.GetDateTimeOffsetValue(); } },
                { "businessPhones", n => { BusinessPhones = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "calendar", n => { Calendar = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Calendar>(global::Microsoft.Graph.Beta.Models.Calendar.CreateFromDiscriminatorValue); } },
                { "calendarGroups", n => { CalendarGroups = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CalendarGroup>(global::Microsoft.Graph.Beta.Models.CalendarGroup.CreateFromDiscriminatorValue)?.AsList(); } },
                { "calendarView", n => { CalendarView = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Event>(global::Microsoft.Graph.Beta.Models.Event.CreateFromDiscriminatorValue)?.AsList(); } },
                { "calendars", n => { Calendars = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Calendar>(global::Microsoft.Graph.Beta.Models.Calendar.CreateFromDiscriminatorValue)?.AsList(); } },
                { "chats", n => { Chats = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Chat>(global::Microsoft.Graph.Beta.Models.Chat.CreateFromDiscriminatorValue)?.AsList(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "cloudClipboard", n => { CloudClipboard = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.CloudClipboardRoot>(global::Microsoft.Graph.Beta.Models.CloudClipboardRoot.CreateFromDiscriminatorValue); } },
                { "cloudPCs", n => { CloudPCs = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CloudPC>(global::Microsoft.Graph.Beta.Models.CloudPC.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cloudRealtimeCommunicationInfo", n => { CloudRealtimeCommunicationInfo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.CloudRealtimeCommunicationInfo>(global::Microsoft.Graph.Beta.Models.CloudRealtimeCommunicationInfo.CreateFromDiscriminatorValue); } },
                { "companyName", n => { CompanyName = n.GetStringValue(); } },
                { "consentProvidedForMinor", n => { ConsentProvidedForMinor = n.GetStringValue(); } },
                { "contactFolders", n => { ContactFolders = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ContactFolder>(global::Microsoft.Graph.Beta.Models.ContactFolder.CreateFromDiscriminatorValue)?.AsList(); } },
                { "contacts", n => { Contacts = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Contact>(global::Microsoft.Graph.Beta.Models.Contact.CreateFromDiscriminatorValue)?.AsList(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "createdObjects", n => { CreatedObjects = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "creationType", n => { CreationType = n.GetStringValue(); } },
                { "customSecurityAttributes", n => { CustomSecurityAttributes = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.CustomSecurityAttributeValue>(global::Microsoft.Graph.Beta.Models.CustomSecurityAttributeValue.CreateFromDiscriminatorValue); } },
                { "department", n => { Department = n.GetStringValue(); } },
                { "deviceEnrollmentConfigurations", n => { DeviceEnrollmentConfigurations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceEnrollmentConfiguration>(global::Microsoft.Graph.Beta.Models.DeviceEnrollmentConfiguration.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceEnrollmentLimit", n => { DeviceEnrollmentLimit = n.GetIntValue(); } },
                { "deviceKeys", n => { DeviceKeys = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceKey>(global::Microsoft.Graph.Beta.Models.DeviceKey.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceManagementTroubleshootingEvents", n => { DeviceManagementTroubleshootingEvents = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementTroubleshootingEvent>(global::Microsoft.Graph.Beta.Models.DeviceManagementTroubleshootingEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "devices", n => { Devices = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Device>(global::Microsoft.Graph.Beta.Models.Device.CreateFromDiscriminatorValue)?.AsList(); } },
                { "directReports", n => { DirectReports = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "drive", n => { Drive = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Drive>(global::Microsoft.Graph.Beta.Models.Drive.CreateFromDiscriminatorValue); } },
                { "drives", n => { Drives = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Drive>(global::Microsoft.Graph.Beta.Models.Drive.CreateFromDiscriminatorValue)?.AsList(); } },
                { "employeeExperience", n => { EmployeeExperience = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.EmployeeExperienceUser>(global::Microsoft.Graph.Beta.Models.EmployeeExperienceUser.CreateFromDiscriminatorValue); } },
                { "employeeHireDate", n => { EmployeeHireDate = n.GetDateTimeOffsetValue(); } },
                { "employeeId", n => { EmployeeId = n.GetStringValue(); } },
                { "employeeLeaveDateTime", n => { EmployeeLeaveDateTime = n.GetDateTimeOffsetValue(); } },
                { "employeeOrgData", n => { EmployeeOrgData = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.EmployeeOrgData>(global::Microsoft.Graph.Beta.Models.EmployeeOrgData.CreateFromDiscriminatorValue); } },
                { "employeeType", n => { EmployeeType = n.GetStringValue(); } },
                { "events", n => { Events = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Event>(global::Microsoft.Graph.Beta.Models.Event.CreateFromDiscriminatorValue)?.AsList(); } },
                { "extensions", n => { Extensions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Extension>(global::Microsoft.Graph.Beta.Models.Extension.CreateFromDiscriminatorValue)?.AsList(); } },
                { "externalUserState", n => { ExternalUserState = n.GetStringValue(); } },
                { "externalUserStateChangeDateTime", n => { ExternalUserStateChangeDateTime = n.GetStringValue(); } },
                { "faxNumber", n => { FaxNumber = n.GetStringValue(); } },
                { "followedSites", n => { FollowedSites = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Site>(global::Microsoft.Graph.Beta.Models.Site.CreateFromDiscriminatorValue)?.AsList(); } },
                { "givenName", n => { GivenName = n.GetStringValue(); } },
                { "hireDate", n => { HireDate = n.GetDateTimeOffsetValue(); } },
                { "identities", n => { Identities = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ObjectIdentity>(global::Microsoft.Graph.Beta.Models.ObjectIdentity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "imAddresses", n => { ImAddresses = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "inferenceClassification", n => { InferenceClassification = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.InferenceClassification>(global::Microsoft.Graph.Beta.Models.InferenceClassification.CreateFromDiscriminatorValue); } },
                { "infoCatalogs", n => { InfoCatalogs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "informationProtection", n => { InformationProtection = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.InformationProtection>(global::Microsoft.Graph.Beta.Models.InformationProtection.CreateFromDiscriminatorValue); } },
                { "insights", n => { Insights = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ItemInsights>(global::Microsoft.Graph.Beta.Models.ItemInsights.CreateFromDiscriminatorValue); } },
                { "interests", n => { Interests = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "invitedBy", n => { InvitedBy = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue); } },
                { "isLicenseReconciliationNeeded", n => { IsLicenseReconciliationNeeded = n.GetBoolValue(); } },
                { "isManagementRestricted", n => { IsManagementRestricted = n.GetBoolValue(); } },
                { "isResourceAccount", n => { IsResourceAccount = n.GetBoolValue(); } },
                { "jobTitle", n => { JobTitle = n.GetStringValue(); } },
                { "joinedGroups", n => { JoinedGroups = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Group>(global::Microsoft.Graph.Beta.Models.Group.CreateFromDiscriminatorValue)?.AsList(); } },
                { "joinedTeams", n => { JoinedTeams = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Team>(global::Microsoft.Graph.Beta.Models.Team.CreateFromDiscriminatorValue)?.AsList(); } },
                { "lastPasswordChangeDateTime", n => { LastPasswordChangeDateTime = n.GetDateTimeOffsetValue(); } },
                { "legalAgeGroupClassification", n => { LegalAgeGroupClassification = n.GetStringValue(); } },
                { "licenseAssignmentStates", n => { LicenseAssignmentStates = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.LicenseAssignmentState>(global::Microsoft.Graph.Beta.Models.LicenseAssignmentState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "licenseDetails", n => { LicenseDetails = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.LicenseDetails>(global::Microsoft.Graph.Beta.Models.LicenseDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mail", n => { Mail = n.GetStringValue(); } },
                { "mailFolders", n => { MailFolders = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MailFolder>(global::Microsoft.Graph.Beta.Models.MailFolder.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mailNickname", n => { MailNickname = n.GetStringValue(); } },
                { "mailboxSettings", n => { MailboxSettings = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.MailboxSettings>(global::Microsoft.Graph.Beta.Models.MailboxSettings.CreateFromDiscriminatorValue); } },
                { "managedAppLogCollectionRequests", n => { ManagedAppLogCollectionRequests = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedAppLogCollectionRequest>(global::Microsoft.Graph.Beta.Models.ManagedAppLogCollectionRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "managedAppRegistrations", n => { ManagedAppRegistrations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedAppRegistration>(global::Microsoft.Graph.Beta.Models.ManagedAppRegistration.CreateFromDiscriminatorValue)?.AsList(); } },
                { "managedDevices", n => { ManagedDevices = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedDevice>(global::Microsoft.Graph.Beta.Models.ManagedDevice.CreateFromDiscriminatorValue)?.AsList(); } },
                { "manager", n => { Manager = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue); } },
                { "memberOf", n => { MemberOf = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "messages", n => { Messages = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Message>(global::Microsoft.Graph.Beta.Models.Message.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mobileAppIntentAndStates", n => { MobileAppIntentAndStates = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MobileAppIntentAndState>(global::Microsoft.Graph.Beta.Models.MobileAppIntentAndState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mobileAppTroubleshootingEvents", n => { MobileAppTroubleshootingEvents = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MobileAppTroubleshootingEvent>(global::Microsoft.Graph.Beta.Models.MobileAppTroubleshootingEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mobilePhone", n => { MobilePhone = n.GetStringValue(); } },
                { "mySite", n => { MySite = n.GetStringValue(); } },
                { "notifications", n => { Notifications = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Notification>(global::Microsoft.Graph.Beta.Models.Notification.CreateFromDiscriminatorValue)?.AsList(); } },
                { "oauth2PermissionGrants", n => { Oauth2PermissionGrants = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.OAuth2PermissionGrant>(global::Microsoft.Graph.Beta.Models.OAuth2PermissionGrant.CreateFromDiscriminatorValue)?.AsList(); } },
                { "officeLocation", n => { OfficeLocation = n.GetStringValue(); } },
                { "onPremisesDistinguishedName", n => { OnPremisesDistinguishedName = n.GetStringValue(); } },
                { "onPremisesDomainName", n => { OnPremisesDomainName = n.GetStringValue(); } },
                { "onPremisesExtensionAttributes", n => { OnPremisesExtensionAttributes = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.OnPremisesExtensionAttributes>(global::Microsoft.Graph.Beta.Models.OnPremisesExtensionAttributes.CreateFromDiscriminatorValue); } },
                { "onPremisesImmutableId", n => { OnPremisesImmutableId = n.GetStringValue(); } },
                { "onPremisesLastSyncDateTime", n => { OnPremisesLastSyncDateTime = n.GetDateTimeOffsetValue(); } },
                { "onPremisesProvisioningErrors", n => { OnPremisesProvisioningErrors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>(global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError.CreateFromDiscriminatorValue)?.AsList(); } },
                { "onPremisesSamAccountName", n => { OnPremisesSamAccountName = n.GetStringValue(); } },
                { "onPremisesSecurityIdentifier", n => { OnPremisesSecurityIdentifier = n.GetStringValue(); } },
                { "onPremisesSipInfo", n => { OnPremisesSipInfo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.OnPremisesSipInfo>(global::Microsoft.Graph.Beta.Models.OnPremisesSipInfo.CreateFromDiscriminatorValue); } },
                { "onPremisesSyncEnabled", n => { OnPremisesSyncEnabled = n.GetBoolValue(); } },
                { "onPremisesUserPrincipalName", n => { OnPremisesUserPrincipalName = n.GetStringValue(); } },
                { "onenote", n => { Onenote = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Onenote>(global::Microsoft.Graph.Beta.Models.Onenote.CreateFromDiscriminatorValue); } },
                { "onlineMeetings", n => { OnlineMeetings = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.OnlineMeeting>(global::Microsoft.Graph.Beta.Models.OnlineMeeting.CreateFromDiscriminatorValue)?.AsList(); } },
                { "otherMails", n => { OtherMails = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "outlook", n => { Outlook = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.OutlookUser>(global::Microsoft.Graph.Beta.Models.OutlookUser.CreateFromDiscriminatorValue); } },
                { "ownedDevices", n => { OwnedDevices = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "ownedObjects", n => { OwnedObjects = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "passwordPolicies", n => { PasswordPolicies = n.GetStringValue(); } },
                { "passwordProfile", n => { PasswordProfile = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PasswordProfile>(global::Microsoft.Graph.Beta.Models.PasswordProfile.CreateFromDiscriminatorValue); } },
                { "pastProjects", n => { PastProjects = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "pendingAccessReviewInstances", n => { PendingAccessReviewInstances = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AccessReviewInstance>(global::Microsoft.Graph.Beta.Models.AccessReviewInstance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "people", n => { People = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Person>(global::Microsoft.Graph.Beta.Models.Person.CreateFromDiscriminatorValue)?.AsList(); } },
                { "permissionGrants", n => { PermissionGrants = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>(global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant.CreateFromDiscriminatorValue)?.AsList(); } },
                { "photo", n => { Photo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ProfilePhoto>(global::Microsoft.Graph.Beta.Models.ProfilePhoto.CreateFromDiscriminatorValue); } },
                { "photos", n => { Photos = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ProfilePhoto>(global::Microsoft.Graph.Beta.Models.ProfilePhoto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "planner", n => { Planner = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PlannerUser>(global::Microsoft.Graph.Beta.Models.PlannerUser.CreateFromDiscriminatorValue); } },
                { "postalCode", n => { PostalCode = n.GetStringValue(); } },
                { "preferredDataLocation", n => { PreferredDataLocation = n.GetStringValue(); } },
                { "preferredLanguage", n => { PreferredLanguage = n.GetStringValue(); } },
                { "preferredName", n => { PreferredName = n.GetStringValue(); } },
                { "presence", n => { Presence = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Presence>(global::Microsoft.Graph.Beta.Models.Presence.CreateFromDiscriminatorValue); } },
                { "print", n => { Print = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.UserPrint>(global::Microsoft.Graph.Beta.Models.UserPrint.CreateFromDiscriminatorValue); } },
                { "profile", n => { Profile = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Profile>(global::Microsoft.Graph.Beta.Models.Profile.CreateFromDiscriminatorValue); } },
                { "provisionedPlans", n => { ProvisionedPlans = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ProvisionedPlan>(global::Microsoft.Graph.Beta.Models.ProvisionedPlan.CreateFromDiscriminatorValue)?.AsList(); } },
                { "proxyAddresses", n => { ProxyAddresses = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "refreshTokensValidFromDateTime", n => { RefreshTokensValidFromDateTime = n.GetDateTimeOffsetValue(); } },
                { "registeredDevices", n => { RegisteredDevices = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "responsibilities", n => { Responsibilities = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "schools", n => { Schools = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "scopedRoleMemberOf", n => { ScopedRoleMemberOf = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ScopedRoleMembership>(global::Microsoft.Graph.Beta.Models.ScopedRoleMembership.CreateFromDiscriminatorValue)?.AsList(); } },
                { "security", n => { Security = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Security.Security>(global::Microsoft.Graph.Beta.Models.Security.Security.CreateFromDiscriminatorValue); } },
                { "securityIdentifier", n => { SecurityIdentifier = n.GetStringValue(); } },
                { "serviceProvisioningErrors", n => { ServiceProvisioningErrors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>(global::Microsoft.Graph.Beta.Models.ServiceProvisioningError.CreateFromDiscriminatorValue)?.AsList(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.UserSettings>(global::Microsoft.Graph.Beta.Models.UserSettings.CreateFromDiscriminatorValue); } },
                { "showInAddressList", n => { ShowInAddressList = n.GetBoolValue(); } },
                { "signInActivity", n => { SignInActivity = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.SignInActivity>(global::Microsoft.Graph.Beta.Models.SignInActivity.CreateFromDiscriminatorValue); } },
                { "signInSessionsValidFromDateTime", n => { SignInSessionsValidFromDateTime = n.GetDateTimeOffsetValue(); } },
                { "skills", n => { Skills = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "solutions", n => { Solutions = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.UserSolutionRoot>(global::Microsoft.Graph.Beta.Models.UserSolutionRoot.CreateFromDiscriminatorValue); } },
                { "sponsors", n => { Sponsors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "streetAddress", n => { StreetAddress = n.GetStringValue(); } },
                { "surname", n => { Surname = n.GetStringValue(); } },
                { "teamwork", n => { Teamwork = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.UserTeamwork>(global::Microsoft.Graph.Beta.Models.UserTeamwork.CreateFromDiscriminatorValue); } },
                { "todo", n => { Todo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Todo>(global::Microsoft.Graph.Beta.Models.Todo.CreateFromDiscriminatorValue); } },
                { "transitiveMemberOf", n => { TransitiveMemberOf = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "transitiveReports", n => { TransitiveReports = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "usageLocation", n => { UsageLocation = n.GetStringValue(); } },
                { "usageRights", n => { UsageRights = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.UsageRight>(global::Microsoft.Graph.Beta.Models.UsageRight.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
                { "userType", n => { UserType = n.GetStringValue(); } },
                { "virtualEvents", n => { VirtualEvents = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.UserVirtualEventsRoot>(global::Microsoft.Graph.Beta.Models.UserVirtualEventsRoot.CreateFromDiscriminatorValue); } },
                { "windowsInformationProtectionDeviceRegistrations", n => { WindowsInformationProtectionDeviceRegistrations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.WindowsInformationProtectionDeviceRegistration>(global::Microsoft.Graph.Beta.Models.WindowsInformationProtectionDeviceRegistration.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("aboutMe", AboutMe);
            writer.WriteBoolValue("accountEnabled", AccountEnabled);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.UserActivity>("activities", Activities);
            writer.WriteStringValue("ageGroup", AgeGroup);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AgreementAcceptance>("agreementAcceptances", AgreementAcceptances);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.UserAnalytics>("analytics", Analytics);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AppConsentRequest>("appConsentRequestsForApproval", AppConsentRequestsForApproval);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ServicePrincipal>("appRoleAssignedResources", AppRoleAssignedResources);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>("appRoleAssignments", AppRoleAssignments);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Approval>("approvals", Approvals);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignedLicense>("assignedLicenses", AssignedLicenses);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignedPlan>("assignedPlans", AssignedPlans);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Authentication>("authentication", Authentication);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.AuthorizationInfo>("authorizationInfo", AuthorizationInfo);
            writer.WriteDateTimeOffsetValue("birthday", Birthday);
            writer.WriteCollectionOfPrimitiveValues<string>("businessPhones", BusinessPhones);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Calendar>("calendar", Calendar);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CalendarGroup>("calendarGroups", CalendarGroups);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Calendar>("calendars", Calendars);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Event>("calendarView", CalendarView);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Chat>("chats", Chats);
            writer.WriteStringValue("city", City);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.CloudClipboardRoot>("cloudClipboard", CloudClipboard);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CloudPC>("cloudPCs", CloudPCs);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.CloudRealtimeCommunicationInfo>("cloudRealtimeCommunicationInfo", CloudRealtimeCommunicationInfo);
            writer.WriteStringValue("companyName", CompanyName);
            writer.WriteStringValue("consentProvidedForMinor", ConsentProvidedForMinor);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ContactFolder>("contactFolders", ContactFolders);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Contact>("contacts", Contacts);
            writer.WriteStringValue("country", Country);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("createdObjects", CreatedObjects);
            writer.WriteStringValue("creationType", CreationType);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.CustomSecurityAttributeValue>("customSecurityAttributes", CustomSecurityAttributes);
            writer.WriteStringValue("department", Department);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceEnrollmentConfiguration>("deviceEnrollmentConfigurations", DeviceEnrollmentConfigurations);
            writer.WriteIntValue("deviceEnrollmentLimit", DeviceEnrollmentLimit);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceKey>("deviceKeys", DeviceKeys);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DeviceManagementTroubleshootingEvent>("deviceManagementTroubleshootingEvents", DeviceManagementTroubleshootingEvents);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Device>("devices", Devices);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("directReports", DirectReports);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Drive>("drive", Drive);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Drive>("drives", Drives);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.EmployeeExperienceUser>("employeeExperience", EmployeeExperience);
            writer.WriteDateTimeOffsetValue("employeeHireDate", EmployeeHireDate);
            writer.WriteStringValue("employeeId", EmployeeId);
            writer.WriteDateTimeOffsetValue("employeeLeaveDateTime", EmployeeLeaveDateTime);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.EmployeeOrgData>("employeeOrgData", EmployeeOrgData);
            writer.WriteStringValue("employeeType", EmployeeType);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Event>("events", Events);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Extension>("extensions", Extensions);
            writer.WriteStringValue("externalUserState", ExternalUserState);
            writer.WriteStringValue("externalUserStateChangeDateTime", ExternalUserStateChangeDateTime);
            writer.WriteStringValue("faxNumber", FaxNumber);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Site>("followedSites", FollowedSites);
            writer.WriteStringValue("givenName", GivenName);
            writer.WriteDateTimeOffsetValue("hireDate", HireDate);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ObjectIdentity>("identities", Identities);
            writer.WriteCollectionOfPrimitiveValues<string>("imAddresses", ImAddresses);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.InferenceClassification>("inferenceClassification", InferenceClassification);
            writer.WriteCollectionOfPrimitiveValues<string>("infoCatalogs", InfoCatalogs);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.InformationProtection>("informationProtection", InformationProtection);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ItemInsights>("insights", Insights);
            writer.WriteCollectionOfPrimitiveValues<string>("interests", Interests);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.DirectoryObject>("invitedBy", InvitedBy);
            writer.WriteBoolValue("isLicenseReconciliationNeeded", IsLicenseReconciliationNeeded);
            writer.WriteBoolValue("isManagementRestricted", IsManagementRestricted);
            writer.WriteBoolValue("isResourceAccount", IsResourceAccount);
            writer.WriteStringValue("jobTitle", JobTitle);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Group>("joinedGroups", JoinedGroups);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Team>("joinedTeams", JoinedTeams);
            writer.WriteDateTimeOffsetValue("lastPasswordChangeDateTime", LastPasswordChangeDateTime);
            writer.WriteStringValue("legalAgeGroupClassification", LegalAgeGroupClassification);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.LicenseAssignmentState>("licenseAssignmentStates", LicenseAssignmentStates);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.LicenseDetails>("licenseDetails", LicenseDetails);
            writer.WriteStringValue("mail", Mail);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.MailboxSettings>("mailboxSettings", MailboxSettings);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MailFolder>("mailFolders", MailFolders);
            writer.WriteStringValue("mailNickname", MailNickname);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedAppLogCollectionRequest>("managedAppLogCollectionRequests", ManagedAppLogCollectionRequests);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedAppRegistration>("managedAppRegistrations", ManagedAppRegistrations);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedDevice>("managedDevices", ManagedDevices);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.DirectoryObject>("manager", Manager);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("memberOf", MemberOf);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Message>("messages", Messages);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MobileAppIntentAndState>("mobileAppIntentAndStates", MobileAppIntentAndStates);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.MobileAppTroubleshootingEvent>("mobileAppTroubleshootingEvents", MobileAppTroubleshootingEvents);
            writer.WriteStringValue("mobilePhone", MobilePhone);
            writer.WriteStringValue("mySite", MySite);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Notification>("notifications", Notifications);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.OAuth2PermissionGrant>("oauth2PermissionGrants", Oauth2PermissionGrants);
            writer.WriteStringValue("officeLocation", OfficeLocation);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Onenote>("onenote", Onenote);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.OnlineMeeting>("onlineMeetings", OnlineMeetings);
            writer.WriteStringValue("onPremisesDistinguishedName", OnPremisesDistinguishedName);
            writer.WriteStringValue("onPremisesDomainName", OnPremisesDomainName);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.OnPremisesExtensionAttributes>("onPremisesExtensionAttributes", OnPremisesExtensionAttributes);
            writer.WriteStringValue("onPremisesImmutableId", OnPremisesImmutableId);
            writer.WriteDateTimeOffsetValue("onPremisesLastSyncDateTime", OnPremisesLastSyncDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>("onPremisesProvisioningErrors", OnPremisesProvisioningErrors);
            writer.WriteStringValue("onPremisesSamAccountName", OnPremisesSamAccountName);
            writer.WriteStringValue("onPremisesSecurityIdentifier", OnPremisesSecurityIdentifier);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.OnPremisesSipInfo>("onPremisesSipInfo", OnPremisesSipInfo);
            writer.WriteBoolValue("onPremisesSyncEnabled", OnPremisesSyncEnabled);
            writer.WriteStringValue("onPremisesUserPrincipalName", OnPremisesUserPrincipalName);
            writer.WriteCollectionOfPrimitiveValues<string>("otherMails", OtherMails);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.OutlookUser>("outlook", Outlook);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("ownedDevices", OwnedDevices);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("ownedObjects", OwnedObjects);
            writer.WriteStringValue("passwordPolicies", PasswordPolicies);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PasswordProfile>("passwordProfile", PasswordProfile);
            writer.WriteCollectionOfPrimitiveValues<string>("pastProjects", PastProjects);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AccessReviewInstance>("pendingAccessReviewInstances", PendingAccessReviewInstances);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Person>("people", People);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>("permissionGrants", PermissionGrants);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ProfilePhoto>("photo", Photo);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ProfilePhoto>("photos", Photos);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PlannerUser>("planner", Planner);
            writer.WriteStringValue("postalCode", PostalCode);
            writer.WriteStringValue("preferredDataLocation", PreferredDataLocation);
            writer.WriteStringValue("preferredLanguage", PreferredLanguage);
            writer.WriteStringValue("preferredName", PreferredName);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Presence>("presence", Presence);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.UserPrint>("print", Print);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Profile>("profile", Profile);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ProvisionedPlan>("provisionedPlans", ProvisionedPlans);
            writer.WriteCollectionOfPrimitiveValues<string>("proxyAddresses", ProxyAddresses);
            writer.WriteDateTimeOffsetValue("refreshTokensValidFromDateTime", RefreshTokensValidFromDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("registeredDevices", RegisteredDevices);
            writer.WriteCollectionOfPrimitiveValues<string>("responsibilities", Responsibilities);
            writer.WriteCollectionOfPrimitiveValues<string>("schools", Schools);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ScopedRoleMembership>("scopedRoleMemberOf", ScopedRoleMemberOf);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Security.Security>("security", Security);
            writer.WriteStringValue("securityIdentifier", SecurityIdentifier);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>("serviceProvisioningErrors", ServiceProvisioningErrors);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.UserSettings>("settings", Settings);
            writer.WriteBoolValue("showInAddressList", ShowInAddressList);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.SignInActivity>("signInActivity", SignInActivity);
            writer.WriteDateTimeOffsetValue("signInSessionsValidFromDateTime", SignInSessionsValidFromDateTime);
            writer.WriteCollectionOfPrimitiveValues<string>("skills", Skills);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.UserSolutionRoot>("solutions", Solutions);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("sponsors", Sponsors);
            writer.WriteStringValue("state", State);
            writer.WriteStringValue("streetAddress", StreetAddress);
            writer.WriteStringValue("surname", Surname);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.UserTeamwork>("teamwork", Teamwork);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Todo>("todo", Todo);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("transitiveMemberOf", TransitiveMemberOf);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("transitiveReports", TransitiveReports);
            writer.WriteStringValue("usageLocation", UsageLocation);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.UsageRight>("usageRights", UsageRights);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
            writer.WriteStringValue("userType", UserType);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.UserVirtualEventsRoot>("virtualEvents", VirtualEvents);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.WindowsInformationProtectionDeviceRegistration>("windowsInformationProtectionDeviceRegistrations", WindowsInformationProtectionDeviceRegistrations);
        }
    }
}
#pragma warning restore CS0618
