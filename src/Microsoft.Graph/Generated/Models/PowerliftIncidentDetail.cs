// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// This type contains specific information regarding a Powerlift incident, such as when it was uploaded, the platform the device was on, and a string array of files associated to the incident.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PowerliftIncidentDetail : IAdditionalDataHolder, IBackedModel, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>TThe name of the application for which the diagnostic is collected. Example: com.microsoft.CompanyPortal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApplicationName
        {
            get { return BackingStore?.Get<string?>("applicationName"); }
            set { BackingStore?.Set("applicationName", value); }
        }
#nullable restore
#else
        public string ApplicationName
        {
            get { return BackingStore?.Get<string>("applicationName"); }
            set { BackingStore?.Set("applicationName", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The version of the application for which the diagnostic is collected. Example: 5.2203.1</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientApplicationVersion
        {
            get { return BackingStore?.Get<string?>("clientApplicationVersion"); }
            set { BackingStore?.Set("clientApplicationVersion", value); }
        }
#nullable restore
#else
        public string ClientApplicationVersion
        {
            get { return BackingStore?.Get<string>("clientApplicationVersion"); }
            set { BackingStore?.Set("clientApplicationVersion", value); }
        }
#endif
        /// <summary>The time the app diagnostic was created. The value cannot be modified and is automatically populated when the diagnostic is uploaded. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time.Example: 2022-04-19T17:24:45.313Z</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The unique app diagnostic identifier as a user friendly 8 character hexadecimal string. This id is smaller compared to the powerliftId. Th Example: 8520467A</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EasyId
        {
            get { return BackingStore?.Get<string?>("easyId"); }
            set { BackingStore?.Set("easyId", value); }
        }
#nullable restore
#else
        public string EasyId
        {
            get { return BackingStore?.Get<string>("easyId"); }
            set { BackingStore?.Set("easyId", value); }
        }
#endif
        /// <summary>A list of files that are associated with the diagnostic.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FileNames
        {
            get { return BackingStore?.Get<List<string>?>("fileNames"); }
            set { BackingStore?.Set("fileNames", value); }
        }
#nullable restore
#else
        public List<string> FileNames
        {
            get { return BackingStore?.Get<List<string>>("fileNames"); }
            set { BackingStore?.Set("fileNames", value); }
        }
#endif
        /// <summary>The locale information of the application for which the diagnostic is collected. Example: en-US</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Locale
        {
            get { return BackingStore?.Get<string?>("locale"); }
            set { BackingStore?.Set("locale", value); }
        }
#nullable restore
#else
        public string Locale
        {
            get { return BackingStore?.Get<string>("locale"); }
            set { BackingStore?.Set("locale", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The operating system of the device from which diagnostics are collected. Example: iOS</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlatformDisplayName
        {
            get { return BackingStore?.Get<string?>("platformDisplayName"); }
            set { BackingStore?.Set("platformDisplayName", value); }
        }
#nullable restore
#else
        public string PlatformDisplayName
        {
            get { return BackingStore?.Get<string>("platformDisplayName"); }
            set { BackingStore?.Set("platformDisplayName", value); }
        }
#endif
        /// <summary>The unique identifier of the app diagnostic. This id is assigned to a diagnostic when it is uploaded to Powerlift. Example: 8520467a-49a9-44a4-8447-8dfb8bec6726</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PowerliftId
        {
            get { return BackingStore?.Get<string?>("powerliftId"); }
            set { BackingStore?.Set("powerliftId", value); }
        }
#nullable restore
#else
        public string PowerliftId
        {
            get { return BackingStore?.Get<string>("powerliftId"); }
            set { BackingStore?.Set("powerliftId", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.PowerliftIncidentDetail"/> and sets the default values.
        /// </summary>
        public PowerliftIncidentDetail()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.PowerliftIncidentDetail"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.PowerliftIncidentDetail CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.PowerliftIncidentDetail();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "applicationName", n => { ApplicationName = n.GetStringValue(); } },
                { "clientApplicationVersion", n => { ClientApplicationVersion = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "easyId", n => { EasyId = n.GetStringValue(); } },
                { "fileNames", n => { FileNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "locale", n => { Locale = n.GetStringValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "platformDisplayName", n => { PlatformDisplayName = n.GetStringValue(); } },
                { "powerliftId", n => { PowerliftId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("applicationName", ApplicationName);
            writer.WriteStringValue("clientApplicationVersion", ClientApplicationVersion);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("easyId", EasyId);
            writer.WriteCollectionOfPrimitiveValues<string>("fileNames", FileNames);
            writer.WriteStringValue("locale", Locale);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteStringValue("platformDisplayName", PlatformDisplayName);
            writer.WriteStringValue("powerliftId", PowerliftId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
