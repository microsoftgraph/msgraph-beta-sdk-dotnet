// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class TeamworkSoftwareUpdateHealth : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>The software update available for the admin agent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus? AdminAgentSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus?>("adminAgentSoftwareUpdateStatus"); }
            set { BackingStore?.Set("adminAgentSoftwareUpdateStatus", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus AdminAgentSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("adminAgentSoftwareUpdateStatus"); }
            set { BackingStore?.Set("adminAgentSoftwareUpdateStatus", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The software update available for the company portal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus? CompanyPortalSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus?>("companyPortalSoftwareUpdateStatus"); }
            set { BackingStore?.Set("companyPortalSoftwareUpdateStatus", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus CompanyPortalSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("companyPortalSoftwareUpdateStatus"); }
            set { BackingStore?.Set("companyPortalSoftwareUpdateStatus", value); }
        }
#endif
        /// <summary>The software update available for the firmware.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus? FirmwareSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus?>("firmwareSoftwareUpdateStatus"); }
            set { BackingStore?.Set("firmwareSoftwareUpdateStatus", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus FirmwareSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("firmwareSoftwareUpdateStatus"); }
            set { BackingStore?.Set("firmwareSoftwareUpdateStatus", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The software update available for the operating system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus? OperatingSystemSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus?>("operatingSystemSoftwareUpdateStatus"); }
            set { BackingStore?.Set("operatingSystemSoftwareUpdateStatus", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus OperatingSystemSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("operatingSystemSoftwareUpdateStatus"); }
            set { BackingStore?.Set("operatingSystemSoftwareUpdateStatus", value); }
        }
#endif
        /// <summary>The software update available for the partner agent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus? PartnerAgentSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus?>("partnerAgentSoftwareUpdateStatus"); }
            set { BackingStore?.Set("partnerAgentSoftwareUpdateStatus", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus PartnerAgentSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("partnerAgentSoftwareUpdateStatus"); }
            set { BackingStore?.Set("partnerAgentSoftwareUpdateStatus", value); }
        }
#endif
        /// <summary>The software update available for the Teams client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus? TeamsClientSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus?>("teamsClientSoftwareUpdateStatus"); }
            set { BackingStore?.Set("teamsClientSoftwareUpdateStatus", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus TeamsClientSoftwareUpdateStatus
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("teamsClientSoftwareUpdateStatus"); }
            set { BackingStore?.Set("teamsClientSoftwareUpdateStatus", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth"/> and sets the default values.
        /// </summary>
        public TeamworkSoftwareUpdateHealth()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateHealth();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adminAgentSoftwareUpdateStatus", n => { AdminAgentSoftwareUpdateStatus = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>(Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus.CreateFromDiscriminatorValue); } },
                { "companyPortalSoftwareUpdateStatus", n => { CompanyPortalSoftwareUpdateStatus = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>(Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus.CreateFromDiscriminatorValue); } },
                { "firmwareSoftwareUpdateStatus", n => { FirmwareSoftwareUpdateStatus = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>(Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus.CreateFromDiscriminatorValue); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "operatingSystemSoftwareUpdateStatus", n => { OperatingSystemSoftwareUpdateStatus = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>(Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus.CreateFromDiscriminatorValue); } },
                { "partnerAgentSoftwareUpdateStatus", n => { PartnerAgentSoftwareUpdateStatus = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>(Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus.CreateFromDiscriminatorValue); } },
                { "teamsClientSoftwareUpdateStatus", n => { TeamsClientSoftwareUpdateStatus = n.GetObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>(Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("adminAgentSoftwareUpdateStatus", AdminAgentSoftwareUpdateStatus);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("companyPortalSoftwareUpdateStatus", CompanyPortalSoftwareUpdateStatus);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("firmwareSoftwareUpdateStatus", FirmwareSoftwareUpdateStatus);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("operatingSystemSoftwareUpdateStatus", OperatingSystemSoftwareUpdateStatus);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("partnerAgentSoftwareUpdateStatus", PartnerAgentSoftwareUpdateStatus);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TeamworkSoftwareUpdateStatus>("teamsClientSoftwareUpdateStatus", TeamsClientSoftwareUpdateStatus);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
