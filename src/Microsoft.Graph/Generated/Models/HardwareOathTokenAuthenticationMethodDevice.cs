// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class HardwareOathTokenAuthenticationMethodDevice : global::Microsoft.Graph.Beta.Models.AuthenticationMethodDevice, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>User the token is assigned to. Nullable. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Identity? AssignedTo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Identity?>("assignedTo"); }
            set { BackingStore?.Set("assignedTo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Identity AssignedTo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Identity>("assignedTo"); }
            set { BackingStore?.Set("assignedTo", value); }
        }
#endif
        /// <summary>Assign the hardware OATH token to a user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.User? AssignTo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.User?>("assignTo"); }
            set { BackingStore?.Set("assignTo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.User AssignTo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.User>("assignTo"); }
            set { BackingStore?.Set("assignTo", value); }
        }
#endif
        /// <summary>Hash function of the hardrware token. The possible values are: hmacsha1 or hmacsha256. Default value is: hmacsha1. Supports $filter (eq).</summary>
        public global::Microsoft.Graph.Beta.Models.HardwareOathTokenHashFunction? HashFunction
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.HardwareOathTokenHashFunction?>("hashFunction"); }
            set { BackingStore?.Set("hashFunction", value); }
        }
        /// <summary>The date and time the authentication method was last used by the user. Read-only. Optional. This optional value is null if the authentication method doesn&apos;t populate it. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? LastUsedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastUsedDateTime"); }
            set { BackingStore?.Set("lastUsedDateTime", value); }
        }
        /// <summary>Manufacturer name of the hardware token. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Manufacturer
        {
            get { return BackingStore?.Get<string?>("manufacturer"); }
            set { BackingStore?.Set("manufacturer", value); }
        }
#nullable restore
#else
        public string Manufacturer
        {
            get { return BackingStore?.Get<string>("manufacturer"); }
            set { BackingStore?.Set("manufacturer", value); }
        }
#endif
        /// <summary>Model name of the hardware token. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model
        {
            get { return BackingStore?.Get<string?>("model"); }
            set { BackingStore?.Set("model", value); }
        }
#nullable restore
#else
        public string Model
        {
            get { return BackingStore?.Get<string>("model"); }
            set { BackingStore?.Set("model", value); }
        }
#endif
        /// <summary>Secret key of the specific hardware token, provided by the vendor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecretKey
        {
            get { return BackingStore?.Get<string?>("secretKey"); }
            set { BackingStore?.Set("secretKey", value); }
        }
#nullable restore
#else
        public string SecretKey
        {
            get { return BackingStore?.Get<string>("secretKey"); }
            set { BackingStore?.Set("secretKey", value); }
        }
#endif
        /// <summary>Serial number of the specific hardware token, often found on the back of the device. Supports $select and $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber
        {
            get { return BackingStore?.Get<string?>("serialNumber"); }
            set { BackingStore?.Set("serialNumber", value); }
        }
#nullable restore
#else
        public string SerialNumber
        {
            get { return BackingStore?.Get<string>("serialNumber"); }
            set { BackingStore?.Set("serialNumber", value); }
        }
#endif
        /// <summary>Status of the hardware OATH token.The possible values are: available, assigned, activated, failedActivation. Supports $filter(eq).</summary>
        public global::Microsoft.Graph.Beta.Models.HardwareOathTokenStatus? Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.HardwareOathTokenStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>Refresh interval of the 6-digit verification code, in seconds. The possible values are: 30 or 60. Supports $filter (eq).</summary>
        public int? TimeIntervalInSeconds
        {
            get { return BackingStore?.Get<int?>("timeIntervalInSeconds"); }
            set { BackingStore?.Set("timeIntervalInSeconds", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.HardwareOathTokenAuthenticationMethodDevice"/> and sets the default values.
        /// </summary>
        public HardwareOathTokenAuthenticationMethodDevice() : base()
        {
            OdataType = "#microsoft.graph.hardwareOathTokenAuthenticationMethodDevice";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.HardwareOathTokenAuthenticationMethodDevice"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.HardwareOathTokenAuthenticationMethodDevice CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.HardwareOathTokenAuthenticationMethodDevice();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "assignTo", n => { AssignTo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.User>(global::Microsoft.Graph.Beta.Models.User.CreateFromDiscriminatorValue); } },
                { "assignedTo", n => { AssignedTo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Identity>(global::Microsoft.Graph.Beta.Models.Identity.CreateFromDiscriminatorValue); } },
                { "hashFunction", n => { HashFunction = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.HardwareOathTokenHashFunction>(); } },
                { "lastUsedDateTime", n => { LastUsedDateTime = n.GetDateTimeOffsetValue(); } },
                { "manufacturer", n => { Manufacturer = n.GetStringValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
                { "secretKey", n => { SecretKey = n.GetStringValue(); } },
                { "serialNumber", n => { SerialNumber = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.HardwareOathTokenStatus>(); } },
                { "timeIntervalInSeconds", n => { TimeIntervalInSeconds = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Identity>("assignedTo", AssignedTo);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.User>("assignTo", AssignTo);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.HardwareOathTokenHashFunction>("hashFunction", HashFunction);
            writer.WriteDateTimeOffsetValue("lastUsedDateTime", LastUsedDateTime);
            writer.WriteStringValue("manufacturer", Manufacturer);
            writer.WriteStringValue("model", Model);
            writer.WriteStringValue("secretKey", SecretKey);
            writer.WriteStringValue("serialNumber", SerialNumber);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.HardwareOathTokenStatus>("status", Status);
            writer.WriteIntValue("timeIntervalInSeconds", TimeIntervalInSeconds);
        }
    }
}
#pragma warning restore CS0618
