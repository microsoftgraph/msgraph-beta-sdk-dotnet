// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// The user experience analytics battery health device performance entity contains device level battery information.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UserExperienceAnalyticsBatteryHealthDevicePerformance : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>Estimated battery age. Unit in days. Valid values 0 to 2147483647</summary>
        public int? BatteryAgeInDays
        {
            get { return BackingStore?.Get<int?>("batteryAgeInDays"); }
            set { BackingStore?.Set("batteryAgeInDays", value); }
        }
        /// <summary>Properties (maxCapacity and cycleCount) related to all batteries of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsDeviceBatteryDetail>? DeviceBatteriesDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsDeviceBatteryDetail>?>("deviceBatteriesDetails"); }
            set { BackingStore?.Set("deviceBatteriesDetails", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsDeviceBatteryDetail> DeviceBatteriesDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsDeviceBatteryDetail>>("deviceBatteriesDetails"); }
            set { BackingStore?.Set("deviceBatteriesDetails", value); }
        }
#endif
        /// <summary>Number of batteries in a user device. Valid values 0 to 2147483647</summary>
        public int? DeviceBatteryCount
        {
            get { return BackingStore?.Get<int?>("deviceBatteryCount"); }
            set { BackingStore?.Set("deviceBatteryCount", value); }
        }
        /// <summary>A weighted average of a deviceâ€™s maximum capacity score and runtime estimate score. Values range from 0-100. Valid values 0 to 2147483647</summary>
        public int? DeviceBatteryHealthScore
        {
            get { return BackingStore?.Get<int?>("deviceBatteryHealthScore"); }
            set { BackingStore?.Set("deviceBatteryHealthScore", value); }
        }
        /// <summary>Tags for computed information on how battery on the device is behaving. E.g. newbattery, batterycapacityred, designcapacityzero, etc.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DeviceBatteryTags
        {
            get { return BackingStore?.Get<List<string>?>("deviceBatteryTags"); }
            set { BackingStore?.Set("deviceBatteryTags", value); }
        }
#nullable restore
#else
        public List<string> DeviceBatteryTags
        {
            get { return BackingStore?.Get<List<string>>("deviceBatteryTags"); }
            set { BackingStore?.Set("deviceBatteryTags", value); }
        }
#endif
        /// <summary>The unique identifier of the device, Intune DeviceID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId
        {
            get { return BackingStore?.Get<string?>("deviceId"); }
            set { BackingStore?.Set("deviceId", value); }
        }
#nullable restore
#else
        public string DeviceId
        {
            get { return BackingStore?.Get<string>("deviceId"); }
            set { BackingStore?.Set("deviceId", value); }
        }
#endif
        /// <summary>The manufacturer name of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceManufacturerName
        {
            get { return BackingStore?.Get<string?>("deviceManufacturerName"); }
            set { BackingStore?.Set("deviceManufacturerName", value); }
        }
#nullable restore
#else
        public string DeviceManufacturerName
        {
            get { return BackingStore?.Get<string>("deviceManufacturerName"); }
            set { BackingStore?.Set("deviceManufacturerName", value); }
        }
#endif
        /// <summary>The model name of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceModelName
        {
            get { return BackingStore?.Get<string?>("deviceModelName"); }
            set { BackingStore?.Set("deviceModelName", value); }
        }
#nullable restore
#else
        public string DeviceModelName
        {
            get { return BackingStore?.Get<string>("deviceModelName"); }
            set { BackingStore?.Set("deviceModelName", value); }
        }
#endif
        /// <summary>Device friendly name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceName
        {
            get { return BackingStore?.Get<string?>("deviceName"); }
            set { BackingStore?.Set("deviceName", value); }
        }
#nullable restore
#else
        public string DeviceName
        {
            get { return BackingStore?.Get<string>("deviceName"); }
            set { BackingStore?.Set("deviceName", value); }
        }
#endif
        /// <summary>The estimated runtime of the device when the battery is fully charged. Unit in minutes. Valid values 0 to 2147483647</summary>
        public int? EstimatedRuntimeInMinutes
        {
            get { return BackingStore?.Get<int?>("estimatedRuntimeInMinutes"); }
            set { BackingStore?.Set("estimatedRuntimeInMinutes", value); }
        }
        /// <summary>Number of times the battery has been discharged an amount that equals 100% of its capacity, but not necessarily by discharging it from 100% to 0%. Valid values 0 to 2147483647</summary>
        public int? FullBatteryDrainCount
        {
            get { return BackingStore?.Get<int?>("fullBatteryDrainCount"); }
            set { BackingStore?.Set("fullBatteryDrainCount", value); }
        }
        /// <summary>The healthStatus property</summary>
        public global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsHealthState? HealthStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsHealthState?>("healthStatus"); }
            set { BackingStore?.Set("healthStatus", value); }
        }
        /// <summary>The manufacturer name of the device. Deprecated in favor of DeviceManufacturerName.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Manufacturer
        {
            get { return BackingStore?.Get<string?>("manufacturer"); }
            set { BackingStore?.Set("manufacturer", value); }
        }
#nullable restore
#else
        public string Manufacturer
        {
            get { return BackingStore?.Get<string>("manufacturer"); }
            set { BackingStore?.Set("manufacturer", value); }
        }
#endif
        /// <summary>Ratio of current capacity and design capacity of the battery with the lowest capacity. Unit in percentage and values range from 0-100. Valid values 0 to 2147483647</summary>
        public int? MaxCapacityPercentage
        {
            get { return BackingStore?.Get<int?>("maxCapacityPercentage"); }
            set { BackingStore?.Set("maxCapacityPercentage", value); }
        }
        /// <summary>The model name of the device. Deprecated in favor of DeviceModelName.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model
        {
            get { return BackingStore?.Get<string?>("model"); }
            set { BackingStore?.Set("model", value); }
        }
#nullable restore
#else
        public string Model
        {
            get { return BackingStore?.Get<string>("model"); }
            set { BackingStore?.Set("model", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsBatteryHealthDevicePerformance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsBatteryHealthDevicePerformance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsBatteryHealthDevicePerformance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "batteryAgeInDays", n => { BatteryAgeInDays = n.GetIntValue(); } },
                { "deviceBatteriesDetails", n => { DeviceBatteriesDetails = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsDeviceBatteryDetail>(global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsDeviceBatteryDetail.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceBatteryCount", n => { DeviceBatteryCount = n.GetIntValue(); } },
                { "deviceBatteryHealthScore", n => { DeviceBatteryHealthScore = n.GetIntValue(); } },
                { "deviceBatteryTags", n => { DeviceBatteryTags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "deviceId", n => { DeviceId = n.GetStringValue(); } },
                { "deviceManufacturerName", n => { DeviceManufacturerName = n.GetStringValue(); } },
                { "deviceModelName", n => { DeviceModelName = n.GetStringValue(); } },
                { "deviceName", n => { DeviceName = n.GetStringValue(); } },
                { "estimatedRuntimeInMinutes", n => { EstimatedRuntimeInMinutes = n.GetIntValue(); } },
                { "fullBatteryDrainCount", n => { FullBatteryDrainCount = n.GetIntValue(); } },
                { "healthStatus", n => { HealthStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsHealthState>(); } },
                { "manufacturer", n => { Manufacturer = n.GetStringValue(); } },
                { "maxCapacityPercentage", n => { MaxCapacityPercentage = n.GetIntValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("batteryAgeInDays", BatteryAgeInDays);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsDeviceBatteryDetail>("deviceBatteriesDetails", DeviceBatteriesDetails);
            writer.WriteIntValue("deviceBatteryCount", DeviceBatteryCount);
            writer.WriteIntValue("deviceBatteryHealthScore", DeviceBatteryHealthScore);
            writer.WriteCollectionOfPrimitiveValues<string>("deviceBatteryTags", DeviceBatteryTags);
            writer.WriteStringValue("deviceId", DeviceId);
            writer.WriteStringValue("deviceManufacturerName", DeviceManufacturerName);
            writer.WriteStringValue("deviceModelName", DeviceModelName);
            writer.WriteStringValue("deviceName", DeviceName);
            writer.WriteIntValue("estimatedRuntimeInMinutes", EstimatedRuntimeInMinutes);
            writer.WriteIntValue("fullBatteryDrainCount", FullBatteryDrainCount);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.UserExperienceAnalyticsHealthState>("healthStatus", HealthStatus);
            writer.WriteStringValue("manufacturer", Manufacturer);
            writer.WriteIntValue("maxCapacityPercentage", MaxCapacityPercentage);
            writer.WriteStringValue("model", Model);
        }
    }
}
#pragma warning restore CS0618
