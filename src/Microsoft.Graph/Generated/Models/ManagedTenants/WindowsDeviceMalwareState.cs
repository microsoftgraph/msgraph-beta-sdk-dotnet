using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace Microsoft.Graph.Beta.Models.ManagedTenants {
    /// <summary>Provides operations to manage the collection of accessReview entities.</summary>
    public class WindowsDeviceMalwareState : Entity, IParsable {
        /// <summary>The additional information URL for the discovered malware. Optional. Read-only.</summary>
        public string AdditionalInformationUrl {
            get { return BackingStore?.Get<string>(nameof(AdditionalInformationUrl)); }
            set { BackingStore?.Set(nameof(AdditionalInformationUrl), value); }
        }
        /// <summary>The number of times the piece of malware has been detected. Optional. Read-only.</summary>
        public int? DetectionCount {
            get { return BackingStore?.Get<int?>(nameof(DetectionCount)); }
            set { BackingStore?.Set(nameof(DetectionCount), value); }
        }
        /// <summary>A flag indicating whether the device has been deleted. Optional. Read-only.</summary>
        public bool? DeviceDeleted {
            get { return BackingStore?.Get<bool?>(nameof(DeviceDeleted)); }
            set { BackingStore?.Set(nameof(DeviceDeleted), value); }
        }
        /// <summary>The date and time the piece of malware was initially detected. Optional. Read-only.</summary>
        public DateTimeOffset? InitialDetectionDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>(nameof(InitialDetectionDateTime)); }
            set { BackingStore?.Set(nameof(InitialDetectionDateTime), value); }
        }
        /// <summary>Date and time the entity was last updated in the multi-tenant management platform. Optional. Read-only.</summary>
        public DateTimeOffset? LastRefreshedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>(nameof(LastRefreshedDateTime)); }
            set { BackingStore?.Set(nameof(LastRefreshedDateTime), value); }
        }
        /// <summary>The date and time the malware state was last changed. Optional. Read-only.</summary>
        public DateTimeOffset? LastStateChangeDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>(nameof(LastStateChangeDateTime)); }
            set { BackingStore?.Set(nameof(LastStateChangeDateTime), value); }
        }
        /// <summary>The category for the detected malware. Optional. Read-only.</summary>
        public string MalwareCategory {
            get { return BackingStore?.Get<string>(nameof(MalwareCategory)); }
            set { BackingStore?.Set(nameof(MalwareCategory), value); }
        }
        /// <summary>The display name for the detected malware. Optional. Read-only.</summary>
        public string MalwareDisplayName {
            get { return BackingStore?.Get<string>(nameof(MalwareDisplayName)); }
            set { BackingStore?.Set(nameof(MalwareDisplayName), value); }
        }
        /// <summary>The execution state for the detected malware. Optional. Read-only.</summary>
        public string MalwareExecutionState {
            get { return BackingStore?.Get<string>(nameof(MalwareExecutionState)); }
            set { BackingStore?.Set(nameof(MalwareExecutionState), value); }
        }
        /// <summary>The unique identifier for the detected malware. Optional. Read-only.</summary>
        public string MalwareId {
            get { return BackingStore?.Get<string>(nameof(MalwareId)); }
            set { BackingStore?.Set(nameof(MalwareId), value); }
        }
        /// <summary>The severity for the detected malware. Optional. Read-only.</summary>
        public string MalwareSeverity {
            get { return BackingStore?.Get<string>(nameof(MalwareSeverity)); }
            set { BackingStore?.Set(nameof(MalwareSeverity), value); }
        }
        /// <summary>The threat state for the detected malware. Optional. Read-only.</summary>
        public string MalwareThreatState {
            get { return BackingStore?.Get<string>(nameof(MalwareThreatState)); }
            set { BackingStore?.Set(nameof(MalwareThreatState), value); }
        }
        /// <summary>The identifier for the managed device where the malware was detected. Optional. Read-only.</summary>
        public string ManagedDeviceId {
            get { return BackingStore?.Get<string>(nameof(ManagedDeviceId)); }
            set { BackingStore?.Set(nameof(ManagedDeviceId), value); }
        }
        /// <summary>The display name for the managed device where the malware was detected. Optional. Read-only.</summary>
        public string ManagedDeviceName {
            get { return BackingStore?.Get<string>(nameof(ManagedDeviceName)); }
            set { BackingStore?.Set(nameof(ManagedDeviceName), value); }
        }
        /// <summary>The display name for the managed tenant. Optional. Read-only.</summary>
        public string TenantDisplayName {
            get { return BackingStore?.Get<string>(nameof(TenantDisplayName)); }
            set { BackingStore?.Set(nameof(TenantDisplayName), value); }
        }
        /// <summary>The Azure Active Directory tenant identifier for the managed tenant. Optional. Read-only.</summary>
        public string TenantId {
            get { return BackingStore?.Get<string>(nameof(TenantId)); }
            set { BackingStore?.Set(nameof(TenantId), value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        /// </summary>
        public static new WindowsDeviceMalwareState CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WindowsDeviceMalwareState();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"additionalInformationUrl", n => { AdditionalInformationUrl = n.GetStringValue(); } },
                {"detectionCount", n => { DetectionCount = n.GetIntValue(); } },
                {"deviceDeleted", n => { DeviceDeleted = n.GetBoolValue(); } },
                {"initialDetectionDateTime", n => { InitialDetectionDateTime = n.GetDateTimeOffsetValue(); } },
                {"lastRefreshedDateTime", n => { LastRefreshedDateTime = n.GetDateTimeOffsetValue(); } },
                {"lastStateChangeDateTime", n => { LastStateChangeDateTime = n.GetDateTimeOffsetValue(); } },
                {"malwareCategory", n => { MalwareCategory = n.GetStringValue(); } },
                {"malwareDisplayName", n => { MalwareDisplayName = n.GetStringValue(); } },
                {"malwareExecutionState", n => { MalwareExecutionState = n.GetStringValue(); } },
                {"malwareId", n => { MalwareId = n.GetStringValue(); } },
                {"malwareSeverity", n => { MalwareSeverity = n.GetStringValue(); } },
                {"malwareThreatState", n => { MalwareThreatState = n.GetStringValue(); } },
                {"managedDeviceId", n => { ManagedDeviceId = n.GetStringValue(); } },
                {"managedDeviceName", n => { ManagedDeviceName = n.GetStringValue(); } },
                {"tenantDisplayName", n => { TenantDisplayName = n.GetStringValue(); } },
                {"tenantId", n => { TenantId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("additionalInformationUrl", AdditionalInformationUrl);
            writer.WriteIntValue("detectionCount", DetectionCount);
            writer.WriteBoolValue("deviceDeleted", DeviceDeleted);
            writer.WriteDateTimeOffsetValue("initialDetectionDateTime", InitialDetectionDateTime);
            writer.WriteDateTimeOffsetValue("lastRefreshedDateTime", LastRefreshedDateTime);
            writer.WriteDateTimeOffsetValue("lastStateChangeDateTime", LastStateChangeDateTime);
            writer.WriteStringValue("malwareCategory", MalwareCategory);
            writer.WriteStringValue("malwareDisplayName", MalwareDisplayName);
            writer.WriteStringValue("malwareExecutionState", MalwareExecutionState);
            writer.WriteStringValue("malwareId", MalwareId);
            writer.WriteStringValue("malwareSeverity", MalwareSeverity);
            writer.WriteStringValue("malwareThreatState", MalwareThreatState);
            writer.WriteStringValue("managedDeviceId", ManagedDeviceId);
            writer.WriteStringValue("managedDeviceName", ManagedDeviceName);
            writer.WriteStringValue("tenantDisplayName", TenantDisplayName);
            writer.WriteStringValue("tenantId", TenantId);
        }
    }
}
