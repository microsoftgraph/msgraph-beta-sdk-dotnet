// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.ManagedTenants
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class TenantCustomizedInformation : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Describes the relationship between the Managed Services Provider and the managed tenant; for example, Managed, Co-managed, Licensing. The maximum length is 250 characters. Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessRelationship
        {
            get { return BackingStore?.Get<string?>("businessRelationship"); }
            set { BackingStore?.Set("businessRelationship", value); }
        }
#nullable restore
#else
        public string BusinessRelationship
        {
            get { return BackingStore?.Get<string>("businessRelationship"); }
            set { BackingStore?.Set("businessRelationship", value); }
        }
#endif
        /// <summary>Contains the compliance requirements for the customer tenant; for example, HIPPA, NIST, CMMC. The maximum length is 250 characters per compliance requirement. Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ComplianceRequirements
        {
            get { return BackingStore?.Get<List<string>?>("complianceRequirements"); }
            set { BackingStore?.Set("complianceRequirements", value); }
        }
#nullable restore
#else
        public List<string> ComplianceRequirements
        {
            get { return BackingStore?.Get<List<string>>("complianceRequirements"); }
            set { BackingStore?.Set("complianceRequirements", value); }
        }
#endif
        /// <summary>The collection of contacts for the managed tenant. Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantContactInformation>? Contacts
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantContactInformation>?>("contacts"); }
            set { BackingStore?.Set("contacts", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantContactInformation> Contacts
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantContactInformation>>("contacts"); }
            set { BackingStore?.Set("contacts", value); }
        }
#endif
        /// <summary>The display name for the managed tenant. Required. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>This is the Managed Services Plans for the customer tenant that the Managed Services Provider manages. The maximum length is 250 characters per managed service plan. Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ManagedServicesPlans
        {
            get { return BackingStore?.Get<List<string>?>("managedServicesPlans"); }
            set { BackingStore?.Set("managedServicesPlans", value); }
        }
#nullable restore
#else
        public List<string> ManagedServicesPlans
        {
            get { return BackingStore?.Get<List<string>>("managedServicesPlans"); }
            set { BackingStore?.Set("managedServicesPlans", value); }
        }
#endif
        /// <summary>A field for the Managed Services Provider technician to input custom text to share notes between technicians within the Managed Service Providers. The maximum length is 5000 characters. Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note
        {
            get { return BackingStore?.Get<string?>("note"); }
            set { BackingStore?.Set("note", value); }
        }
#nullable restore
#else
        public string Note
        {
            get { return BackingStore?.Get<string>("note"); }
            set { BackingStore?.Set("note", value); }
        }
#endif
        /// <summary>The date on which the note field of this entity was last modified. Optional.</summary>
        public DateTimeOffset? NoteLastModifiedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("noteLastModifiedDateTime"); }
            set { BackingStore?.Set("noteLastModifiedDateTime", value); }
        }
        /// <summary>The list of Entra user IDs for users in the Managed Services Provider that manage the relationship with the managed tenant. Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PartnerRelationshipManagerUserIds
        {
            get { return BackingStore?.Get<List<string>?>("partnerRelationshipManagerUserIds"); }
            set { BackingStore?.Set("partnerRelationshipManagerUserIds", value); }
        }
#nullable restore
#else
        public List<string> PartnerRelationshipManagerUserIds
        {
            get { return BackingStore?.Get<List<string>>("partnerRelationshipManagerUserIds"); }
            set { BackingStore?.Set("partnerRelationshipManagerUserIds", value); }
        }
#endif
        /// <summary>The Microsoft Entra tenant identifier for the managed tenant. Optional. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId
        {
            get { return BackingStore?.Get<string?>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#nullable restore
#else
        public string TenantId
        {
            get { return BackingStore?.Get<string>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#endif
        /// <summary>The website for the managed tenant. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Website
        {
            get { return BackingStore?.Get<string?>("website"); }
            set { BackingStore?.Set("website", value); }
        }
#nullable restore
#else
        public string Website
        {
            get { return BackingStore?.Get<string>("website"); }
            set { BackingStore?.Set("website", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantCustomizedInformation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantCustomizedInformation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantCustomizedInformation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "businessRelationship", n => { BusinessRelationship = n.GetStringValue(); } },
                { "complianceRequirements", n => { ComplianceRequirements = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "contacts", n => { Contacts = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantContactInformation>(global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantContactInformation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "managedServicesPlans", n => { ManagedServicesPlans = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "noteLastModifiedDateTime", n => { NoteLastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "partnerRelationshipManagerUserIds", n => { PartnerRelationshipManagerUserIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
                { "website", n => { Website = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("businessRelationship", BusinessRelationship);
            writer.WriteCollectionOfPrimitiveValues<string>("complianceRequirements", ComplianceRequirements);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ManagedTenants.TenantContactInformation>("contacts", Contacts);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteCollectionOfPrimitiveValues<string>("managedServicesPlans", ManagedServicesPlans);
            writer.WriteStringValue("note", Note);
            writer.WriteDateTimeOffsetValue("noteLastModifiedDateTime", NoteLastModifiedDateTime);
            writer.WriteCollectionOfPrimitiveValues<string>("partnerRelationshipManagerUserIds", PartnerRelationshipManagerUserIds);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteStringValue("website", Website);
        }
    }
}
#pragma warning restore CS0618
