// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CustomDataProvidedResourceUploadSession : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The createdDateTime property</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.CustomExtensionData? Data
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CustomExtensionData?>("data"); }
            set { BackingStore?.Set("data", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.CustomExtensionData Data
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CustomExtensionData>("data"); }
            set { BackingStore?.Set("data", value); }
        }
#endif
        /// <summary>The expirationDateTime property</summary>
        public DateTimeOffset? ExpirationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("expirationDateTime"); }
            set { BackingStore?.Set("expirationDateTime", value); }
        }
        /// <summary>The files property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceFile>? Files
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceFile>?>("files"); }
            set { BackingStore?.Set("files", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceFile> Files
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceFile>>("files"); }
            set { BackingStore?.Set("files", value); }
        }
#endif
        /// <summary>The isUploadDone property</summary>
        public bool? IsUploadDone
        {
            get { return BackingStore?.Get<bool?>("isUploadDone"); }
            set { BackingStore?.Set("isUploadDone", value); }
        }
        /// <summary>The source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Source
        {
            get { return BackingStore?.Get<string?>("source"); }
            set { BackingStore?.Set("source", value); }
        }
#nullable restore
#else
        public string Source
        {
            get { return BackingStore?.Get<string>("source"); }
            set { BackingStore?.Set("source", value); }
        }
#endif
        /// <summary>The stats property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStats? Stats
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStats?>("stats"); }
            set { BackingStore?.Set("stats", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStats Stats
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStats>("stats"); }
            set { BackingStore?.Set("stats", value); }
        }
#endif
        /// <summary>The status property</summary>
        public global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStatus? Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type
        {
            get { return BackingStore?.Get<string?>("type"); }
            set { BackingStore?.Set("type", value); }
        }
#nullable restore
#else
        public string Type
        {
            get { return BackingStore?.Get<string>("type"); }
            set { BackingStore?.Set("type", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadSession"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadSession CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadSession();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "data", n => { Data = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.CustomExtensionData>(global::Microsoft.Graph.Beta.Models.CustomExtensionData.CreateFromDiscriminatorValue); } },
                { "expirationDateTime", n => { ExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "files", n => { Files = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceFile>(global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceFile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "isUploadDone", n => { IsUploadDone = n.GetBoolValue(); } },
                { "source", n => { Source = n.GetStringValue(); } },
                { "stats", n => { Stats = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStats>(global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStats.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStatus>(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.CustomExtensionData>("data", Data);
            writer.WriteDateTimeOffsetValue("expirationDateTime", ExpirationDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceFile>("files", Files);
            writer.WriteBoolValue("isUploadDone", IsUploadDone);
            writer.WriteStringValue("source", Source);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStats>("stats", Stats);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CustomDataProvidedResourceUploadStatus>("status", Status);
            writer.WriteStringValue("type", Type);
        }
    }
}
#pragma warning restore CS0618
