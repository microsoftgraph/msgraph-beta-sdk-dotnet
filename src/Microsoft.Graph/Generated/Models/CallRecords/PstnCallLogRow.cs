// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.CallRecords
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PstnCallLogRow : global::Microsoft.Graph.Beta.Models.CallRecords.CallLogRow, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The source of the call duration data. If the call uses a third-party telecommunications operator via the Operator Connect Program, the operator may provide their own call duration data. In this case, the property value is operator. Otherwise, the value is microsoft.</summary>
        public global::Microsoft.Graph.Beta.Models.CallRecords.PstnCallDurationSource? CallDurationSource
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CallRecords.PstnCallDurationSource?>("callDurationSource"); }
            set { BackingStore?.Set("callDurationSource", value); }
        }
        /// <summary>Number of the user or bot who received the call (E.164).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CalleeNumber
        {
            get { return BackingStore?.Get<string?>("calleeNumber"); }
            set { BackingStore?.Set("calleeNumber", value); }
        }
#nullable restore
#else
        public string CalleeNumber
        {
            get { return BackingStore?.Get<string>("calleeNumber"); }
            set { BackingStore?.Set("calleeNumber", value); }
        }
#endif
        /// <summary>Number of the user or bot who made the call (E.164).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallerNumber
        {
            get { return BackingStore?.Get<string?>("callerNumber"); }
            set { BackingStore?.Set("callerNumber", value); }
        }
#nullable restore
#else
        public string CallerNumber
        {
            get { return BackingStore?.Get<string>("callerNumber"); }
            set { BackingStore?.Set("callerNumber", value); }
        }
#endif
        /// <summary>Call identifier. Not guaranteed to be unique.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallId
        {
            get { return BackingStore?.Get<string?>("callId"); }
            set { BackingStore?.Set("callId", value); }
        }
#nullable restore
#else
        public string CallId
        {
            get { return BackingStore?.Get<string>("callId"); }
            set { BackingStore?.Set("callId", value); }
        }
#endif
        /// <summary>Indicates whether the call was a PSTN outbound or inbound call and the type of call such as a call placed by a user or an audio conference.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallType
        {
            get { return BackingStore?.Get<string?>("callType"); }
            set { BackingStore?.Set("callType", value); }
        }
#nullable restore
#else
        public string CallType
        {
            get { return BackingStore?.Get<string>("callType"); }
            set { BackingStore?.Set("callType", value); }
        }
#endif
        /// <summary>Amount of money or cost of the call that is charged to your account.</summary>
        public decimal? Charge
        {
            get { return BackingStore?.Get<decimal?>("charge"); }
            set { BackingStore?.Set("charge", value); }
        }
        /// <summary>Local IPv4 of the client that is retrieved from the operating system of the client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientLocalIpV4Address
        {
            get { return BackingStore?.Get<string?>("clientLocalIpV4Address"); }
            set { BackingStore?.Set("clientLocalIpV4Address", value); }
        }
#nullable restore
#else
        public string ClientLocalIpV4Address
        {
            get { return BackingStore?.Get<string>("clientLocalIpV4Address"); }
            set { BackingStore?.Set("clientLocalIpV4Address", value); }
        }
#endif
        /// <summary>Local IPv6 of the client that is retrieved from the operating system of the client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientLocalIpV6Address
        {
            get { return BackingStore?.Get<string?>("clientLocalIpV6Address"); }
            set { BackingStore?.Set("clientLocalIpV6Address", value); }
        }
#nullable restore
#else
        public string ClientLocalIpV6Address
        {
            get { return BackingStore?.Get<string>("clientLocalIpV6Address"); }
            set { BackingStore?.Set("clientLocalIpV6Address", value); }
        }
#endif
        /// <summary>Public IPv4 of the client that can be used to determine the location of the client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientPublicIpV4Address
        {
            get { return BackingStore?.Get<string?>("clientPublicIpV4Address"); }
            set { BackingStore?.Set("clientPublicIpV4Address", value); }
        }
#nullable restore
#else
        public string ClientPublicIpV4Address
        {
            get { return BackingStore?.Get<string>("clientPublicIpV4Address"); }
            set { BackingStore?.Set("clientPublicIpV4Address", value); }
        }
#endif
        /// <summary>Public IPv6 of the client that can be used to determine the location of the client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientPublicIpV6Address
        {
            get { return BackingStore?.Get<string?>("clientPublicIpV6Address"); }
            set { BackingStore?.Set("clientPublicIpV6Address", value); }
        }
#nullable restore
#else
        public string ClientPublicIpV6Address
        {
            get { return BackingStore?.Get<string>("clientPublicIpV6Address"); }
            set { BackingStore?.Set("clientPublicIpV6Address", value); }
        }
#endif
        /// <summary>ID of the audio conference.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConferenceId
        {
            get { return BackingStore?.Get<string?>("conferenceId"); }
            set { BackingStore?.Set("conferenceId", value); }
        }
#nullable restore
#else
        public string ConferenceId
        {
            get { return BackingStore?.Get<string>("conferenceId"); }
            set { BackingStore?.Set("conferenceId", value); }
        }
#endif
        /// <summary>Connection fee price.</summary>
        public decimal? ConnectionCharge
        {
            get { return BackingStore?.Get<decimal?>("connectionCharge"); }
            set { BackingStore?.Set("connectionCharge", value); }
        }
        /// <summary>Type of currency used to calculate the cost of the call (ISO 4217).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency
        {
            get { return BackingStore?.Get<string?>("currency"); }
            set { BackingStore?.Set("currency", value); }
        }
#nullable restore
#else
        public string Currency
        {
            get { return BackingStore?.Get<string>("currency"); }
            set { BackingStore?.Set("currency", value); }
        }
#endif
        /// <summary>Indicates whether the call was Domestic (within a country or region) or International (outside a country or region) based on the user&apos;s location.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationContext
        {
            get { return BackingStore?.Get<string?>("destinationContext"); }
            set { BackingStore?.Set("destinationContext", value); }
        }
#nullable restore
#else
        public string DestinationContext
        {
            get { return BackingStore?.Get<string>("destinationContext"); }
            set { BackingStore?.Set("destinationContext", value); }
        }
#endif
        /// <summary>Country or region dialed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationName
        {
            get { return BackingStore?.Get<string?>("destinationName"); }
            set { BackingStore?.Set("destinationName", value); }
        }
#nullable restore
#else
        public string DestinationName
        {
            get { return BackingStore?.Get<string>("destinationName"); }
            set { BackingStore?.Set("destinationName", value); }
        }
#endif
        /// <summary>How long the call was connected, in seconds.</summary>
        public int? Duration
        {
            get { return BackingStore?.Get<int?>("duration"); }
            set { BackingStore?.Set("duration", value); }
        }
        /// <summary>Call end time.</summary>
        public DateTimeOffset? EndDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("endDateTime"); }
            set { BackingStore?.Set("endDateTime", value); }
        }
        /// <summary>User&apos;s phone number type, such as a service of toll-free number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventoryType
        {
            get { return BackingStore?.Get<string?>("inventoryType"); }
            set { BackingStore?.Set("inventoryType", value); }
        }
#nullable restore
#else
        public string InventoryType
        {
            get { return BackingStore?.Get<string>("inventoryType"); }
            set { BackingStore?.Set("inventoryType", value); }
        }
#endif
        /// <summary>The license used for the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LicenseCapability
        {
            get { return BackingStore?.Get<string?>("licenseCapability"); }
            set { BackingStore?.Set("licenseCapability", value); }
        }
#nullable restore
#else
        public string LicenseCapability
        {
            get { return BackingStore?.Get<string>("licenseCapability"); }
            set { BackingStore?.Set("licenseCapability", value); }
        }
#endif
        /// <summary>The telecommunications operator that provided PSTN services for this call. It may be Microsoft, or it may be a third-party operator via the Operator Connect Program.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Operator
        {
            get { return BackingStore?.Get<string?>("operator"); }
            set { BackingStore?.Set("operator", value); }
        }
#nullable restore
#else
        public string Operator
        {
            get { return BackingStore?.Get<string>("operator"); }
            set { BackingStore?.Set("operator", value); }
        }
#endif
        /// <summary>Call start time.</summary>
        public DateTimeOffset? StartDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("startDateTime"); }
            set { BackingStore?.Set("startDateTime", value); }
        }
        /// <summary>Country code of the tenant. For details, see ISO 3166-1 alpha-2.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantCountryCode
        {
            get { return BackingStore?.Get<string?>("tenantCountryCode"); }
            set { BackingStore?.Set("tenantCountryCode", value); }
        }
#nullable restore
#else
        public string TenantCountryCode
        {
            get { return BackingStore?.Get<string>("tenantCountryCode"); }
            set { BackingStore?.Set("tenantCountryCode", value); }
        }
#endif
        /// <summary>Country code of the user. For details, see ISO 3166-1 alpha-2.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsageCountryCode
        {
            get { return BackingStore?.Get<string?>("usageCountryCode"); }
            set { BackingStore?.Set("usageCountryCode", value); }
        }
#nullable restore
#else
        public string UsageCountryCode
        {
            get { return BackingStore?.Get<string>("usageCountryCode"); }
            set { BackingStore?.Set("usageCountryCode", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CallRecords.PstnCallLogRow"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.CallRecords.PstnCallLogRow CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CallRecords.PstnCallLogRow();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "callDurationSource", n => { CallDurationSource = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.PstnCallDurationSource>(); } },
                { "callId", n => { CallId = n.GetStringValue(); } },
                { "callType", n => { CallType = n.GetStringValue(); } },
                { "calleeNumber", n => { CalleeNumber = n.GetStringValue(); } },
                { "callerNumber", n => { CallerNumber = n.GetStringValue(); } },
                { "charge", n => { Charge = n.GetDecimalValue(); } },
                { "clientLocalIpV4Address", n => { ClientLocalIpV4Address = n.GetStringValue(); } },
                { "clientLocalIpV6Address", n => { ClientLocalIpV6Address = n.GetStringValue(); } },
                { "clientPublicIpV4Address", n => { ClientPublicIpV4Address = n.GetStringValue(); } },
                { "clientPublicIpV6Address", n => { ClientPublicIpV6Address = n.GetStringValue(); } },
                { "conferenceId", n => { ConferenceId = n.GetStringValue(); } },
                { "connectionCharge", n => { ConnectionCharge = n.GetDecimalValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "destinationContext", n => { DestinationContext = n.GetStringValue(); } },
                { "destinationName", n => { DestinationName = n.GetStringValue(); } },
                { "duration", n => { Duration = n.GetIntValue(); } },
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "inventoryType", n => { InventoryType = n.GetStringValue(); } },
                { "licenseCapability", n => { LicenseCapability = n.GetStringValue(); } },
                { "operator", n => { Operator = n.GetStringValue(); } },
                { "startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
                { "tenantCountryCode", n => { TenantCountryCode = n.GetStringValue(); } },
                { "usageCountryCode", n => { UsageCountryCode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.PstnCallDurationSource>("callDurationSource", CallDurationSource);
            writer.WriteStringValue("calleeNumber", CalleeNumber);
            writer.WriteStringValue("callerNumber", CallerNumber);
            writer.WriteStringValue("callId", CallId);
            writer.WriteStringValue("callType", CallType);
            writer.WriteDecimalValue("charge", Charge);
            writer.WriteStringValue("clientLocalIpV4Address", ClientLocalIpV4Address);
            writer.WriteStringValue("clientLocalIpV6Address", ClientLocalIpV6Address);
            writer.WriteStringValue("clientPublicIpV4Address", ClientPublicIpV4Address);
            writer.WriteStringValue("clientPublicIpV6Address", ClientPublicIpV6Address);
            writer.WriteStringValue("conferenceId", ConferenceId);
            writer.WriteDecimalValue("connectionCharge", ConnectionCharge);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("destinationContext", DestinationContext);
            writer.WriteStringValue("destinationName", DestinationName);
            writer.WriteIntValue("duration", Duration);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteStringValue("inventoryType", InventoryType);
            writer.WriteStringValue("licenseCapability", LicenseCapability);
            writer.WriteStringValue("operator", Operator);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteStringValue("tenantCountryCode", TenantCountryCode);
            writer.WriteStringValue("usageCountryCode", UsageCountryCode);
        }
    }
}
#pragma warning restore CS0618
