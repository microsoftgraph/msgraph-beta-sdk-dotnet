// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.CallRecords
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NetworkInfo : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Fraction of the call that the media endpoint detected the available bandwidth or bandwidth policy was low enough to cause poor quality of the audio sent.</summary>
        public float? BandwidthLowEventRatio
        {
            get { return BackingStore?.Get<float?>("bandwidthLowEventRatio"); }
            set { BackingStore?.Set("bandwidthLowEventRatio", value); }
        }
        /// <summary>The wireless LAN basic service set identifier of the media endpoint used to connect to the network.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BasicServiceSetIdentifier
        {
            get { return BackingStore?.Get<string?>("basicServiceSetIdentifier"); }
            set { BackingStore?.Set("basicServiceSetIdentifier", value); }
        }
#nullable restore
#else
        public string BasicServiceSetIdentifier
        {
            get { return BackingStore?.Get<string>("basicServiceSetIdentifier"); }
            set { BackingStore?.Set("basicServiceSetIdentifier", value); }
        }
#endif
        /// <summary>The connectionType property</summary>
        public global::Microsoft.Graph.Beta.Models.CallRecords.NetworkConnectionType? ConnectionType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CallRecords.NetworkConnectionType?>("connectionType"); }
            set { BackingStore?.Set("connectionType", value); }
        }
        /// <summary>Fraction of the call that the media endpoint detected the network delay was significant enough to impact the ability to have real-time two-way communication.</summary>
        public float? DelayEventRatio
        {
            get { return BackingStore?.Get<float?>("delayEventRatio"); }
            set { BackingStore?.Set("delayEventRatio", value); }
        }
        /// <summary>DNS suffix associated with the network adapter of the media endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DnsSuffix
        {
            get { return BackingStore?.Get<string?>("dnsSuffix"); }
            set { BackingStore?.Set("dnsSuffix", value); }
        }
#nullable restore
#else
        public string DnsSuffix
        {
            get { return BackingStore?.Get<string>("dnsSuffix"); }
            set { BackingStore?.Set("dnsSuffix", value); }
        }
#endif
        /// <summary>IP address of the media endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress
        {
            get { return BackingStore?.Get<string?>("ipAddress"); }
            set { BackingStore?.Set("ipAddress", value); }
        }
#nullable restore
#else
        public string IpAddress
        {
            get { return BackingStore?.Get<string>("ipAddress"); }
            set { BackingStore?.Set("ipAddress", value); }
        }
#endif
        /// <summary>Link speed in bits per second reported by the network adapter used by the media endpoint.</summary>
        public long? LinkSpeed
        {
            get { return BackingStore?.Get<long?>("linkSpeed"); }
            set { BackingStore?.Set("linkSpeed", value); }
        }
        /// <summary>The media access control (MAC) address of the media endpoint&apos;s network device. This value may be missing or shown as 02:00:00:00:00:00 due to operating system privacy policies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MacAddress
        {
            get { return BackingStore?.Get<string?>("macAddress"); }
            set { BackingStore?.Set("macAddress", value); }
        }
#nullable restore
#else
        public string MacAddress
        {
            get { return BackingStore?.Get<string>("macAddress"); }
            set { BackingStore?.Set("macAddress", value); }
        }
#endif
        /// <summary>The networkTransportProtocol property</summary>
        public global::Microsoft.Graph.Beta.Models.CallRecords.NetworkTransportProtocol? NetworkTransportProtocol
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CallRecords.NetworkTransportProtocol?>("networkTransportProtocol"); }
            set { BackingStore?.Set("networkTransportProtocol", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>Network port number used by media endpoint.</summary>
        public int? Port
        {
            get { return BackingStore?.Get<int?>("port"); }
            set { BackingStore?.Set("port", value); }
        }
        /// <summary>Fraction of the call that the media endpoint detected the network was causing poor quality of the audio received.</summary>
        public float? ReceivedQualityEventRatio
        {
            get { return BackingStore?.Get<float?>("receivedQualityEventRatio"); }
            set { BackingStore?.Set("receivedQualityEventRatio", value); }
        }
        /// <summary>IP address of the media endpoint as seen by the media relay server. This is typically the public internet IP address associated to the endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReflexiveIPAddress
        {
            get { return BackingStore?.Get<string?>("reflexiveIPAddress"); }
            set { BackingStore?.Set("reflexiveIPAddress", value); }
        }
#nullable restore
#else
        public string ReflexiveIPAddress
        {
            get { return BackingStore?.Get<string>("reflexiveIPAddress"); }
            set { BackingStore?.Set("reflexiveIPAddress", value); }
        }
#endif
        /// <summary>IP address of the media relay server allocated by the media endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RelayIPAddress
        {
            get { return BackingStore?.Get<string?>("relayIPAddress"); }
            set { BackingStore?.Set("relayIPAddress", value); }
        }
#nullable restore
#else
        public string RelayIPAddress
        {
            get { return BackingStore?.Get<string>("relayIPAddress"); }
            set { BackingStore?.Set("relayIPAddress", value); }
        }
#endif
        /// <summary>Network port number allocated on the media relay server by the media endpoint.</summary>
        public int? RelayPort
        {
            get { return BackingStore?.Get<int?>("relayPort"); }
            set { BackingStore?.Set("relayPort", value); }
        }
        /// <summary>Fraction of the call that the media endpoint detected the network was causing poor quality of the audio sent.</summary>
        public float? SentQualityEventRatio
        {
            get { return BackingStore?.Get<float?>("sentQualityEventRatio"); }
            set { BackingStore?.Set("sentQualityEventRatio", value); }
        }
        /// <summary>Subnet used for media stream by the media endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subnet
        {
            get { return BackingStore?.Get<string?>("subnet"); }
            set { BackingStore?.Set("subnet", value); }
        }
#nullable restore
#else
        public string Subnet
        {
            get { return BackingStore?.Get<string>("subnet"); }
            set { BackingStore?.Set("subnet", value); }
        }
#endif
        /// <summary>List of network trace route hops collected for this media stream.*</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.CallRecords.TraceRouteHop>? TraceRouteHops
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CallRecords.TraceRouteHop>?>("traceRouteHops"); }
            set { BackingStore?.Set("traceRouteHops", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.CallRecords.TraceRouteHop> TraceRouteHops
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CallRecords.TraceRouteHop>>("traceRouteHops"); }
            set { BackingStore?.Set("traceRouteHops", value); }
        }
#endif
        /// <summary>The wifiBand property</summary>
        public global::Microsoft.Graph.Beta.Models.CallRecords.WifiBand? WifiBand
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CallRecords.WifiBand?>("wifiBand"); }
            set { BackingStore?.Set("wifiBand", value); }
        }
        /// <summary>Estimated remaining battery charge in percentage reported by the media endpoint.</summary>
        public int? WifiBatteryCharge
        {
            get { return BackingStore?.Get<int?>("wifiBatteryCharge"); }
            set { BackingStore?.Set("wifiBatteryCharge", value); }
        }
        /// <summary>WiFi channel used by the media endpoint.</summary>
        public int? WifiChannel
        {
            get { return BackingStore?.Get<int?>("wifiChannel"); }
            set { BackingStore?.Set("wifiChannel", value); }
        }
        /// <summary>Name of the Microsoft WiFi driver used by the media endpoint. Value may be localized based on the language used by endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WifiMicrosoftDriver
        {
            get { return BackingStore?.Get<string?>("wifiMicrosoftDriver"); }
            set { BackingStore?.Set("wifiMicrosoftDriver", value); }
        }
#nullable restore
#else
        public string WifiMicrosoftDriver
        {
            get { return BackingStore?.Get<string>("wifiMicrosoftDriver"); }
            set { BackingStore?.Set("wifiMicrosoftDriver", value); }
        }
#endif
        /// <summary>Version of the Microsoft WiFi driver used by the media endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WifiMicrosoftDriverVersion
        {
            get { return BackingStore?.Get<string?>("wifiMicrosoftDriverVersion"); }
            set { BackingStore?.Set("wifiMicrosoftDriverVersion", value); }
        }
#nullable restore
#else
        public string WifiMicrosoftDriverVersion
        {
            get { return BackingStore?.Get<string>("wifiMicrosoftDriverVersion"); }
            set { BackingStore?.Set("wifiMicrosoftDriverVersion", value); }
        }
#endif
        /// <summary>The wifiRadioType property</summary>
        public global::Microsoft.Graph.Beta.Models.CallRecords.WifiRadioType? WifiRadioType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CallRecords.WifiRadioType?>("wifiRadioType"); }
            set { BackingStore?.Set("wifiRadioType", value); }
        }
        /// <summary>WiFi signal strength in percentage reported by the media endpoint.</summary>
        public int? WifiSignalStrength
        {
            get { return BackingStore?.Get<int?>("wifiSignalStrength"); }
            set { BackingStore?.Set("wifiSignalStrength", value); }
        }
        /// <summary>Name of the WiFi driver used by the media endpoint. Value may be localized based on the language used by endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WifiVendorDriver
        {
            get { return BackingStore?.Get<string?>("wifiVendorDriver"); }
            set { BackingStore?.Set("wifiVendorDriver", value); }
        }
#nullable restore
#else
        public string WifiVendorDriver
        {
            get { return BackingStore?.Get<string>("wifiVendorDriver"); }
            set { BackingStore?.Set("wifiVendorDriver", value); }
        }
#endif
        /// <summary>Version of the WiFi driver used by the media endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WifiVendorDriverVersion
        {
            get { return BackingStore?.Get<string?>("wifiVendorDriverVersion"); }
            set { BackingStore?.Set("wifiVendorDriverVersion", value); }
        }
#nullable restore
#else
        public string WifiVendorDriverVersion
        {
            get { return BackingStore?.Get<string>("wifiVendorDriverVersion"); }
            set { BackingStore?.Set("wifiVendorDriverVersion", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.CallRecords.NetworkInfo"/> and sets the default values.
        /// </summary>
        public NetworkInfo()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CallRecords.NetworkInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.CallRecords.NetworkInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CallRecords.NetworkInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bandwidthLowEventRatio", n => { BandwidthLowEventRatio = n.GetFloatValue(); } },
                { "basicServiceSetIdentifier", n => { BasicServiceSetIdentifier = n.GetStringValue(); } },
                { "connectionType", n => { ConnectionType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.NetworkConnectionType>(); } },
                { "delayEventRatio", n => { DelayEventRatio = n.GetFloatValue(); } },
                { "dnsSuffix", n => { DnsSuffix = n.GetStringValue(); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "linkSpeed", n => { LinkSpeed = n.GetLongValue(); } },
                { "macAddress", n => { MacAddress = n.GetStringValue(); } },
                { "networkTransportProtocol", n => { NetworkTransportProtocol = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.NetworkTransportProtocol>(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "port", n => { Port = n.GetIntValue(); } },
                { "receivedQualityEventRatio", n => { ReceivedQualityEventRatio = n.GetFloatValue(); } },
                { "reflexiveIPAddress", n => { ReflexiveIPAddress = n.GetStringValue(); } },
                { "relayIPAddress", n => { RelayIPAddress = n.GetStringValue(); } },
                { "relayPort", n => { RelayPort = n.GetIntValue(); } },
                { "sentQualityEventRatio", n => { SentQualityEventRatio = n.GetFloatValue(); } },
                { "subnet", n => { Subnet = n.GetStringValue(); } },
                { "traceRouteHops", n => { TraceRouteHops = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CallRecords.TraceRouteHop>(global::Microsoft.Graph.Beta.Models.CallRecords.TraceRouteHop.CreateFromDiscriminatorValue)?.AsList(); } },
                { "wifiBand", n => { WifiBand = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.WifiBand>(); } },
                { "wifiBatteryCharge", n => { WifiBatteryCharge = n.GetIntValue(); } },
                { "wifiChannel", n => { WifiChannel = n.GetIntValue(); } },
                { "wifiMicrosoftDriver", n => { WifiMicrosoftDriver = n.GetStringValue(); } },
                { "wifiMicrosoftDriverVersion", n => { WifiMicrosoftDriverVersion = n.GetStringValue(); } },
                { "wifiRadioType", n => { WifiRadioType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.WifiRadioType>(); } },
                { "wifiSignalStrength", n => { WifiSignalStrength = n.GetIntValue(); } },
                { "wifiVendorDriver", n => { WifiVendorDriver = n.GetStringValue(); } },
                { "wifiVendorDriverVersion", n => { WifiVendorDriverVersion = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteFloatValue("bandwidthLowEventRatio", BandwidthLowEventRatio);
            writer.WriteStringValue("basicServiceSetIdentifier", BasicServiceSetIdentifier);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.NetworkConnectionType>("connectionType", ConnectionType);
            writer.WriteFloatValue("delayEventRatio", DelayEventRatio);
            writer.WriteStringValue("dnsSuffix", DnsSuffix);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteLongValue("linkSpeed", LinkSpeed);
            writer.WriteStringValue("macAddress", MacAddress);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.NetworkTransportProtocol>("networkTransportProtocol", NetworkTransportProtocol);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteIntValue("port", Port);
            writer.WriteFloatValue("receivedQualityEventRatio", ReceivedQualityEventRatio);
            writer.WriteStringValue("reflexiveIPAddress", ReflexiveIPAddress);
            writer.WriteStringValue("relayIPAddress", RelayIPAddress);
            writer.WriteIntValue("relayPort", RelayPort);
            writer.WriteFloatValue("sentQualityEventRatio", SentQualityEventRatio);
            writer.WriteStringValue("subnet", Subnet);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CallRecords.TraceRouteHop>("traceRouteHops", TraceRouteHops);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.WifiBand>("wifiBand", WifiBand);
            writer.WriteIntValue("wifiBatteryCharge", WifiBatteryCharge);
            writer.WriteIntValue("wifiChannel", WifiChannel);
            writer.WriteStringValue("wifiMicrosoftDriver", WifiMicrosoftDriver);
            writer.WriteStringValue("wifiMicrosoftDriverVersion", WifiMicrosoftDriverVersion);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CallRecords.WifiRadioType>("wifiRadioType", WifiRadioType);
            writer.WriteIntValue("wifiSignalStrength", WifiSignalStrength);
            writer.WriteStringValue("wifiVendorDriver", WifiVendorDriver);
            writer.WriteStringValue("wifiVendorDriverVersion", WifiVendorDriverVersion);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
