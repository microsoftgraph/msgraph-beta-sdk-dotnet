// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.CallRecords
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SmsLogRow : global::Microsoft.Graph.Beta.Models.CallRecords.CallLogRow, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Amount of money or cost of the SMS that is charged.</summary>
        public decimal? CallCharge
        {
            get { return BackingStore?.Get<decimal?>("callCharge"); }
            set { BackingStore?.Set("callCharge", value); }
        }
        /// <summary>Currency used to calculate the cost of the call. For details, see ISO 4217.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency
        {
            get { return BackingStore?.Get<string?>("currency"); }
            set { BackingStore?.Set("currency", value); }
        }
#nullable restore
#else
        public string Currency
        {
            get { return BackingStore?.Get<string>("currency"); }
            set { BackingStore?.Set("currency", value); }
        }
#endif
        /// <summary>Indicates whether the SMS was Domestic (within a country or region) or International (outside a country or region) based on the user&apos;s location.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationContext
        {
            get { return BackingStore?.Get<string?>("destinationContext"); }
            set { BackingStore?.Set("destinationContext", value); }
        }
#nullable restore
#else
        public string DestinationContext
        {
            get { return BackingStore?.Get<string>("destinationContext"); }
            set { BackingStore?.Set("destinationContext", value); }
        }
#endif
        /// <summary>Country or region of a phone number that received the SMS.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationName
        {
            get { return BackingStore?.Get<string?>("destinationName"); }
            set { BackingStore?.Set("destinationName", value); }
        }
#nullable restore
#else
        public string DestinationName
        {
            get { return BackingStore?.Get<string>("destinationName"); }
            set { BackingStore?.Set("destinationName", value); }
        }
#endif
        /// <summary>Partially obfuscated phone number that received the SMS. For details, see E.164.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationNumber
        {
            get { return BackingStore?.Get<string?>("destinationNumber"); }
            set { BackingStore?.Set("destinationNumber", value); }
        }
#nullable restore
#else
        public string DestinationNumber
        {
            get { return BackingStore?.Get<string>("destinationNumber"); }
            set { BackingStore?.Set("destinationNumber", value); }
        }
#endif
        /// <summary>The license used for the SMS.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LicenseCapability
        {
            get { return BackingStore?.Get<string?>("licenseCapability"); }
            set { BackingStore?.Set("licenseCapability", value); }
        }
#nullable restore
#else
        public string LicenseCapability
        {
            get { return BackingStore?.Get<string>("licenseCapability"); }
            set { BackingStore?.Set("licenseCapability", value); }
        }
#endif
        /// <summary>The date and time when the SMS was sent.</summary>
        public DateTimeOffset? SentDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("sentDateTime"); }
            set { BackingStore?.Set("sentDateTime", value); }
        }
        /// <summary>SMS identifier. Not guaranteed to be unique.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SmsId
        {
            get { return BackingStore?.Get<string?>("smsId"); }
            set { BackingStore?.Set("smsId", value); }
        }
#nullable restore
#else
        public string SmsId
        {
            get { return BackingStore?.Get<string>("smsId"); }
            set { BackingStore?.Set("smsId", value); }
        }
#endif
        /// <summary>Type of SMS such as outbound or inbound.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SmsType
        {
            get { return BackingStore?.Get<string?>("smsType"); }
            set { BackingStore?.Set("smsType", value); }
        }
#nullable restore
#else
        public string SmsType
        {
            get { return BackingStore?.Get<string>("smsType"); }
            set { BackingStore?.Set("smsType", value); }
        }
#endif
        /// <summary>Number of SMS units sent/received.</summary>
        public int? SmsUnits
        {
            get { return BackingStore?.Get<int?>("smsUnits"); }
            set { BackingStore?.Set("smsUnits", value); }
        }
        /// <summary>Partially obfuscated phone number that sent the SMS. For details, see E.164.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceNumber
        {
            get { return BackingStore?.Get<string?>("sourceNumber"); }
            set { BackingStore?.Set("sourceNumber", value); }
        }
#nullable restore
#else
        public string SourceNumber
        {
            get { return BackingStore?.Get<string>("sourceNumber"); }
            set { BackingStore?.Set("sourceNumber", value); }
        }
#endif
        /// <summary>Country code of the tenant. For details, see ISO 3166-1 alpha-2.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantCountryCode
        {
            get { return BackingStore?.Get<string?>("tenantCountryCode"); }
            set { BackingStore?.Set("tenantCountryCode", value); }
        }
#nullable restore
#else
        public string TenantCountryCode
        {
            get { return BackingStore?.Get<string>("tenantCountryCode"); }
            set { BackingStore?.Set("tenantCountryCode", value); }
        }
#endif
        /// <summary>Country code of the user. For details, see ISO 3166-1 alpha-2.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserCountryCode
        {
            get { return BackingStore?.Get<string?>("userCountryCode"); }
            set { BackingStore?.Set("userCountryCode", value); }
        }
#nullable restore
#else
        public string UserCountryCode
        {
            get { return BackingStore?.Get<string>("userCountryCode"); }
            set { BackingStore?.Set("userCountryCode", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CallRecords.SmsLogRow"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.CallRecords.SmsLogRow CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CallRecords.SmsLogRow();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "callCharge", n => { CallCharge = n.GetDecimalValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "destinationContext", n => { DestinationContext = n.GetStringValue(); } },
                { "destinationName", n => { DestinationName = n.GetStringValue(); } },
                { "destinationNumber", n => { DestinationNumber = n.GetStringValue(); } },
                { "licenseCapability", n => { LicenseCapability = n.GetStringValue(); } },
                { "sentDateTime", n => { SentDateTime = n.GetDateTimeOffsetValue(); } },
                { "smsId", n => { SmsId = n.GetStringValue(); } },
                { "smsType", n => { SmsType = n.GetStringValue(); } },
                { "smsUnits", n => { SmsUnits = n.GetIntValue(); } },
                { "sourceNumber", n => { SourceNumber = n.GetStringValue(); } },
                { "tenantCountryCode", n => { TenantCountryCode = n.GetStringValue(); } },
                { "userCountryCode", n => { UserCountryCode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDecimalValue("callCharge", CallCharge);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("destinationContext", DestinationContext);
            writer.WriteStringValue("destinationName", DestinationName);
            writer.WriteStringValue("destinationNumber", DestinationNumber);
            writer.WriteStringValue("licenseCapability", LicenseCapability);
            writer.WriteDateTimeOffsetValue("sentDateTime", SentDateTime);
            writer.WriteStringValue("smsId", SmsId);
            writer.WriteStringValue("smsType", SmsType);
            writer.WriteIntValue("smsUnits", SmsUnits);
            writer.WriteStringValue("sourceNumber", SourceNumber);
            writer.WriteStringValue("tenantCountryCode", TenantCountryCode);
            writer.WriteStringValue("userCountryCode", UserCountryCode);
        }
    }
}
#pragma warning restore CS0618
