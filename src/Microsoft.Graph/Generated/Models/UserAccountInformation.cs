using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace Microsoft.Graph.Beta.Models {
    /// <summary>Casts the previous resource to user.</summary>
    public class UserAccountInformation : ItemFacet, IParsable {
        /// <summary>Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed.</summary>
        public string AgeGroup {
            get { return BackingStore?.Get<string>(nameof(AgeGroup)); }
            set { BackingStore?.Set(nameof(AgeGroup), value); }
        }
        /// <summary>Contains the two-character country code associated with the users account.</summary>
        public string CountryCode {
            get { return BackingStore?.Get<string>(nameof(CountryCode)); }
            set { BackingStore?.Set(nameof(CountryCode), value); }
        }
        /// <summary>The preferredLanguageTag property</summary>
        public LocaleInfo PreferredLanguageTag {
            get { return BackingStore?.Get<LocaleInfo>(nameof(PreferredLanguageTag)); }
            set { BackingStore?.Set(nameof(PreferredLanguageTag), value); }
        }
        /// <summary>The user principal name (UPN) of the user associated with the account.</summary>
        public string UserPrincipalName {
            get { return BackingStore?.Get<string>(nameof(UserPrincipalName)); }
            set { BackingStore?.Set(nameof(UserPrincipalName), value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        /// </summary>
        public static new UserAccountInformation CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UserAccountInformation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"ageGroup", n => { AgeGroup = n.GetStringValue(); } },
                {"countryCode", n => { CountryCode = n.GetStringValue(); } },
                {"preferredLanguageTag", n => { PreferredLanguageTag = n.GetObjectValue<LocaleInfo>(LocaleInfo.CreateFromDiscriminatorValue); } },
                {"userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("ageGroup", AgeGroup);
            writer.WriteStringValue("countryCode", CountryCode);
            writer.WriteObjectValue<LocaleInfo>("preferredLanguageTag", PreferredLanguageTag);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
        }
    }
}
