// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Windows Network Isolation Policy
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class WindowsNetworkIsolationPolicy : IAdditionalDataHolder, IBackedModel, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Contains a list of enterprise resource domains hosted in the cloud that need to be protected. Connections to these resources are considered enterprise data. If a proxy is paired with a cloud resource, traffic to the cloud resource will be routed through the enterprise network via the denoted proxy server (on Port 80). A proxy server used for this purpose must also be configured using the EnterpriseInternalProxyServers policy. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ProxiedDomain>? EnterpriseCloudResources
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ProxiedDomain>?>("enterpriseCloudResources"); }
            set { BackingStore?.Set("enterpriseCloudResources", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ProxiedDomain> EnterpriseCloudResources
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ProxiedDomain>>("enterpriseCloudResources"); }
            set { BackingStore?.Set("enterpriseCloudResources", value); }
        }
#endif
        /// <summary>This is the comma-separated list of internal proxy servers. For example, &apos;157.54.14.28, 157.54.11.118, 10.202.14.167, 157.53.14.163, 157.69.210.59&apos;. These proxies have been configured by the admin to connect to specific resources on the Internet. They are considered to be enterprise network locations. The proxies are only leveraged in configuring the EnterpriseCloudResources policy to force traffic to the matched cloud resources through these proxies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EnterpriseInternalProxyServers
        {
            get { return BackingStore?.Get<List<string>?>("enterpriseInternalProxyServers"); }
            set { BackingStore?.Set("enterpriseInternalProxyServers", value); }
        }
#nullable restore
#else
        public List<string> EnterpriseInternalProxyServers
        {
            get { return BackingStore?.Get<List<string>>("enterpriseInternalProxyServers"); }
            set { BackingStore?.Set("enterpriseInternalProxyServers", value); }
        }
#endif
        /// <summary>Sets the enterprise IP ranges that define the computers in the enterprise network. Data that comes from those computers will be considered part of the enterprise and protected. These locations will be considered a safe destination for enterprise data to be shared to. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.IpRange>? EnterpriseIPRanges
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IpRange>?>("enterpriseIPRanges"); }
            set { BackingStore?.Set("enterpriseIPRanges", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.IpRange> EnterpriseIPRanges
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IpRange>>("enterpriseIPRanges"); }
            set { BackingStore?.Set("enterpriseIPRanges", value); }
        }
#endif
        /// <summary>Boolean value that tells the client to accept the configured list and not to use heuristics to attempt to find other subnets. Default is false.</summary>
        public bool? EnterpriseIPRangesAreAuthoritative
        {
            get { return BackingStore?.Get<bool?>("enterpriseIPRangesAreAuthoritative"); }
            set { BackingStore?.Set("enterpriseIPRangesAreAuthoritative", value); }
        }
        /// <summary>This is the list of domains that comprise the boundaries of the enterprise. Data from one of these domains that is sent to a device will be considered enterprise data and protected. These locations will be considered a safe destination for enterprise data to be shared to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EnterpriseNetworkDomainNames
        {
            get { return BackingStore?.Get<List<string>?>("enterpriseNetworkDomainNames"); }
            set { BackingStore?.Set("enterpriseNetworkDomainNames", value); }
        }
#nullable restore
#else
        public List<string> EnterpriseNetworkDomainNames
        {
            get { return BackingStore?.Get<List<string>>("enterpriseNetworkDomainNames"); }
            set { BackingStore?.Set("enterpriseNetworkDomainNames", value); }
        }
#endif
        /// <summary>This is a list of proxy servers. Any server not on this list is considered non-enterprise.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EnterpriseProxyServers
        {
            get { return BackingStore?.Get<List<string>?>("enterpriseProxyServers"); }
            set { BackingStore?.Set("enterpriseProxyServers", value); }
        }
#nullable restore
#else
        public List<string> EnterpriseProxyServers
        {
            get { return BackingStore?.Get<List<string>>("enterpriseProxyServers"); }
            set { BackingStore?.Set("enterpriseProxyServers", value); }
        }
#endif
        /// <summary>Boolean value that tells the client to accept the configured list of proxies and not try to detect other work proxies. Default is false</summary>
        public bool? EnterpriseProxyServersAreAuthoritative
        {
            get { return BackingStore?.Get<bool?>("enterpriseProxyServersAreAuthoritative"); }
            set { BackingStore?.Set("enterpriseProxyServersAreAuthoritative", value); }
        }
        /// <summary>List of domain names that can used for work or personal resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? NeutralDomainResources
        {
            get { return BackingStore?.Get<List<string>?>("neutralDomainResources"); }
            set { BackingStore?.Set("neutralDomainResources", value); }
        }
#nullable restore
#else
        public List<string> NeutralDomainResources
        {
            get { return BackingStore?.Get<List<string>>("neutralDomainResources"); }
            set { BackingStore?.Set("neutralDomainResources", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.WindowsNetworkIsolationPolicy"/> and sets the default values.
        /// </summary>
        public WindowsNetworkIsolationPolicy()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.WindowsNetworkIsolationPolicy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.WindowsNetworkIsolationPolicy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.WindowsNetworkIsolationPolicy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enterpriseCloudResources", n => { EnterpriseCloudResources = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ProxiedDomain>(global::Microsoft.Graph.Beta.Models.ProxiedDomain.CreateFromDiscriminatorValue)?.AsList(); } },
                { "enterpriseIPRanges", n => { EnterpriseIPRanges = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IpRange>(global::Microsoft.Graph.Beta.Models.IpRange.CreateFromDiscriminatorValue)?.AsList(); } },
                { "enterpriseIPRangesAreAuthoritative", n => { EnterpriseIPRangesAreAuthoritative = n.GetBoolValue(); } },
                { "enterpriseInternalProxyServers", n => { EnterpriseInternalProxyServers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "enterpriseNetworkDomainNames", n => { EnterpriseNetworkDomainNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "enterpriseProxyServers", n => { EnterpriseProxyServers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "enterpriseProxyServersAreAuthoritative", n => { EnterpriseProxyServersAreAuthoritative = n.GetBoolValue(); } },
                { "neutralDomainResources", n => { NeutralDomainResources = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ProxiedDomain>("enterpriseCloudResources", EnterpriseCloudResources);
            writer.WriteCollectionOfPrimitiveValues<string>("enterpriseInternalProxyServers", EnterpriseInternalProxyServers);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IpRange>("enterpriseIPRanges", EnterpriseIPRanges);
            writer.WriteBoolValue("enterpriseIPRangesAreAuthoritative", EnterpriseIPRangesAreAuthoritative);
            writer.WriteCollectionOfPrimitiveValues<string>("enterpriseNetworkDomainNames", EnterpriseNetworkDomainNames);
            writer.WriteCollectionOfPrimitiveValues<string>("enterpriseProxyServers", EnterpriseProxyServers);
            writer.WriteBoolValue("enterpriseProxyServersAreAuthoritative", EnterpriseProxyServersAreAuthoritative);
            writer.WriteCollectionOfPrimitiveValues<string>("neutralDomainResources", NeutralDomainResources);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
