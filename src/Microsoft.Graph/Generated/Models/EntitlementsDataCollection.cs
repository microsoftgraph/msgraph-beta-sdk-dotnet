// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class EntitlementsDataCollection : EntitlementsDataCollectionInfo, IParsable 
    {
        /// <summary>Last transformation time of entitlements.</summary>
        public DateTimeOffset? LastCollectionDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("lastCollectionDateTime"); }
            set { BackingStore?.Set("lastCollectionDateTime", value); }
        }
        /// <summary>The permissionsModificationCapability property</summary>
        public Microsoft.Graph.Beta.Models.PermissionsModificationCapability? PermissionsModificationCapability {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PermissionsModificationCapability?>("permissionsModificationCapability"); }
            set { BackingStore?.Set("permissionsModificationCapability", value); }
        }
        /// <summary>The status property</summary>
        public DataCollectionStatus? Status {
            get { return BackingStore?.Get<DataCollectionStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="EntitlementsDataCollection"/> and sets the default values.
        /// </summary>
        public EntitlementsDataCollection() : base()
        {
            OdataType = "#microsoft.graph.entitlementsDataCollection";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="EntitlementsDataCollection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new EntitlementsDataCollection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EntitlementsDataCollection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"lastCollectionDateTime", n => { LastCollectionDateTime = n.GetDateTimeOffsetValue(); } },
                {"permissionsModificationCapability", n => { PermissionsModificationCapability = n.GetEnumValue<PermissionsModificationCapability>(); } },
                {"status", n => { Status = n.GetEnumValue<DataCollectionStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("lastCollectionDateTime", LastCollectionDateTime);
            writer.WriteEnumValue<PermissionsModificationCapability>("permissionsModificationCapability", PermissionsModificationCapability);
            writer.WriteEnumValue<DataCollectionStatus>("status", Status);
        }
    }
}
