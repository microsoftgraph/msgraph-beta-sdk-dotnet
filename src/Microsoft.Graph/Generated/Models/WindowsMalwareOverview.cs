// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Windows device malware overview.
    /// </summary>
    public class WindowsMalwareOverview : IAdditionalDataHolder, IBackedModel, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>List of device counts per malware category</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareCategoryCount>? MalwareCategorySummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareCategoryCount>?>("malwareCategorySummary"); }
            set { BackingStore?.Set("malwareCategorySummary", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareCategoryCount> MalwareCategorySummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareCategoryCount>>("malwareCategorySummary"); }
            set { BackingStore?.Set("malwareCategorySummary", value); }
        }
#endif
        /// <summary>Count of devices with malware detected in the last 30 days</summary>
        public int? MalwareDetectedDeviceCount
        {
            get { return BackingStore?.Get<int?>("malwareDetectedDeviceCount"); }
            set { BackingStore?.Set("malwareDetectedDeviceCount", value); }
        }
        /// <summary>List of device counts per malware execution state</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareExecutionStateCount>? MalwareExecutionStateSummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareExecutionStateCount>?>("malwareExecutionStateSummary"); }
            set { BackingStore?.Set("malwareExecutionStateSummary", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareExecutionStateCount> MalwareExecutionStateSummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareExecutionStateCount>>("malwareExecutionStateSummary"); }
            set { BackingStore?.Set("malwareExecutionStateSummary", value); }
        }
#endif
        /// <summary>List of device counts per malware</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareNameCount>? MalwareNameSummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareNameCount>?>("malwareNameSummary"); }
            set { BackingStore?.Set("malwareNameSummary", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareNameCount> MalwareNameSummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareNameCount>>("malwareNameSummary"); }
            set { BackingStore?.Set("malwareNameSummary", value); }
        }
#endif
        /// <summary>List of active malware counts per malware severity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareSeverityCount>? MalwareSeveritySummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareSeverityCount>?>("malwareSeveritySummary"); }
            set { BackingStore?.Set("malwareSeveritySummary", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareSeverityCount> MalwareSeveritySummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareSeverityCount>>("malwareSeveritySummary"); }
            set { BackingStore?.Set("malwareSeveritySummary", value); }
        }
#endif
        /// <summary>List of device counts per malware state</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareStateCount>? MalwareStateSummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareStateCount>?>("malwareStateSummary"); }
            set { BackingStore?.Set("malwareStateSummary", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.WindowsMalwareStateCount> MalwareStateSummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsMalwareStateCount>>("malwareStateSummary"); }
            set { BackingStore?.Set("malwareStateSummary", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>List of device counts with malware per windows OS version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.OsVersionCount>? OsVersionsSummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.OsVersionCount>?>("osVersionsSummary"); }
            set { BackingStore?.Set("osVersionsSummary", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.OsVersionCount> OsVersionsSummary
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.OsVersionCount>>("osVersionsSummary"); }
            set { BackingStore?.Set("osVersionsSummary", value); }
        }
#endif
        /// <summary>Count of all distinct malwares detected across all devices. Valid values -2147483648 to 2147483647</summary>
        public int? TotalDistinctMalwareCount
        {
            get { return BackingStore?.Get<int?>("totalDistinctMalwareCount"); }
            set { BackingStore?.Set("totalDistinctMalwareCount", value); }
        }
        /// <summary>Count of all malware detections across all devices. Valid values -2147483648 to 2147483647</summary>
        public int? TotalMalwareCount
        {
            get { return BackingStore?.Get<int?>("totalMalwareCount"); }
            set { BackingStore?.Set("totalMalwareCount", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.WindowsMalwareOverview"/> and sets the default values.
        /// </summary>
        public WindowsMalwareOverview()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.WindowsMalwareOverview"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Microsoft.Graph.Beta.Models.WindowsMalwareOverview CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.WindowsMalwareOverview();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "malwareCategorySummary", n => { MalwareCategorySummary = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareCategoryCount>(Microsoft.Graph.Beta.Models.WindowsMalwareCategoryCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "malwareDetectedDeviceCount", n => { MalwareDetectedDeviceCount = n.GetIntValue(); } },
                { "malwareExecutionStateSummary", n => { MalwareExecutionStateSummary = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareExecutionStateCount>(Microsoft.Graph.Beta.Models.WindowsMalwareExecutionStateCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "malwareNameSummary", n => { MalwareNameSummary = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareNameCount>(Microsoft.Graph.Beta.Models.WindowsMalwareNameCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "malwareSeveritySummary", n => { MalwareSeveritySummary = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareSeverityCount>(Microsoft.Graph.Beta.Models.WindowsMalwareSeverityCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "malwareStateSummary", n => { MalwareStateSummary = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareStateCount>(Microsoft.Graph.Beta.Models.WindowsMalwareStateCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "osVersionsSummary", n => { OsVersionsSummary = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.OsVersionCount>(Microsoft.Graph.Beta.Models.OsVersionCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "totalDistinctMalwareCount", n => { TotalDistinctMalwareCount = n.GetIntValue(); } },
                { "totalMalwareCount", n => { TotalMalwareCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareCategoryCount>("malwareCategorySummary", MalwareCategorySummary);
            writer.WriteIntValue("malwareDetectedDeviceCount", MalwareDetectedDeviceCount);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareExecutionStateCount>("malwareExecutionStateSummary", MalwareExecutionStateSummary);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareNameCount>("malwareNameSummary", MalwareNameSummary);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareSeverityCount>("malwareSeveritySummary", MalwareSeveritySummary);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsMalwareStateCount>("malwareStateSummary", MalwareStateSummary);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.OsVersionCount>("osVersionsSummary", OsVersionsSummary);
            writer.WriteIntValue("totalDistinctMalwareCount", TotalDistinctMalwareCount);
            writer.WriteIntValue("totalMalwareCount", TotalMalwareCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
