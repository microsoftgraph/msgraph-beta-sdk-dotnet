// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Windows Autopilot Deployment Profile
    /// </summary>
    public class WindowsAutopilotDeploymentProfile : Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>The list of assigned devices for the profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceIdentity>? AssignedDevices
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceIdentity>?>("assignedDevices"); }
            set { BackingStore?.Set("assignedDevices", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceIdentity> AssignedDevices
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceIdentity>>("assignedDevices"); }
            set { BackingStore?.Set("assignedDevices", value); }
        }
#endif
        /// <summary>The list of group assignments for the profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfileAssignment>? Assignments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfileAssignment>?>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfileAssignment> Assignments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfileAssignment>>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#endif
        /// <summary>Profile creation time</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Description of the profile</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceNameTemplate
        {
            get { return BackingStore?.Get<string?>("deviceNameTemplate"); }
            set { BackingStore?.Set("deviceNameTemplate", value); }
        }
#nullable restore
#else
        public string DeviceNameTemplate
        {
            get { return BackingStore?.Get<string>("deviceNameTemplate"); }
            set { BackingStore?.Set("deviceNameTemplate", value); }
        }
#endif
        /// <summary>The deviceType property</summary>
        public Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceType? DeviceType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceType?>("deviceType"); }
            set { BackingStore?.Set("deviceType", value); }
        }
        /// <summary>Name of the profile</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Enable Autopilot White Glove for the profile.</summary>
        public bool? EnableWhiteGlove
        {
            get { return BackingStore?.Get<bool?>("enableWhiteGlove"); }
            set { BackingStore?.Set("enableWhiteGlove", value); }
        }
        /// <summary>Enrollment status screen setting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.WindowsEnrollmentStatusScreenSettings? EnrollmentStatusScreenSettings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.WindowsEnrollmentStatusScreenSettings?>("enrollmentStatusScreenSettings"); }
            set { BackingStore?.Set("enrollmentStatusScreenSettings", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.WindowsEnrollmentStatusScreenSettings EnrollmentStatusScreenSettings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.WindowsEnrollmentStatusScreenSettings>("enrollmentStatusScreenSettings"); }
            set { BackingStore?.Set("enrollmentStatusScreenSettings", value); }
        }
#endif
        /// <summary>HardwareHash Extraction for the profile</summary>
        public bool? ExtractHardwareHash
        {
            get { return BackingStore?.Get<bool?>("extractHardwareHash"); }
            set { BackingStore?.Set("extractHardwareHash", value); }
        }
        /// <summary>Indicates whether the profile supports the extraction of hardware hash values and registration of the device into Windows Autopilot. When TRUE, indicates if hardware extraction and Windows Autopilot registration will happen on the next successful check-in. When FALSE, hardware hash extraction and Windows Autopilot registration will not happen. Default value is FALSE. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.</summary>
        public bool? HardwareHashExtractionEnabled
        {
            get { return BackingStore?.Get<bool?>("hardwareHashExtractionEnabled"); }
            set { BackingStore?.Set("hardwareHashExtractionEnabled", value); }
        }
        /// <summary>Language configured on the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language
        {
            get { return BackingStore?.Get<string?>("language"); }
            set { BackingStore?.Set("language", value); }
        }
#nullable restore
#else
        public string Language
        {
            get { return BackingStore?.Get<string>("language"); }
            set { BackingStore?.Set("language", value); }
        }
#endif
        /// <summary>Profile last modified time</summary>
        public DateTimeOffset? LastModifiedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastModifiedDateTime"); }
            set { BackingStore?.Set("lastModifiedDateTime", value); }
        }
        /// <summary>The locale (language) to be used when configuring the device. E.g. en-US. The default value is os-default. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Locale
        {
            get { return BackingStore?.Get<string?>("locale"); }
            set { BackingStore?.Set("locale", value); }
        }
#nullable restore
#else
        public string Locale
        {
            get { return BackingStore?.Get<string>("locale"); }
            set { BackingStore?.Set("locale", value); }
        }
#endif
        /// <summary>The Entra management service App ID which gets used during client device-based enrollment discovery. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManagementServiceAppId
        {
            get { return BackingStore?.Get<string?>("managementServiceAppId"); }
            set { BackingStore?.Set("managementServiceAppId", value); }
        }
#nullable restore
#else
        public string ManagementServiceAppId
        {
            get { return BackingStore?.Get<string>("managementServiceAppId"); }
            set { BackingStore?.Set("managementServiceAppId", value); }
        }
#endif
        /// <summary>The Windows Autopilot Deployment Profile settings used by the device for the out-of-box experience. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.OutOfBoxExperienceSetting? OutOfBoxExperienceSetting
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSetting?>("outOfBoxExperienceSetting"); }
            set { BackingStore?.Set("outOfBoxExperienceSetting", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.OutOfBoxExperienceSetting OutOfBoxExperienceSetting
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSetting>("outOfBoxExperienceSetting"); }
            set { BackingStore?.Set("outOfBoxExperienceSetting", value); }
        }
#endif
        /// <summary>Out of box experience setting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings? OutOfBoxExperienceSettings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings?>("outOfBoxExperienceSettings"); }
            set { BackingStore?.Set("outOfBoxExperienceSettings", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings OutOfBoxExperienceSettings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings>("outOfBoxExperienceSettings"); }
            set { BackingStore?.Set("outOfBoxExperienceSettings", value); }
        }
#endif
        /// <summary>Indicates whether the user is allowed to use Windows Autopilot for pre-provisioned deployment mode during Out of Box experience (OOBE). When TRUE, indicates that Windows Autopilot for pre-provisioned deployment mode for OOBE is allowed to be used. When false, Windows Autopilot for pre-provisioned deployment mode for OOBE is not allowed. The default is FALSE.</summary>
        public bool? PreprovisioningAllowed
        {
            get { return BackingStore?.Get<bool?>("preprovisioningAllowed"); }
            set { BackingStore?.Set("preprovisioningAllowed", value); }
        }
        /// <summary>Scope tags for the profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleScopeTagIds
        {
            get { return BackingStore?.Get<List<string>?>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#nullable restore
#else
        public List<string> RoleScopeTagIds
        {
            get { return BackingStore?.Get<List<string>>("roleScopeTagIds"); }
            set { BackingStore?.Set("roleScopeTagIds", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfile"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfile CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.activeDirectoryWindowsAutopilotDeploymentProfile" => new Microsoft.Graph.Beta.Models.ActiveDirectoryWindowsAutopilotDeploymentProfile(),
                "#microsoft.graph.azureADWindowsAutopilotDeploymentProfile" => new Microsoft.Graph.Beta.Models.AzureADWindowsAutopilotDeploymentProfile(),
                _ => new Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfile(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "assignedDevices", n => { AssignedDevices = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceIdentity>(Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceIdentity.CreateFromDiscriminatorValue)?.ToList(); } },
                { "assignments", n => { Assignments = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfileAssignment>(Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfileAssignment.CreateFromDiscriminatorValue)?.ToList(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "deviceNameTemplate", n => { DeviceNameTemplate = n.GetStringValue(); } },
                { "deviceType", n => { DeviceType = n.GetEnumValue<Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceType>(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "enableWhiteGlove", n => { EnableWhiteGlove = n.GetBoolValue(); } },
                { "enrollmentStatusScreenSettings", n => { EnrollmentStatusScreenSettings = n.GetObjectValue<Microsoft.Graph.Beta.Models.WindowsEnrollmentStatusScreenSettings>(Microsoft.Graph.Beta.Models.WindowsEnrollmentStatusScreenSettings.CreateFromDiscriminatorValue); } },
                { "extractHardwareHash", n => { ExtractHardwareHash = n.GetBoolValue(); } },
                { "hardwareHashExtractionEnabled", n => { HardwareHashExtractionEnabled = n.GetBoolValue(); } },
                { "language", n => { Language = n.GetStringValue(); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "locale", n => { Locale = n.GetStringValue(); } },
                { "managementServiceAppId", n => { ManagementServiceAppId = n.GetStringValue(); } },
                { "outOfBoxExperienceSetting", n => { OutOfBoxExperienceSetting = n.GetObjectValue<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSetting>(Microsoft.Graph.Beta.Models.OutOfBoxExperienceSetting.CreateFromDiscriminatorValue); } },
                { "outOfBoxExperienceSettings", n => { OutOfBoxExperienceSettings = n.GetObjectValue<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings>(Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings.CreateFromDiscriminatorValue); } },
                { "preprovisioningAllowed", n => { PreprovisioningAllowed = n.GetBoolValue(); } },
                { "roleScopeTagIds", n => { RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceIdentity>("assignedDevices", AssignedDevices);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.WindowsAutopilotDeploymentProfileAssignment>("assignments", Assignments);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("deviceNameTemplate", DeviceNameTemplate);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.WindowsAutopilotDeviceType>("deviceType", DeviceType);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("enableWhiteGlove", EnableWhiteGlove);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.WindowsEnrollmentStatusScreenSettings>("enrollmentStatusScreenSettings", EnrollmentStatusScreenSettings);
            writer.WriteBoolValue("extractHardwareHash", ExtractHardwareHash);
            writer.WriteBoolValue("hardwareHashExtractionEnabled", HardwareHashExtractionEnabled);
            writer.WriteStringValue("language", Language);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteStringValue("locale", Locale);
            writer.WriteStringValue("managementServiceAppId", ManagementServiceAppId);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSetting>("outOfBoxExperienceSetting", OutOfBoxExperienceSetting);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings>("outOfBoxExperienceSettings", OutOfBoxExperienceSettings);
            writer.WriteBoolValue("preprovisioningAllowed", PreprovisioningAllowed);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
        }
    }
}
