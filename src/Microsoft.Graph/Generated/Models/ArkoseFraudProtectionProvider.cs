// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ArkoseFraudProtectionProvider : global::Microsoft.Graph.Beta.Models.FraudProtectionProvider, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Used to invoke the Arkose service from the client application. Request from your Arkose Customer Success Manager or use the default client-api value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientSubDomain
        {
            get { return BackingStore?.Get<string?>("clientSubDomain"); }
            set { BackingStore?.Set("clientSubDomain", value); }
        }
#nullable restore
#else
        public string ClientSubDomain
        {
            get { return BackingStore?.Get<string>("clientSubDomain"); }
            set { BackingStore?.Set("clientSubDomain", value); }
        }
#endif
        /// <summary>The private key available on the Arkose Portal. Contact your Arkose Customer Success Manager for assistance with your keys.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrivateKey
        {
            get { return BackingStore?.Get<string?>("privateKey"); }
            set { BackingStore?.Set("privateKey", value); }
        }
#nullable restore
#else
        public string PrivateKey
        {
            get { return BackingStore?.Get<string>("privateKey"); }
            set { BackingStore?.Set("privateKey", value); }
        }
#endif
        /// <summary>The public key available on the Arkose Portal. Contact your Arkose Customer Success Manager for assistance with your keys.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicKey
        {
            get { return BackingStore?.Get<string?>("publicKey"); }
            set { BackingStore?.Set("publicKey", value); }
        }
#nullable restore
#else
        public string PublicKey
        {
            get { return BackingStore?.Get<string>("publicKey"); }
            set { BackingStore?.Set("publicKey", value); }
        }
#endif
        /// <summary>Used to invoke the Arkose service from the Microsoft authentication server. Request from your Arkose Customer Success Manager or use the default verify-api value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VerifySubDomain
        {
            get { return BackingStore?.Get<string?>("verifySubDomain"); }
            set { BackingStore?.Set("verifySubDomain", value); }
        }
#nullable restore
#else
        public string VerifySubDomain
        {
            get { return BackingStore?.Get<string>("verifySubDomain"); }
            set { BackingStore?.Set("verifySubDomain", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.ArkoseFraudProtectionProvider"/> and sets the default values.
        /// </summary>
        public ArkoseFraudProtectionProvider() : base()
        {
            OdataType = "#microsoft.graph.arkoseFraudProtectionProvider";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.ArkoseFraudProtectionProvider"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.ArkoseFraudProtectionProvider CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.ArkoseFraudProtectionProvider();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "clientSubDomain", n => { ClientSubDomain = n.GetStringValue(); } },
                { "privateKey", n => { PrivateKey = n.GetStringValue(); } },
                { "publicKey", n => { PublicKey = n.GetStringValue(); } },
                { "verifySubDomain", n => { VerifySubDomain = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("clientSubDomain", ClientSubDomain);
            writer.WriteStringValue("privateKey", PrivateKey);
            writer.WriteStringValue("publicKey", PublicKey);
            writer.WriteStringValue("verifySubDomain", VerifySubDomain);
        }
    }
}
#pragma warning restore CS0618
