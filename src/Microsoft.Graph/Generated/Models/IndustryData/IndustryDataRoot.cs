// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.IndustryData
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IndustryDataRoot : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Set of connectors for importing data from source systems.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector>? DataConnectors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector>?>("dataConnectors"); }
            set { BackingStore?.Set("dataConnectors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector> DataConnectors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector>>("dataConnectors"); }
            set { BackingStore?.Set("dataConnectors", value); }
        }
#endif
        /// <summary>Set of data import flow activities to bring data into the canonical store via a connector.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.InboundFlow>? InboundFlows
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.InboundFlow>?>("inboundFlows"); }
            set { BackingStore?.Set("inboundFlows", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.InboundFlow> InboundFlows
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.InboundFlow>>("inboundFlows"); }
            set { BackingStore?.Set("inboundFlows", value); }
        }
#endif
        /// <summary>Set of ephemeral operations that the system runs currently. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.LongRunningOperation>? Operations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.LongRunningOperation>?>("operations"); }
            set { BackingStore?.Set("operations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.LongRunningOperation> Operations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.LongRunningOperation>>("operations"); }
            set { BackingStore?.Set("operations", value); }
        }
#endif
        /// <summary>The outboundProvisioningFlowSets property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.OutboundProvisioningFlowSet>? OutboundProvisioningFlowSets
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.OutboundProvisioningFlowSet>?>("outboundProvisioningFlowSets"); }
            set { BackingStore?.Set("outboundProvisioningFlowSets", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.OutboundProvisioningFlowSet> OutboundProvisioningFlowSets
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.OutboundProvisioningFlowSet>>("outboundProvisioningFlowSets"); }
            set { BackingStore?.Set("outboundProvisioningFlowSets", value); }
        }
#endif
        /// <summary>Set of user modifiable system picker types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.ReferenceDefinition>? ReferenceDefinitions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.ReferenceDefinition>?>("referenceDefinitions"); }
            set { BackingStore?.Set("referenceDefinitions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.ReferenceDefinition> ReferenceDefinitions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.ReferenceDefinition>>("referenceDefinitions"); }
            set { BackingStore?.Set("referenceDefinitions", value); }
        }
#endif
        /// <summary>Set of groups of individual roles that makes role-based admin simpler.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.RoleGroup>? RoleGroups
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.RoleGroup>?>("roleGroups"); }
            set { BackingStore?.Set("roleGroups", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.RoleGroup> RoleGroups
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.RoleGroup>>("roleGroups"); }
            set { BackingStore?.Set("roleGroups", value); }
        }
#endif
        /// <summary>Set of ephemeral runs which present the point-in-time that diagnostic state of activities performed by the system. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRun>? Runs
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRun>?>("runs"); }
            set { BackingStore?.Set("runs", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRun> Runs
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRun>>("runs"); }
            set { BackingStore?.Set("runs", value); }
        }
#endif
        /// <summary>Set of source definitions that represents real-world external systems.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.SourceSystemDefinition>? SourceSystems
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.SourceSystemDefinition>?>("sourceSystems"); }
            set { BackingStore?.Set("sourceSystems", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.SourceSystemDefinition> SourceSystems
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.SourceSystemDefinition>>("sourceSystems"); }
            set { BackingStore?.Set("sourceSystems", value); }
        }
#endif
        /// <summary>Set of years represented in the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition>? Years
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition>?>("years"); }
            set { BackingStore?.Set("years", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition> Years
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition>>("years"); }
            set { BackingStore?.Set("years", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRoot"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRoot CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRoot();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "dataConnectors", n => { DataConnectors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector>(global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector.CreateFromDiscriminatorValue)?.AsList(); } },
                { "inboundFlows", n => { InboundFlows = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.InboundFlow>(global::Microsoft.Graph.Beta.Models.IndustryData.InboundFlow.CreateFromDiscriminatorValue)?.AsList(); } },
                { "operations", n => { Operations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.LongRunningOperation>(global::Microsoft.Graph.Beta.Models.LongRunningOperation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "outboundProvisioningFlowSets", n => { OutboundProvisioningFlowSets = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.OutboundProvisioningFlowSet>(global::Microsoft.Graph.Beta.Models.IndustryData.OutboundProvisioningFlowSet.CreateFromDiscriminatorValue)?.AsList(); } },
                { "referenceDefinitions", n => { ReferenceDefinitions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.ReferenceDefinition>(global::Microsoft.Graph.Beta.Models.IndustryData.ReferenceDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "roleGroups", n => { RoleGroups = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.RoleGroup>(global::Microsoft.Graph.Beta.Models.IndustryData.RoleGroup.CreateFromDiscriminatorValue)?.AsList(); } },
                { "runs", n => { Runs = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRun>(global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRun.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sourceSystems", n => { SourceSystems = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.SourceSystemDefinition>(global::Microsoft.Graph.Beta.Models.IndustryData.SourceSystemDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "years", n => { Years = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition>(global::Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector>("dataConnectors", DataConnectors);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.InboundFlow>("inboundFlows", InboundFlows);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.LongRunningOperation>("operations", Operations);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.OutboundProvisioningFlowSet>("outboundProvisioningFlowSets", OutboundProvisioningFlowSets);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.ReferenceDefinition>("referenceDefinitions", ReferenceDefinitions);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.RoleGroup>("roleGroups", RoleGroups);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRun>("runs", Runs);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.SourceSystemDefinition>("sourceSystems", SourceSystems);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition>("years", Years);
        }
    }
}
#pragma warning restore CS0618
