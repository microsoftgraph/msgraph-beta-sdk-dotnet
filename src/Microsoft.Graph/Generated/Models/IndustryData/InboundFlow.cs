// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models.IndustryData
{
    #pragma warning disable CS1591
    public class InboundFlow : Microsoft.Graph.Beta.Models.IndustryData.IndustryDataActivity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The dataConnector property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector? DataConnector
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector?>("dataConnector"); }
            set { BackingStore?.Set("dataConnector", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector DataConnector
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector>("dataConnector"); }
            set { BackingStore?.Set("dataConnector", value); }
        }
#endif
        /// <summary>The dataDomain property</summary>
        public Microsoft.Graph.Beta.Models.IndustryData.InboundDomain? DataDomain
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IndustryData.InboundDomain?>("dataDomain"); }
            set { BackingStore?.Set("dataDomain", value); }
        }
        /// <summary>The start of the time window when the flow is allowed to run. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? EffectiveDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("effectiveDateTime"); }
            set { BackingStore?.Set("effectiveDateTime", value); }
        }
        /// <summary>The end of the time window when the flow is allowed to run. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? ExpirationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("expirationDateTime"); }
            set { BackingStore?.Set("expirationDateTime", value); }
        }
        /// <summary>The year property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition? Year
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition?>("year"); }
            set { BackingStore?.Set("year", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition Year
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition>("year"); }
            set { BackingStore?.Set("year", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.IndustryData.InboundFlow"/> and sets the default values.
        /// </summary>
        public InboundFlow() : base()
        {
            OdataType = "#microsoft.graph.industryData.inboundFlow";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.IndustryData.InboundFlow"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.IndustryData.InboundFlow CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.industryData.inboundFileFlow" => new Microsoft.Graph.Beta.Models.IndustryData.InboundFileFlow(),
                _ => new Microsoft.Graph.Beta.Models.IndustryData.InboundFlow(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "dataConnector", n => { DataConnector = n.GetObjectValue<Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector>(Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector.CreateFromDiscriminatorValue); } },
                { "dataDomain", n => { DataDomain = n.GetEnumValue<Microsoft.Graph.Beta.Models.IndustryData.InboundDomain>(); } },
                { "effectiveDateTime", n => { EffectiveDateTime = n.GetDateTimeOffsetValue(); } },
                { "expirationDateTime", n => { ExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "year", n => { Year = n.GetObjectValue<Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition>(Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.IndustryData.IndustryDataConnector>("dataConnector", DataConnector);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.IndustryData.InboundDomain>("dataDomain", DataDomain);
            writer.WriteDateTimeOffsetValue("effectiveDateTime", EffectiveDateTime);
            writer.WriteDateTimeOffsetValue("expirationDateTime", ExpirationDateTime);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.IndustryData.YearTimePeriodDefinition>("year", Year);
        }
    }
}
