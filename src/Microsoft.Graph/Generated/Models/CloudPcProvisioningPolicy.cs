// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class CloudPcProvisioningPolicy : Entity, IParsable {
        /// <summary>The URL of the alternate resource that links to this provisioning policy. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlternateResourceUrl {
            get { return BackingStore?.Get<string?>("alternateResourceUrl"); }
            set { BackingStore?.Set("alternateResourceUrl", value); }
        }
#nullable restore
#else
        public string AlternateResourceUrl {
            get { return BackingStore?.Get<string>("alternateResourceUrl"); }
            set { BackingStore?.Set("alternateResourceUrl", value); }
        }
#endif
        /// <summary>A defined collection of provisioning policy assignments. Represents the set of Microsoft 365 groups and security groups in Microsoft Entra ID that have provisioning policy assigned. Returned only on $expand. For an example about how to get the assignments relationship, see Get cloudPcProvisioningPolicy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CloudPcProvisioningPolicyAssignment>? Assignments {
            get { return BackingStore?.Get<List<CloudPcProvisioningPolicyAssignment>?>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#nullable restore
#else
        public List<CloudPcProvisioningPolicyAssignment> Assignments {
            get { return BackingStore?.Get<List<CloudPcProvisioningPolicyAssignment>>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#endif
        /// <summary>The display name of the Cloud PC group that the Cloud PCs reside in. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloudPcGroupDisplayName {
            get { return BackingStore?.Get<string?>("cloudPcGroupDisplayName"); }
            set { BackingStore?.Set("cloudPcGroupDisplayName", value); }
        }
#nullable restore
#else
        public string CloudPcGroupDisplayName {
            get { return BackingStore?.Get<string>("cloudPcGroupDisplayName"); }
            set { BackingStore?.Set("cloudPcGroupDisplayName", value); }
        }
#endif
        /// <summary>The template used to name Cloud PCs provisioned using this policy. This can contain custom text and replacement tokens, including %USERNAME:x% and %RAND:x%, which represent the user&apos;s name and a randomly generated number, respectively. For example, &apos;CPC-%USERNAME:4%-%RAND:5%&apos; means that the Cloud PC&apos;s name will start with &apos;CPC-&apos;, have a four-character username in the middle followed by a &apos;-&apos; character, and end with five random characters. The total length of the text generated by the template can be no more than 15 characters. Supports $filter, $select, $orderby.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloudPcNamingTemplate {
            get { return BackingStore?.Get<string?>("cloudPcNamingTemplate"); }
            set { BackingStore?.Set("cloudPcNamingTemplate", value); }
        }
#nullable restore
#else
        public string CloudPcNamingTemplate {
            get { return BackingStore?.Get<string>("cloudPcNamingTemplate"); }
            set { BackingStore?.Set("cloudPcNamingTemplate", value); }
        }
#endif
        /// <summary>The provisioning policy description.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The display name for the provisioning policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Specifies how Cloud PCs will join Microsoft Entra ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CloudPcDomainJoinConfiguration? DomainJoinConfiguration {
            get { return BackingStore?.Get<CloudPcDomainJoinConfiguration?>("domainJoinConfiguration"); }
            set { BackingStore?.Set("domainJoinConfiguration", value); }
        }
#nullable restore
#else
        public CloudPcDomainJoinConfiguration DomainJoinConfiguration {
            get { return BackingStore?.Get<CloudPcDomainJoinConfiguration>("domainJoinConfiguration"); }
            set { BackingStore?.Set("domainJoinConfiguration", value); }
        }
#endif
        /// <summary>The domainJoinConfigurations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CloudPcDomainJoinConfiguration>? DomainJoinConfigurations {
            get { return BackingStore?.Get<List<CloudPcDomainJoinConfiguration>?>("domainJoinConfigurations"); }
            set { BackingStore?.Set("domainJoinConfigurations", value); }
        }
#nullable restore
#else
        public List<CloudPcDomainJoinConfiguration> DomainJoinConfigurations {
            get { return BackingStore?.Get<List<CloudPcDomainJoinConfiguration>>("domainJoinConfigurations"); }
            set { BackingStore?.Set("domainJoinConfigurations", value); }
        }
#endif
        /// <summary>True if the provisioned Cloud PC can be accessed by single sign-on. False indicates that the provisioned Cloud PC doesn&apos;t support this feature. Default value is false. Windows 365 users can use single sign-on to authenticate to Microsoft Entra ID with passwordless options (for example, FIDO keys) to access their Cloud PC. Optional.</summary>
        public bool? EnableSingleSignOn {
            get { return BackingStore?.Get<bool?>("enableSingleSignOn"); }
            set { BackingStore?.Set("enableSingleSignOn", value); }
        }
        /// <summary>The number of hours to wait before reprovisioning/deprovisioning happens. Read-only.</summary>
        public int? GracePeriodInHours {
            get { return BackingStore?.Get<int?>("gracePeriodInHours"); }
            set { BackingStore?.Set("gracePeriodInHours", value); }
        }
        /// <summary>The display name for the OS image youâ€™re provisioning.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageDisplayName {
            get { return BackingStore?.Get<string?>("imageDisplayName"); }
            set { BackingStore?.Set("imageDisplayName", value); }
        }
#nullable restore
#else
        public string ImageDisplayName {
            get { return BackingStore?.Get<string>("imageDisplayName"); }
            set { BackingStore?.Set("imageDisplayName", value); }
        }
#endif
        /// <summary>The ID of the OS image you want to provision on Cloud PCs. The format for a gallery type image is: {publisheroffersku}. Supported values for each of the parameters are as follows:publisher: Microsoftwindowsdesktop. offer: windows-ent-cpc. sku: 21h1-ent-cpc-m365, 21h1-ent-cpc-os, 20h2-ent-cpc-m365, 20h2-ent-cpc-os, 20h1-ent-cpc-m365, 20h1-ent-cpc-os, 19h2-ent-cpc-m365 and 19h2-ent-cpc-os.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageId {
            get { return BackingStore?.Get<string?>("imageId"); }
            set { BackingStore?.Set("imageId", value); }
        }
#nullable restore
#else
        public string ImageId {
            get { return BackingStore?.Get<string>("imageId"); }
            set { BackingStore?.Set("imageId", value); }
        }
#endif
        /// <summary>The imageType property</summary>
        public CloudPcProvisioningPolicyImageType? ImageType {
            get { return BackingStore?.Get<CloudPcProvisioningPolicyImageType?>("imageType"); }
            set { BackingStore?.Set("imageType", value); }
        }
        /// <summary>Indicates whether the local admin option is enabled. If the local admin option is enabled, the end user can be an admin of the Cloud PC device. Read-only.</summary>
        public bool? LocalAdminEnabled {
            get { return BackingStore?.Get<bool?>("localAdminEnabled"); }
            set { BackingStore?.Set("localAdminEnabled", value); }
        }
        /// <summary>The managedBy property</summary>
        public CloudPcManagementService? ManagedBy {
            get { return BackingStore?.Get<CloudPcManagementService?>("managedBy"); }
            set { BackingStore?.Set("managedBy", value); }
        }
        /// <summary>The specific settings for the Microsoft Managed Desktop, which enables customers to get a managed device experience for the Cloud PC. Before you can enable Microsoft Managed Desktop, an admin must configure it.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.MicrosoftManagedDesktop? MicrosoftManagedDesktop {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.MicrosoftManagedDesktop?>("microsoftManagedDesktop"); }
            set { BackingStore?.Set("microsoftManagedDesktop", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.MicrosoftManagedDesktop MicrosoftManagedDesktop {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.MicrosoftManagedDesktop>("microsoftManagedDesktop"); }
            set { BackingStore?.Set("microsoftManagedDesktop", value); }
        }
#endif
        /// <summary>The ID of the cloudPcOnPremisesConnection. To ensure that Cloud PCs have network connectivity and that they domain join, choose a connection with a virtual network thatâ€™s validated by the Cloud PC service.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesConnectionId {
            get { return BackingStore?.Get<string?>("onPremisesConnectionId"); }
            set { BackingStore?.Set("onPremisesConnectionId", value); }
        }
#nullable restore
#else
        public string OnPremisesConnectionId {
            get { return BackingStore?.Get<string>("onPremisesConnectionId"); }
            set { BackingStore?.Set("onPremisesConnectionId", value); }
        }
#endif
        /// <summary>Specifies the type of license used when provisioning Cloud PCs using this policy. By default, the license type is dedicated if the provisioningType isn&apos;t specified when you create the cloudPcProvisioningPolicy. You can&apos;t change this property after the cloudPcProvisioningPolicy was created. Possible values are: dedicated, shared, unknownFutureValue.</summary>
        public CloudPcProvisioningType? ProvisioningType {
            get { return BackingStore?.Get<CloudPcProvisioningType?>("provisioningType"); }
            set { BackingStore?.Set("provisioningType", value); }
        }
        /// <summary>The scopeIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ScopeIds {
            get { return BackingStore?.Get<List<string>?>("scopeIds"); }
            set { BackingStore?.Set("scopeIds", value); }
        }
#nullable restore
#else
        public List<string> ScopeIds {
            get { return BackingStore?.Get<List<string>>("scopeIds"); }
            set { BackingStore?.Set("scopeIds", value); }
        }
#endif
        /// <summary>The windowsSetting property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CloudPcWindowsSetting? WindowsSetting {
            get { return BackingStore?.Get<CloudPcWindowsSetting?>("windowsSetting"); }
            set { BackingStore?.Set("windowsSetting", value); }
        }
#nullable restore
#else
        public CloudPcWindowsSetting WindowsSetting {
            get { return BackingStore?.Get<CloudPcWindowsSetting>("windowsSetting"); }
            set { BackingStore?.Set("windowsSetting", value); }
        }
#endif
        /// <summary>Specific Windows settings to configure while creating Cloud PCs for this provisioning policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CloudPcWindowsSettings? WindowsSettings {
            get { return BackingStore?.Get<CloudPcWindowsSettings?>("windowsSettings"); }
            set { BackingStore?.Set("windowsSettings", value); }
        }
#nullable restore
#else
        public CloudPcWindowsSettings WindowsSettings {
            get { return BackingStore?.Get<CloudPcWindowsSettings>("windowsSettings"); }
            set { BackingStore?.Set("windowsSettings", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new CloudPcProvisioningPolicy CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CloudPcProvisioningPolicy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"alternateResourceUrl", n => { AlternateResourceUrl = n.GetStringValue(); } },
                {"assignments", n => { Assignments = n.GetCollectionOfObjectValues<CloudPcProvisioningPolicyAssignment>(CloudPcProvisioningPolicyAssignment.CreateFromDiscriminatorValue)?.ToList(); } },
                {"cloudPcGroupDisplayName", n => { CloudPcGroupDisplayName = n.GetStringValue(); } },
                {"cloudPcNamingTemplate", n => { CloudPcNamingTemplate = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"domainJoinConfiguration", n => { DomainJoinConfiguration = n.GetObjectValue<CloudPcDomainJoinConfiguration>(CloudPcDomainJoinConfiguration.CreateFromDiscriminatorValue); } },
                {"domainJoinConfigurations", n => { DomainJoinConfigurations = n.GetCollectionOfObjectValues<CloudPcDomainJoinConfiguration>(CloudPcDomainJoinConfiguration.CreateFromDiscriminatorValue)?.ToList(); } },
                {"enableSingleSignOn", n => { EnableSingleSignOn = n.GetBoolValue(); } },
                {"gracePeriodInHours", n => { GracePeriodInHours = n.GetIntValue(); } },
                {"imageDisplayName", n => { ImageDisplayName = n.GetStringValue(); } },
                {"imageId", n => { ImageId = n.GetStringValue(); } },
                {"imageType", n => { ImageType = n.GetEnumValue<CloudPcProvisioningPolicyImageType>(); } },
                {"localAdminEnabled", n => { LocalAdminEnabled = n.GetBoolValue(); } },
                {"managedBy", n => { ManagedBy = n.GetEnumValue<CloudPcManagementService>(); } },
                {"microsoftManagedDesktop", n => { MicrosoftManagedDesktop = n.GetObjectValue<Microsoft.Graph.Beta.Models.MicrosoftManagedDesktop>(Microsoft.Graph.Beta.Models.MicrosoftManagedDesktop.CreateFromDiscriminatorValue); } },
                {"onPremisesConnectionId", n => { OnPremisesConnectionId = n.GetStringValue(); } },
                {"provisioningType", n => { ProvisioningType = n.GetEnumValue<CloudPcProvisioningType>(); } },
                {"scopeIds", n => { ScopeIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"windowsSetting", n => { WindowsSetting = n.GetObjectValue<CloudPcWindowsSetting>(CloudPcWindowsSetting.CreateFromDiscriminatorValue); } },
                {"windowsSettings", n => { WindowsSettings = n.GetObjectValue<CloudPcWindowsSettings>(CloudPcWindowsSettings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("alternateResourceUrl", AlternateResourceUrl);
            writer.WriteCollectionOfObjectValues<CloudPcProvisioningPolicyAssignment>("assignments", Assignments);
            writer.WriteStringValue("cloudPcGroupDisplayName", CloudPcGroupDisplayName);
            writer.WriteStringValue("cloudPcNamingTemplate", CloudPcNamingTemplate);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<CloudPcDomainJoinConfiguration>("domainJoinConfiguration", DomainJoinConfiguration);
            writer.WriteCollectionOfObjectValues<CloudPcDomainJoinConfiguration>("domainJoinConfigurations", DomainJoinConfigurations);
            writer.WriteBoolValue("enableSingleSignOn", EnableSingleSignOn);
            writer.WriteIntValue("gracePeriodInHours", GracePeriodInHours);
            writer.WriteStringValue("imageDisplayName", ImageDisplayName);
            writer.WriteStringValue("imageId", ImageId);
            writer.WriteEnumValue<CloudPcProvisioningPolicyImageType>("imageType", ImageType);
            writer.WriteBoolValue("localAdminEnabled", LocalAdminEnabled);
            writer.WriteEnumValue<CloudPcManagementService>("managedBy", ManagedBy);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.MicrosoftManagedDesktop>("microsoftManagedDesktop", MicrosoftManagedDesktop);
            writer.WriteStringValue("onPremisesConnectionId", OnPremisesConnectionId);
            writer.WriteEnumValue<CloudPcProvisioningType>("provisioningType", ProvisioningType);
            writer.WriteCollectionOfPrimitiveValues<string>("scopeIds", ScopeIds);
            writer.WriteObjectValue<CloudPcWindowsSetting>("windowsSetting", WindowsSetting);
            writer.WriteObjectValue<CloudPcWindowsSettings>("windowsSettings", WindowsSettings);
        }
    }
}
