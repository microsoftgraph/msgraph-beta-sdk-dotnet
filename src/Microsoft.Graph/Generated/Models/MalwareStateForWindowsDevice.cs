// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Malware state for a windows device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MalwareStateForWindowsDevice : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>Indicates the number of times the malware is detected</summary>
        public int? DetectionCount
        {
            get { return BackingStore?.Get<int?>("detectionCount"); }
            set { BackingStore?.Set("detectionCount", value); }
        }
        /// <summary>Indicates the name of the device being evaluated for malware state</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceName
        {
            get { return BackingStore?.Get<string?>("deviceName"); }
            set { BackingStore?.Set("deviceName", value); }
        }
#nullable restore
#else
        public string DeviceName
        {
            get { return BackingStore?.Get<string>("deviceName"); }
            set { BackingStore?.Set("deviceName", value); }
        }
#endif
        /// <summary>Indicates execution status of the malware. Possible values are: unknown, blocked, allowed, running, notRunning. Defaults to unknown. Possible values are: unknown, blocked, allowed, running, notRunning.</summary>
        public global::Microsoft.Graph.Beta.Models.WindowsMalwareExecutionState? ExecutionState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WindowsMalwareExecutionState?>("executionState"); }
            set { BackingStore?.Set("executionState", value); }
        }
        /// <summary>Initial detection datetime of the malware</summary>
        public DateTimeOffset? InitialDetectionDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("initialDetectionDateTime"); }
            set { BackingStore?.Set("initialDetectionDateTime", value); }
        }
        /// <summary>The last time this particular threat was changed</summary>
        public DateTimeOffset? LastStateChangeDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastStateChangeDateTime"); }
            set { BackingStore?.Set("lastStateChangeDateTime", value); }
        }
        /// <summary>Indicates threat status of the malware. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared. defaults to noStatusCleared. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.</summary>
        public global::Microsoft.Graph.Beta.Models.WindowsMalwareThreatState? ThreatState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WindowsMalwareThreatState?>("threatState"); }
            set { BackingStore?.Set("threatState", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.MalwareStateForWindowsDevice"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.MalwareStateForWindowsDevice CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.MalwareStateForWindowsDevice();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "detectionCount", n => { DetectionCount = n.GetIntValue(); } },
                { "deviceName", n => { DeviceName = n.GetStringValue(); } },
                { "executionState", n => { ExecutionState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.WindowsMalwareExecutionState>(); } },
                { "initialDetectionDateTime", n => { InitialDetectionDateTime = n.GetDateTimeOffsetValue(); } },
                { "lastStateChangeDateTime", n => { LastStateChangeDateTime = n.GetDateTimeOffsetValue(); } },
                { "threatState", n => { ThreatState = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.WindowsMalwareThreatState>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("detectionCount", DetectionCount);
            writer.WriteStringValue("deviceName", DeviceName);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.WindowsMalwareExecutionState>("executionState", ExecutionState);
            writer.WriteDateTimeOffsetValue("initialDetectionDateTime", InitialDetectionDateTime);
            writer.WriteDateTimeOffsetValue("lastStateChangeDateTime", LastStateChangeDateTime);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.WindowsMalwareThreatState>("threatState", ThreatState);
        }
    }
}
#pragma warning restore CS0618
