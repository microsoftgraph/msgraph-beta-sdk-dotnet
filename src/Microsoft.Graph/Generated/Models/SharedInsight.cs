// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class SharedInsight : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Details about the shared item. Read only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.SharingDetail? LastShared
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.SharingDetail?>("lastShared"); }
            set { BackingStore?.Set("lastShared", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.SharingDetail LastShared
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.SharingDetail>("lastShared"); }
            set { BackingStore?.Set("lastShared", value); }
        }
#endif
        /// <summary>The lastSharedMethod property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Entity? LastSharedMethod
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Entity?>("lastSharedMethod"); }
            set { BackingStore?.Set("lastSharedMethod", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Entity LastSharedMethod
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Entity>("lastSharedMethod"); }
            set { BackingStore?.Set("lastSharedMethod", value); }
        }
#endif
        /// <summary>Used for navigating to the item that was shared. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Entity? Resource
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Entity?>("resource"); }
            set { BackingStore?.Set("resource", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Entity Resource
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Entity>("resource"); }
            set { BackingStore?.Set("resource", value); }
        }
#endif
        /// <summary>Reference properties of the shared document, such as the url and type of the document. Read-only</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ResourceReference? ResourceReference
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ResourceReference?>("resourceReference"); }
            set { BackingStore?.Set("resourceReference", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ResourceReference ResourceReference
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ResourceReference>("resourceReference"); }
            set { BackingStore?.Set("resourceReference", value); }
        }
#endif
        /// <summary>Properties that you can use to visualize the document in your experience. Read-only</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ResourceVisualization? ResourceVisualization
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ResourceVisualization?>("resourceVisualization"); }
            set { BackingStore?.Set("resourceVisualization", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ResourceVisualization ResourceVisualization
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ResourceVisualization>("resourceVisualization"); }
            set { BackingStore?.Set("resourceVisualization", value); }
        }
#endif
        /// <summary>The sharingHistory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.SharingDetail>? SharingHistory
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.SharingDetail>?>("sharingHistory"); }
            set { BackingStore?.Set("sharingHistory", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.SharingDetail> SharingHistory
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.SharingDetail>>("sharingHistory"); }
            set { BackingStore?.Set("sharingHistory", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.SharedInsight"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.SharedInsight CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.SharedInsight();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "lastShared", n => { LastShared = n.GetObjectValue<Microsoft.Graph.Beta.Models.SharingDetail>(Microsoft.Graph.Beta.Models.SharingDetail.CreateFromDiscriminatorValue); } },
                { "lastSharedMethod", n => { LastSharedMethod = n.GetObjectValue<Microsoft.Graph.Beta.Models.Entity>(Microsoft.Graph.Beta.Models.Entity.CreateFromDiscriminatorValue); } },
                { "resource", n => { Resource = n.GetObjectValue<Microsoft.Graph.Beta.Models.Entity>(Microsoft.Graph.Beta.Models.Entity.CreateFromDiscriminatorValue); } },
                { "resourceReference", n => { ResourceReference = n.GetObjectValue<Microsoft.Graph.Beta.Models.ResourceReference>(Microsoft.Graph.Beta.Models.ResourceReference.CreateFromDiscriminatorValue); } },
                { "resourceVisualization", n => { ResourceVisualization = n.GetObjectValue<Microsoft.Graph.Beta.Models.ResourceVisualization>(Microsoft.Graph.Beta.Models.ResourceVisualization.CreateFromDiscriminatorValue); } },
                { "sharingHistory", n => { SharingHistory = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.SharingDetail>(Microsoft.Graph.Beta.Models.SharingDetail.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.SharingDetail>("lastShared", LastShared);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Entity>("lastSharedMethod", LastSharedMethod);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Entity>("resource", Resource);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.SharingDetail>("sharingHistory", SharingHistory);
        }
    }
}
