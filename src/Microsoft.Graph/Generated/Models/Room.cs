// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Room : global::Microsoft.Graph.Beta.Models.Place, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The name of the audio device that is available in the room.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AudioDeviceName
        {
            get { return BackingStore?.Get<string?>("audioDeviceName"); }
            set { BackingStore?.Set("audioDeviceName", value); }
        }
#nullable restore
#else
        public string AudioDeviceName
        {
            get { return BackingStore?.Get<string>("audioDeviceName"); }
            set { BackingStore?.Set("audioDeviceName", value); }
        }
#endif
        /// <summary>Specifies how the room can be booked. Possible values are:unknown - Unspecified booking behavior. We don&apos;t recommend that you use this value.standard - Available for general booking.reserved - Reserved for specific users or purposes.</summary>
        public global::Microsoft.Graph.Beta.Models.BookingType? BookingType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.BookingType?>("bookingType"); }
            set { BackingStore?.Set("bookingType", value); }
        }
        /// <summary>The name or identifier of the building where the room is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Building
        {
            get { return BackingStore?.Get<string?>("building"); }
            set { BackingStore?.Set("building", value); }
        }
#nullable restore
#else
        public string Building
        {
            get { return BackingStore?.Get<string>("building"); }
            set { BackingStore?.Set("building", value); }
        }
#endif
        /// <summary>The maximum number of people the room can accommodate.</summary>
        public int? Capacity
        {
            get { return BackingStore?.Get<int?>("capacity"); }
            set { BackingStore?.Set("capacity", value); }
        }
        /// <summary>The name of the display device (for example, monitor or projector) that is available in the room.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayDeviceName
        {
            get { return BackingStore?.Get<string?>("displayDeviceName"); }
            set { BackingStore?.Set("displayDeviceName", value); }
        }
#nullable restore
#else
        public string DisplayDeviceName
        {
            get { return BackingStore?.Get<string>("displayDeviceName"); }
            set { BackingStore?.Set("displayDeviceName", value); }
        }
#endif
        /// <summary>The email address associated with the room. This email address is used for booking.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress
        {
            get { return BackingStore?.Get<string?>("emailAddress"); }
            set { BackingStore?.Set("emailAddress", value); }
        }
#nullable restore
#else
        public string EmailAddress
        {
            get { return BackingStore?.Get<string>("emailAddress"); }
            set { BackingStore?.Set("emailAddress", value); }
        }
#endif
        /// <summary>A human-readable label for the floor; for example, Ground Floor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FloorLabel
        {
            get { return BackingStore?.Get<string?>("floorLabel"); }
            set { BackingStore?.Set("floorLabel", value); }
        }
#nullable restore
#else
        public string FloorLabel
        {
            get { return BackingStore?.Get<string>("floorLabel"); }
            set { BackingStore?.Set("floorLabel", value); }
        }
#endif
        /// <summary>The numeric floor level within the building. For example, 1 for first floor, 2 for second floor, and so on.</summary>
        public int? FloorNumber
        {
            get { return BackingStore?.Get<int?>("floorNumber"); }
            set { BackingStore?.Set("floorNumber", value); }
        }
        /// <summary>Indicates whether the room is configured with the Microsoft Teams Rooms system.</summary>
        public bool? IsTeamsEnabled
        {
            get { return BackingStore?.Get<bool?>("isTeamsEnabled"); }
            set { BackingStore?.Set("isTeamsEnabled", value); }
        }
        /// <summary>A short, friendly name for the room, often used for easier identification or display in UI.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nickname
        {
            get { return BackingStore?.Get<string?>("nickname"); }
            set { BackingStore?.Set("nickname", value); }
        }
#nullable restore
#else
        public string Nickname
        {
            get { return BackingStore?.Get<string>("nickname"); }
            set { BackingStore?.Set("nickname", value); }
        }
#endif
        /// <summary>The name of the video device that is available in the room.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoDeviceName
        {
            get { return BackingStore?.Get<string?>("videoDeviceName"); }
            set { BackingStore?.Set("videoDeviceName", value); }
        }
#nullable restore
#else
        public string VideoDeviceName
        {
            get { return BackingStore?.Get<string>("videoDeviceName"); }
            set { BackingStore?.Set("videoDeviceName", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.Room"/> and sets the default values.
        /// </summary>
        public Room() : base()
        {
            OdataType = "#microsoft.graph.room";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Room"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Room CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Room();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "audioDeviceName", n => { AudioDeviceName = n.GetStringValue(); } },
                { "bookingType", n => { BookingType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.BookingType>(); } },
                { "building", n => { Building = n.GetStringValue(); } },
                { "capacity", n => { Capacity = n.GetIntValue(); } },
                { "displayDeviceName", n => { DisplayDeviceName = n.GetStringValue(); } },
                { "emailAddress", n => { EmailAddress = n.GetStringValue(); } },
                { "floorLabel", n => { FloorLabel = n.GetStringValue(); } },
                { "floorNumber", n => { FloorNumber = n.GetIntValue(); } },
                { "isTeamsEnabled", n => { IsTeamsEnabled = n.GetBoolValue(); } },
                { "nickname", n => { Nickname = n.GetStringValue(); } },
                { "videoDeviceName", n => { VideoDeviceName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("audioDeviceName", AudioDeviceName);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.BookingType>("bookingType", BookingType);
            writer.WriteStringValue("building", Building);
            writer.WriteIntValue("capacity", Capacity);
            writer.WriteStringValue("displayDeviceName", DisplayDeviceName);
            writer.WriteStringValue("emailAddress", EmailAddress);
            writer.WriteStringValue("floorLabel", FloorLabel);
            writer.WriteIntValue("floorNumber", FloorNumber);
            writer.WriteBoolValue("isTeamsEnabled", IsTeamsEnabled);
            writer.WriteStringValue("nickname", Nickname);
            writer.WriteStringValue("videoDeviceName", VideoDeviceName);
        }
    }
}
#pragma warning restore CS0618
