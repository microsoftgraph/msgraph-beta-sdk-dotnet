// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class Admin : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>The appsAndServices property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AdminAppsAndServices? AppsAndServices
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminAppsAndServices?>("appsAndServices"); }
            set { BackingStore?.Set("appsAndServices", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AdminAppsAndServices AppsAndServices
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminAppsAndServices>("appsAndServices"); }
            set { BackingStore?.Set("appsAndServices", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The dynamics property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AdminDynamics? Dynamics
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminDynamics?>("dynamics"); }
            set { BackingStore?.Set("dynamics", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AdminDynamics Dynamics
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminDynamics>("dynamics"); }
            set { BackingStore?.Set("dynamics", value); }
        }
#endif
        /// <summary>A container for Microsoft Edge resources. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Edge? Edge
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Edge?>("edge"); }
            set { BackingStore?.Set("edge", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Edge Edge
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Edge>("edge"); }
            set { BackingStore?.Set("edge", value); }
        }
#endif
        /// <summary>The forms property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AdminForms? Forms
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminForms?>("forms"); }
            set { BackingStore?.Set("forms", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AdminForms Forms
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminForms>("forms"); }
            set { BackingStore?.Set("forms", value); }
        }
#endif
        /// <summary>A container for the Microsoft 365 apps admin functionality.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AdminMicrosoft365Apps? Microsoft365Apps
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminMicrosoft365Apps?>("microsoft365Apps"); }
            set { BackingStore?.Set("microsoft365Apps", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AdminMicrosoft365Apps Microsoft365Apps
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminMicrosoft365Apps>("microsoft365Apps"); }
            set { BackingStore?.Set("microsoft365Apps", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>Represents a setting to control people-related admin settings in the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PeopleAdminSettings? People
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PeopleAdminSettings?>("people"); }
            set { BackingStore?.Set("people", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PeopleAdminSettings People
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PeopleAdminSettings>("people"); }
            set { BackingStore?.Set("people", value); }
        }
#endif
        /// <summary>A container for administrative resources to manage reports.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AdminReportSettings? ReportSettings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminReportSettings?>("reportSettings"); }
            set { BackingStore?.Set("reportSettings", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AdminReportSettings ReportSettings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminReportSettings>("reportSettings"); }
            set { BackingStore?.Set("reportSettings", value); }
        }
#endif
        /// <summary>A container for service communications resources. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ServiceAnnouncement? ServiceAnnouncement
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ServiceAnnouncement?>("serviceAnnouncement"); }
            set { BackingStore?.Set("serviceAnnouncement", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ServiceAnnouncement ServiceAnnouncement
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ServiceAnnouncement>("serviceAnnouncement"); }
            set { BackingStore?.Set("serviceAnnouncement", value); }
        }
#endif
        /// <summary>The sharepoint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Sharepoint? Sharepoint
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Sharepoint?>("sharepoint"); }
            set { BackingStore?.Set("sharepoint", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Sharepoint Sharepoint
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Sharepoint>("sharepoint"); }
            set { BackingStore?.Set("sharepoint", value); }
        }
#endif
        /// <summary>The todo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AdminTodo? Todo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminTodo?>("todo"); }
            set { BackingStore?.Set("todo", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AdminTodo Todo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminTodo>("todo"); }
            set { BackingStore?.Set("todo", value); }
        }
#endif
        /// <summary>A container for all Windows administrator functionalities. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AdminWindows? Windows
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminWindows?>("windows"); }
            set { BackingStore?.Set("windows", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AdminWindows Windows
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AdminWindows>("windows"); }
            set { BackingStore?.Set("windows", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.Admin"/> and sets the default values.
        /// </summary>
        public Admin()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.Admin"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Microsoft.Graph.Beta.Models.Admin CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.Admin();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "appsAndServices", n => { AppsAndServices = n.GetObjectValue<Microsoft.Graph.Beta.Models.AdminAppsAndServices>(Microsoft.Graph.Beta.Models.AdminAppsAndServices.CreateFromDiscriminatorValue); } },
                { "dynamics", n => { Dynamics = n.GetObjectValue<Microsoft.Graph.Beta.Models.AdminDynamics>(Microsoft.Graph.Beta.Models.AdminDynamics.CreateFromDiscriminatorValue); } },
                { "edge", n => { Edge = n.GetObjectValue<Microsoft.Graph.Beta.Models.Edge>(Microsoft.Graph.Beta.Models.Edge.CreateFromDiscriminatorValue); } },
                { "forms", n => { Forms = n.GetObjectValue<Microsoft.Graph.Beta.Models.AdminForms>(Microsoft.Graph.Beta.Models.AdminForms.CreateFromDiscriminatorValue); } },
                { "microsoft365Apps", n => { Microsoft365Apps = n.GetObjectValue<Microsoft.Graph.Beta.Models.AdminMicrosoft365Apps>(Microsoft.Graph.Beta.Models.AdminMicrosoft365Apps.CreateFromDiscriminatorValue); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "people", n => { People = n.GetObjectValue<Microsoft.Graph.Beta.Models.PeopleAdminSettings>(Microsoft.Graph.Beta.Models.PeopleAdminSettings.CreateFromDiscriminatorValue); } },
                { "reportSettings", n => { ReportSettings = n.GetObjectValue<Microsoft.Graph.Beta.Models.AdminReportSettings>(Microsoft.Graph.Beta.Models.AdminReportSettings.CreateFromDiscriminatorValue); } },
                { "serviceAnnouncement", n => { ServiceAnnouncement = n.GetObjectValue<Microsoft.Graph.Beta.Models.ServiceAnnouncement>(Microsoft.Graph.Beta.Models.ServiceAnnouncement.CreateFromDiscriminatorValue); } },
                { "sharepoint", n => { Sharepoint = n.GetObjectValue<Microsoft.Graph.Beta.Models.Sharepoint>(Microsoft.Graph.Beta.Models.Sharepoint.CreateFromDiscriminatorValue); } },
                { "todo", n => { Todo = n.GetObjectValue<Microsoft.Graph.Beta.Models.AdminTodo>(Microsoft.Graph.Beta.Models.AdminTodo.CreateFromDiscriminatorValue); } },
                { "windows", n => { Windows = n.GetObjectValue<Microsoft.Graph.Beta.Models.AdminWindows>(Microsoft.Graph.Beta.Models.AdminWindows.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AdminAppsAndServices>("appsAndServices", AppsAndServices);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AdminDynamics>("dynamics", Dynamics);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Edge>("edge", Edge);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AdminForms>("forms", Forms);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AdminMicrosoft365Apps>("microsoft365Apps", Microsoft365Apps);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PeopleAdminSettings>("people", People);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AdminReportSettings>("reportSettings", ReportSettings);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.ServiceAnnouncement>("serviceAnnouncement", ServiceAnnouncement);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Sharepoint>("sharepoint", Sharepoint);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AdminTodo>("todo", Todo);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AdminWindows>("windows", Windows);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
