// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models.Networkaccess {
    public class Destination : IAdditionalDataHolder, IBackedModel, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData {
            get { return BackingStore?.Get<IDictionary<string, object>>("AdditionalData"); }
            set { BackingStore?.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The deviceCount property</summary>
        public int? DeviceCount {
            get { return BackingStore?.Get<int?>("deviceCount"); }
            set { BackingStore?.Set("deviceCount", value); }
        }
        /// <summary>The fqdn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fqdn {
            get { return BackingStore?.Get<string?>("fqdn"); }
            set { BackingStore?.Set("fqdn", value); }
        }
#nullable restore
#else
        public string Fqdn {
            get { return BackingStore?.Get<string>("fqdn"); }
            set { BackingStore?.Set("fqdn", value); }
        }
#endif
        /// <summary>The ip property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ip {
            get { return BackingStore?.Get<string?>("ip"); }
            set { BackingStore?.Set("ip", value); }
        }
#nullable restore
#else
        public string Ip {
            get { return BackingStore?.Get<string>("ip"); }
            set { BackingStore?.Set("ip", value); }
        }
#endif
        /// <summary>The lastAccessDateTime property</summary>
        public DateTimeOffset? LastAccessDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("lastAccessDateTime"); }
            set { BackingStore?.Set("lastAccessDateTime", value); }
        }
        /// <summary>The networkingProtocol property</summary>
        public Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol? NetworkingProtocol {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol?>("networkingProtocol"); }
            set { BackingStore?.Set("networkingProtocol", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The port property</summary>
        public int? Port {
            get { return BackingStore?.Get<int?>("port"); }
            set { BackingStore?.Set("port", value); }
        }
        /// <summary>The trafficType property</summary>
        public Microsoft.Graph.Beta.Models.Networkaccess.TrafficType? TrafficType {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Networkaccess.TrafficType?>("trafficType"); }
            set { BackingStore?.Set("trafficType", value); }
        }
        /// <summary>The transactionCount property</summary>
        public int? TransactionCount {
            get { return BackingStore?.Get<int?>("transactionCount"); }
            set { BackingStore?.Set("transactionCount", value); }
        }
        /// <summary>The userCount property</summary>
        public int? UserCount {
            get { return BackingStore?.Get<int?>("userCount"); }
            set { BackingStore?.Set("userCount", value); }
        }
        /// <summary>
        /// Instantiates a new destination and sets the default values.
        /// </summary>
        public Destination() {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Destination CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Destination();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"deviceCount", n => { DeviceCount = n.GetIntValue(); } },
                {"fqdn", n => { Fqdn = n.GetStringValue(); } },
                {"ip", n => { Ip = n.GetStringValue(); } },
                {"lastAccessDateTime", n => { LastAccessDateTime = n.GetDateTimeOffsetValue(); } },
                {"networkingProtocol", n => { NetworkingProtocol = n.GetEnumValue<NetworkingProtocol>(); } },
                {"@odata.type", n => { OdataType = n.GetStringValue(); } },
                {"port", n => { Port = n.GetIntValue(); } },
                {"trafficType", n => { TrafficType = n.GetEnumValue<TrafficType>(); } },
                {"transactionCount", n => { TransactionCount = n.GetIntValue(); } },
                {"userCount", n => { UserCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("deviceCount", DeviceCount);
            writer.WriteStringValue("fqdn", Fqdn);
            writer.WriteStringValue("ip", Ip);
            writer.WriteDateTimeOffsetValue("lastAccessDateTime", LastAccessDateTime);
            writer.WriteEnumValue<NetworkingProtocol>("networkingProtocol", NetworkingProtocol);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteIntValue("port", Port);
            writer.WriteEnumValue<TrafficType>("trafficType", TrafficType);
            writer.WriteIntValue("transactionCount", TransactionCount);
            writer.WriteIntValue("userCount", UserCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
