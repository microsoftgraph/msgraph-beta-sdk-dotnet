// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Networkaccess
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Alert : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>List of possible action items to take based on the alert (if applicable).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertAction>? Actions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertAction>?>("actions"); }
            set { BackingStore?.Set("actions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertAction> Actions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertAction>>("actions"); }
            set { BackingStore?.Set("actions", value); }
        }
#endif
        /// <summary>The alertType property</summary>
        public global::Microsoft.Graph.Beta.Models.Networkaccess.AlertType? AlertType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertType?>("alertType"); }
            set { BackingStore?.Set("alertType", value); }
        }
        /// <summary>Categories associated with the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Networkaccess.IntentCategory?>? Categories
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Networkaccess.IntentCategory?>?>("categories"); }
            set { BackingStore?.Set("categories", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Networkaccess.IntentCategory?> Categories
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Networkaccess.IntentCategory?>>("categories"); }
            set { BackingStore?.Set("categories", value); }
        }
#endif
        /// <summary>Component name related to the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ComponentName
        {
            get { return BackingStore?.Get<string?>("componentName"); }
            set { BackingStore?.Set("componentName", value); }
        }
#nullable restore
#else
        public string ComponentName
        {
            get { return BackingStore?.Get<string>("componentName"); }
            set { BackingStore?.Set("componentName", value); }
        }
#endif
        /// <summary>The time the alert was created in the system. Required.</summary>
        public DateTimeOffset? CreationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("creationDateTime"); }
            set { BackingStore?.Set("creationDateTime", value); }
        }
        /// <summary>Text description explaining the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>Alert detection technology.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DetectionTechnology
        {
            get { return BackingStore?.Get<string?>("detectionTechnology"); }
            set { BackingStore?.Set("detectionTechnology", value); }
        }
#nullable restore
#else
        public string DetectionTechnology
        {
            get { return BackingStore?.Get<string>("detectionTechnology"); }
            set { BackingStore?.Set("detectionTechnology", value); }
        }
#endif
        /// <summary>The display name of the alert. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Extended properties for the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Networkaccess.ExtendedProperties? ExtendedProperties
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.ExtendedProperties?>("extendedProperties"); }
            set { BackingStore?.Set("extendedProperties", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Networkaccess.ExtendedProperties ExtendedProperties
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.ExtendedProperties>("extendedProperties"); }
            set { BackingStore?.Set("extendedProperties", value); }
        }
#endif
        /// <summary>The time of the first activity related to the alert.</summary>
        public DateTimeOffset? FirstActivityDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("firstActivityDateTime"); }
            set { BackingStore?.Set("firstActivityDateTime", value); }
        }
        /// <summary>Indicates if the alert is a preview.</summary>
        public bool? IsPreview
        {
            get { return BackingStore?.Get<bool?>("isPreview"); }
            set { BackingStore?.Set("isPreview", value); }
        }
        /// <summary>The time of the last activity related to the alert.</summary>
        public DateTimeOffset? LastActivityDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastActivityDateTime"); }
            set { BackingStore?.Set("lastActivityDateTime", value); }
        }
        /// <summary>The filtering policy associated with the alert. This relationship allows you to retrieve or manage the filtering policy that triggered or is related to the alert instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicy? Policy
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicy?>("policy"); }
            set { BackingStore?.Set("policy", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicy Policy
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicy>("policy"); }
            set { BackingStore?.Set("policy", value); }
        }
#endif
        /// <summary>The name of the product that raised the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductName
        {
            get { return BackingStore?.Get<string?>("productName"); }
            set { BackingStore?.Set("productName", value); }
        }
#nullable restore
#else
        public string ProductName
        {
            get { return BackingStore?.Get<string>("productName"); }
            set { BackingStore?.Set("productName", value); }
        }
#endif
        /// <summary>List of related resources to the alert (if applicable).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Networkaccess.RelatedResource>? RelatedResources
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Networkaccess.RelatedResource>?>("relatedResources"); }
            set { BackingStore?.Set("relatedResources", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Networkaccess.RelatedResource> RelatedResources
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Networkaccess.RelatedResource>>("relatedResources"); }
            set { BackingStore?.Set("relatedResources", value); }
        }
#endif
        /// <summary>The severity property</summary>
        public global::Microsoft.Graph.Beta.Models.Networkaccess.AlertSeverity? Severity
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertSeverity?>("severity"); }
            set { BackingStore?.Set("severity", value); }
        }
        /// <summary>Sub-techniques associated with the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SubTechniques
        {
            get { return BackingStore?.Get<List<string>?>("subTechniques"); }
            set { BackingStore?.Set("subTechniques", value); }
        }
#nullable restore
#else
        public List<string> SubTechniques
        {
            get { return BackingStore?.Get<List<string>>("subTechniques"); }
            set { BackingStore?.Set("subTechniques", value); }
        }
#endif
        /// <summary>Techniques associated with the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Techniques
        {
            get { return BackingStore?.Get<List<string>?>("techniques"); }
            set { BackingStore?.Set("techniques", value); }
        }
#nullable restore
#else
        public List<string> Techniques
        {
            get { return BackingStore?.Get<List<string>>("techniques"); }
            set { BackingStore?.Set("techniques", value); }
        }
#endif
        /// <summary>The name of the vendor that raised the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VendorName
        {
            get { return BackingStore?.Get<string?>("vendorName"); }
            set { BackingStore?.Set("vendorName", value); }
        }
#nullable restore
#else
        public string VendorName
        {
            get { return BackingStore?.Get<string>("vendorName"); }
            set { BackingStore?.Set("vendorName", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Networkaccess.Alert"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Networkaccess.Alert CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Networkaccess.Alert();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "actions", n => { Actions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertAction>(global::Microsoft.Graph.Beta.Models.Networkaccess.AlertAction.CreateFromDiscriminatorValue)?.AsList(); } },
                { "alertType", n => { AlertType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertType>(); } },
                { "categories", n => { Categories = n.GetCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.Networkaccess.IntentCategory>()?.AsList(); } },
                { "componentName", n => { ComponentName = n.GetStringValue(); } },
                { "creationDateTime", n => { CreationDateTime = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "detectionTechnology", n => { DetectionTechnology = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "extendedProperties", n => { ExtendedProperties = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.ExtendedProperties>(global::Microsoft.Graph.Beta.Models.Networkaccess.ExtendedProperties.CreateFromDiscriminatorValue); } },
                { "firstActivityDateTime", n => { FirstActivityDateTime = n.GetDateTimeOffsetValue(); } },
                { "isPreview", n => { IsPreview = n.GetBoolValue(); } },
                { "lastActivityDateTime", n => { LastActivityDateTime = n.GetDateTimeOffsetValue(); } },
                { "policy", n => { Policy = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicy>(global::Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicy.CreateFromDiscriminatorValue); } },
                { "productName", n => { ProductName = n.GetStringValue(); } },
                { "relatedResources", n => { RelatedResources = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Networkaccess.RelatedResource>(global::Microsoft.Graph.Beta.Models.Networkaccess.RelatedResource.CreateFromDiscriminatorValue)?.AsList(); } },
                { "severity", n => { Severity = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertSeverity>(); } },
                { "subTechniques", n => { SubTechniques = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "techniques", n => { Techniques = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "vendorName", n => { VendorName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertAction>("actions", Actions);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertType>("alertType", AlertType);
            writer.WriteCollectionOfEnumValues<global::Microsoft.Graph.Beta.Models.Networkaccess.IntentCategory>("categories", Categories);
            writer.WriteStringValue("componentName", ComponentName);
            writer.WriteDateTimeOffsetValue("creationDateTime", CreationDateTime);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("detectionTechnology", DetectionTechnology);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.ExtendedProperties>("extendedProperties", ExtendedProperties);
            writer.WriteDateTimeOffsetValue("firstActivityDateTime", FirstActivityDateTime);
            writer.WriteBoolValue("isPreview", IsPreview);
            writer.WriteDateTimeOffsetValue("lastActivityDateTime", LastActivityDateTime);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicy>("policy", Policy);
            writer.WriteStringValue("productName", ProductName);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Networkaccess.RelatedResource>("relatedResources", RelatedResources);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.AlertSeverity>("severity", Severity);
            writer.WriteCollectionOfPrimitiveValues<string>("subTechniques", SubTechniques);
            writer.WriteCollectionOfPrimitiveValues<string>("techniques", Techniques);
            writer.WriteStringValue("vendorName", VendorName);
        }
    }
}
#pragma warning restore CS0618
