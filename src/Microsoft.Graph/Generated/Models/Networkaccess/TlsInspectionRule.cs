// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Networkaccess
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TlsInspectionRule : global::Microsoft.Graph.Beta.Models.Networkaccess.PolicyRule, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Optional description explaining the purpose of the rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The matchingConditions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionMatchingConditions? MatchingConditions
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionMatchingConditions?>("matchingConditions"); }
            set { BackingStore?.Set("matchingConditions", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionMatchingConditions MatchingConditions
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionMatchingConditions>("matchingConditions"); }
            set { BackingStore?.Set("matchingConditions", value); }
        }
#endif
        /// <summary>The priority of the rule. Rules are evaluated in ascending order of priority. Lower numbers indicate higher priority. Supports $filter (eq, ne, not, ge, le, in) and $orderby.</summary>
        public long? Priority
        {
            get { return BackingStore?.Get<long?>("priority"); }
            set { BackingStore?.Set("priority", value); }
        }
        /// <summary>The settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRuleSettings? Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRuleSettings?>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRuleSettings Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRuleSettings>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRule"/> and sets the default values.
        /// </summary>
        public TlsInspectionRule() : base()
        {
            OdataType = "#microsoft.graph.networkaccess.tlsInspectionRule";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "description", n => { Description = n.GetStringValue(); } },
                { "matchingConditions", n => { MatchingConditions = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionMatchingConditions>(global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionMatchingConditions.CreateFromDiscriminatorValue); } },
                { "priority", n => { Priority = n.GetLongValue(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRuleSettings>(global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRuleSettings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionMatchingConditions>("matchingConditions", MatchingConditions);
            writer.WriteLongValue("priority", Priority);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsInspectionRuleSettings>("settings", Settings);
        }
    }
}
#pragma warning restore CS0618
