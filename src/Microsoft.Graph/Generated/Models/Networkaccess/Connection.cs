// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Networkaccess
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Connection : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The version of the client that initiated the connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AgentVersion
        {
            get { return BackingStore?.Get<string?>("agentVersion"); }
            set { BackingStore?.Set("agentVersion", value); }
        }
#nullable restore
#else
        public string AgentVersion
        {
            get { return BackingStore?.Get<string>("agentVersion"); }
            set { BackingStore?.Set("agentVersion", value); }
        }
#endif
        /// <summary>appId (or client ID) of the destination Microsoft Entra application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Networkaccess.ApplicationSnapshot? ApplicationSnapshot
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.ApplicationSnapshot?>("applicationSnapshot"); }
            set { BackingStore?.Set("applicationSnapshot", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Networkaccess.ApplicationSnapshot ApplicationSnapshot
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.ApplicationSnapshot>("applicationSnapshot"); }
            set { BackingStore?.Set("applicationSnapshot", value); }
        }
#endif
        /// <summary>The time the connection was created.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The destination FQDN of the connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationFqdn
        {
            get { return BackingStore?.Get<string?>("destinationFqdn"); }
            set { BackingStore?.Set("destinationFqdn", value); }
        }
#nullable restore
#else
        public string DestinationFqdn
        {
            get { return BackingStore?.Get<string>("destinationFqdn"); }
            set { BackingStore?.Set("destinationFqdn", value); }
        }
#endif
        /// <summary>The destination IP of the connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationIp
        {
            get { return BackingStore?.Get<string?>("destinationIp"); }
            set { BackingStore?.Set("destinationIp", value); }
        }
#nullable restore
#else
        public string DestinationIp
        {
            get { return BackingStore?.Get<string>("destinationIp"); }
            set { BackingStore?.Set("destinationIp", value); }
        }
#endif
        /// <summary>The destination port of the connection.</summary>
        public int? DestinationPort
        {
            get { return BackingStore?.Get<int?>("destinationPort"); }
            set { BackingStore?.Set("destinationPort", value); }
        }
        /// <summary>The category of the device. The possible values are: client, branch, unknownFutureValue, remoteNetwork. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: remoteNetwork.</summary>
        public global::Microsoft.Graph.Beta.Models.Networkaccess.DeviceCategory? DeviceCategory
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.DeviceCategory?>("deviceCategory"); }
            set { BackingStore?.Set("deviceCategory", value); }
        }
        /// <summary>The DeviceID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId
        {
            get { return BackingStore?.Get<string?>("deviceId"); }
            set { BackingStore?.Set("deviceId", value); }
        }
#nullable restore
#else
        public string DeviceId
        {
            get { return BackingStore?.Get<string>("deviceId"); }
            set { BackingStore?.Set("deviceId", value); }
        }
#endif
        /// <summary>The device operating system type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceOperatingSystem
        {
            get { return BackingStore?.Get<string?>("deviceOperatingSystem"); }
            set { BackingStore?.Set("deviceOperatingSystem", value); }
        }
#nullable restore
#else
        public string DeviceOperatingSystem
        {
            get { return BackingStore?.Get<string>("deviceOperatingSystem"); }
            set { BackingStore?.Set("deviceOperatingSystem", value); }
        }
#endif
        /// <summary>The device operating system version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceOperatingSystemVersion
        {
            get { return BackingStore?.Get<string?>("deviceOperatingSystemVersion"); }
            set { BackingStore?.Set("deviceOperatingSystemVersion", value); }
        }
#nullable restore
#else
        public string DeviceOperatingSystemVersion
        {
            get { return BackingStore?.Get<string>("deviceOperatingSystemVersion"); }
            set { BackingStore?.Set("deviceOperatingSystemVersion", value); }
        }
#endif
        /// <summary>The time the connection was terminated.</summary>
        public DateTimeOffset? EndDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("endDateTime"); }
            set { BackingStore?.Set("endDateTime", value); }
        }
        /// <summary>The process initiating the traffic connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InitiatingProcessName
        {
            get { return BackingStore?.Get<string?>("initiatingProcessName"); }
            set { BackingStore?.Set("initiatingProcessName", value); }
        }
#nullable restore
#else
        public string InitiatingProcessName
        {
            get { return BackingStore?.Get<string>("initiatingProcessName"); }
            set { BackingStore?.Set("initiatingProcessName", value); }
        }
#endif
        /// <summary>When the connection was last updated.</summary>
        public DateTimeOffset? LastUpdateDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("lastUpdateDateTime"); }
            set { BackingStore?.Set("lastUpdateDateTime", value); }
        }
        /// <summary>The network protocol of the connection. The possible values are: ip, icmp, igmp, ggp, ipv4, tcp, pup, udp, idp, ipv6, ipv6RoutingHeader, ipv6FragmentHeader, ipSecEncapsulatingSecurityPayload, ipSecAuthenticationHeader, icmpV6, ipv6NoNextHeader, ipv6DestinationOptions, nd, raw, ipx, spx, spxII, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol? NetworkProtocol
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol?>("networkProtocol"); }
            set { BackingStore?.Set("networkProtocol", value); }
        }
        /// <summary>The Point-of-Presence processing region of the traffic.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PopProcessingRegion
        {
            get { return BackingStore?.Get<string?>("popProcessingRegion"); }
            set { BackingStore?.Set("popProcessingRegion", value); }
        }
#nullable restore
#else
        public string PopProcessingRegion
        {
            get { return BackingStore?.Get<string>("popProcessingRegion"); }
            set { BackingStore?.Set("popProcessingRegion", value); }
        }
#endif
        /// <summary>Private access details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Networkaccess.PrivateAccessDetails? PrivateAccessDetails
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.PrivateAccessDetails?>("privateAccessDetails"); }
            set { BackingStore?.Set("privateAccessDetails", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Networkaccess.PrivateAccessDetails PrivateAccessDetails
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.PrivateAccessDetails>("privateAccessDetails"); }
            set { BackingStore?.Set("privateAccessDetails", value); }
        }
#endif
        /// <summary>Accumulative bytes received.</summary>
        public long? ReceivedBytes
        {
            get { return BackingStore?.Get<long?>("receivedBytes"); }
            set { BackingStore?.Set("receivedBytes", value); }
        }
        /// <summary>Accumulative bytes sent.</summary>
        public long? SentBytes
        {
            get { return BackingStore?.Get<long?>("sentBytes"); }
            set { BackingStore?.Set("sentBytes", value); }
        }
        /// <summary>The source IP of the connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceIp
        {
            get { return BackingStore?.Get<string?>("sourceIp"); }
            set { BackingStore?.Set("sourceIp", value); }
        }
#nullable restore
#else
        public string SourceIp
        {
            get { return BackingStore?.Get<string>("sourceIp"); }
            set { BackingStore?.Set("sourceIp", value); }
        }
#endif
        /// <summary>The source port of the connection.</summary>
        public int? SourcePort
        {
            get { return BackingStore?.Get<int?>("sourcePort"); }
            set { BackingStore?.Set("sourcePort", value); }
        }
        /// <summary>Status of the connection. The possible values are: open, active, closed, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.Networkaccess.ConnectionStatus? Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.ConnectionStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>The ID of the tenant where the connection was initiated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId
        {
            get { return BackingStore?.Get<string?>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#nullable restore
#else
        public string TenantId
        {
            get { return BackingStore?.Get<string>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#endif
        /// <summary>The trafficType property</summary>
        public global::Microsoft.Graph.Beta.Models.Networkaccess.TrafficType? TrafficType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.TrafficType?>("trafficType"); }
            set { BackingStore?.Set("trafficType", value); }
        }
        /// <summary>The number of blocked transactions belonging to the connection.</summary>
        public int? TransactionBlockCount
        {
            get { return BackingStore?.Get<int?>("transactionBlockCount"); }
            set { BackingStore?.Set("transactionBlockCount", value); }
        }
        /// <summary>The number of transactions belonging to the connection.</summary>
        public int? TransactionCount
        {
            get { return BackingStore?.Get<int?>("transactionCount"); }
            set { BackingStore?.Set("transactionCount", value); }
        }
        /// <summary>The transport protocol of the connection. The possible values are: ip, icmp, igmp, ggp, ipv4, tcp, pup, udp, idp, ipv6, ipv6RoutingHeader, ipv6FragmentHeader, ipSecEncapsulatingSecurityPayload, ipSecAuthenticationHeader, icmpV6, ipv6NoNextHeader, ipv6DestinationOptions, nd, raw, ipx, spx, spxII, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol? TransportProtocol
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol?>("transportProtocol"); }
            set { BackingStore?.Set("transportProtocol", value); }
        }
        /// <summary>The user ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId
        {
            get { return BackingStore?.Get<string?>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#nullable restore
#else
        public string UserId
        {
            get { return BackingStore?.Get<string>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#endif
        /// <summary>The principal name of the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName
        {
            get { return BackingStore?.Get<string?>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#nullable restore
#else
        public string UserPrincipalName
        {
            get { return BackingStore?.Get<string>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Networkaccess.Connection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Networkaccess.Connection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Networkaccess.Connection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "agentVersion", n => { AgentVersion = n.GetStringValue(); } },
                { "applicationSnapshot", n => { ApplicationSnapshot = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.ApplicationSnapshot>(global::Microsoft.Graph.Beta.Models.Networkaccess.ApplicationSnapshot.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "destinationFqdn", n => { DestinationFqdn = n.GetStringValue(); } },
                { "destinationIp", n => { DestinationIp = n.GetStringValue(); } },
                { "destinationPort", n => { DestinationPort = n.GetIntValue(); } },
                { "deviceCategory", n => { DeviceCategory = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.DeviceCategory>(); } },
                { "deviceId", n => { DeviceId = n.GetStringValue(); } },
                { "deviceOperatingSystem", n => { DeviceOperatingSystem = n.GetStringValue(); } },
                { "deviceOperatingSystemVersion", n => { DeviceOperatingSystemVersion = n.GetStringValue(); } },
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "initiatingProcessName", n => { InitiatingProcessName = n.GetStringValue(); } },
                { "lastUpdateDateTime", n => { LastUpdateDateTime = n.GetDateTimeOffsetValue(); } },
                { "networkProtocol", n => { NetworkProtocol = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol>(); } },
                { "popProcessingRegion", n => { PopProcessingRegion = n.GetStringValue(); } },
                { "privateAccessDetails", n => { PrivateAccessDetails = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.PrivateAccessDetails>(global::Microsoft.Graph.Beta.Models.Networkaccess.PrivateAccessDetails.CreateFromDiscriminatorValue); } },
                { "receivedBytes", n => { ReceivedBytes = n.GetLongValue(); } },
                { "sentBytes", n => { SentBytes = n.GetLongValue(); } },
                { "sourceIp", n => { SourceIp = n.GetStringValue(); } },
                { "sourcePort", n => { SourcePort = n.GetIntValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.ConnectionStatus>(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
                { "trafficType", n => { TrafficType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.TrafficType>(); } },
                { "transactionBlockCount", n => { TransactionBlockCount = n.GetIntValue(); } },
                { "transactionCount", n => { TransactionCount = n.GetIntValue(); } },
                { "transportProtocol", n => { TransportProtocol = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol>(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("agentVersion", AgentVersion);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.ApplicationSnapshot>("applicationSnapshot", ApplicationSnapshot);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("destinationFqdn", DestinationFqdn);
            writer.WriteStringValue("destinationIp", DestinationIp);
            writer.WriteIntValue("destinationPort", DestinationPort);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.DeviceCategory>("deviceCategory", DeviceCategory);
            writer.WriteStringValue("deviceId", DeviceId);
            writer.WriteStringValue("deviceOperatingSystem", DeviceOperatingSystem);
            writer.WriteStringValue("deviceOperatingSystemVersion", DeviceOperatingSystemVersion);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteStringValue("initiatingProcessName", InitiatingProcessName);
            writer.WriteDateTimeOffsetValue("lastUpdateDateTime", LastUpdateDateTime);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol>("networkProtocol", NetworkProtocol);
            writer.WriteStringValue("popProcessingRegion", PopProcessingRegion);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.PrivateAccessDetails>("privateAccessDetails", PrivateAccessDetails);
            writer.WriteLongValue("receivedBytes", ReceivedBytes);
            writer.WriteLongValue("sentBytes", SentBytes);
            writer.WriteStringValue("sourceIp", SourceIp);
            writer.WriteIntValue("sourcePort", SourcePort);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.ConnectionStatus>("status", Status);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.TrafficType>("trafficType", TrafficType);
            writer.WriteIntValue("transactionBlockCount", TransactionBlockCount);
            writer.WriteIntValue("transactionCount", TransactionCount);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.NetworkingProtocol>("transportProtocol", TransportProtocol);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
        }
    }
}
#pragma warning restore CS0618
