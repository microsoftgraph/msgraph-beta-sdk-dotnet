// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Networkaccess
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ExternalCertificateAuthorityCertificate : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The signed X.509 certificate in PEM format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Certificate
        {
            get { return BackingStore?.Get<string?>("certificate"); }
            set { BackingStore?.Set("certificate", value); }
        }
#nullable restore
#else
        public string Certificate
        {
            get { return BackingStore?.Get<string>("certificate"); }
            set { BackingStore?.Set("certificate", value); }
        }
#endif
        /// <summary>The Certificate Signing Request (CSR) generated when creating the CA. This CSR should be signed using the customer&apos;s PKI infrastructure. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateSigningRequest
        {
            get { return BackingStore?.Get<string?>("certificateSigningRequest"); }
            set { BackingStore?.Set("certificateSigningRequest", value); }
        }
#nullable restore
#else
        public string CertificateSigningRequest
        {
            get { return BackingStore?.Get<string>("certificateSigningRequest"); }
            set { BackingStore?.Set("certificateSigningRequest", value); }
        }
#endif
        /// <summary>The certificate chain in PEM format, containing all intermediate certificates up to the root CA.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Chain
        {
            get { return BackingStore?.Get<string?>("chain"); }
            set { BackingStore?.Set("chain", value); }
        }
#nullable restore
#else
        public string Chain
        {
            get { return BackingStore?.Get<string>("chain"); }
            set { BackingStore?.Set("chain", value); }
        }
#endif
        /// <summary>The common name (CN) field of the certificate. Supports $filter (eq, ne, startsWith)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommonName
        {
            get { return BackingStore?.Get<string?>("commonName"); }
            set { BackingStore?.Set("commonName", value); }
        }
#nullable restore
#else
        public string CommonName
        {
            get { return BackingStore?.Get<string>("commonName"); }
            set { BackingStore?.Set("commonName", value); }
        }
#endif
        /// <summary>The display name of the CA. Supports $filter (eq, ne, startsWith)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name
        {
            get { return BackingStore?.Get<string?>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#nullable restore
#else
        public string Name
        {
            get { return BackingStore?.Get<string>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#endif
        /// <summary>The organization name (OU) field of the certificate. Supports $filter (eq, ne, startsWith)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrganizationName
        {
            get { return BackingStore?.Get<string?>("organizationName"); }
            set { BackingStore?.Set("organizationName", value); }
        }
#nullable restore
#else
        public string OrganizationName
        {
            get { return BackingStore?.Get<string>("organizationName"); }
            set { BackingStore?.Set("organizationName", value); }
        }
#endif
        /// <summary>The status property</summary>
        public global::Microsoft.Graph.Beta.Models.Networkaccess.TlsCertificateStatus? Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsCertificateStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>The validity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Networkaccess.ValidityDate? Validity
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.ValidityDate?>("validity"); }
            set { BackingStore?.Set("validity", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Networkaccess.ValidityDate Validity
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.ValidityDate>("validity"); }
            set { BackingStore?.Set("validity", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Networkaccess.ExternalCertificateAuthorityCertificate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Networkaccess.ExternalCertificateAuthorityCertificate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Networkaccess.ExternalCertificateAuthorityCertificate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "certificate", n => { Certificate = n.GetStringValue(); } },
                { "certificateSigningRequest", n => { CertificateSigningRequest = n.GetStringValue(); } },
                { "chain", n => { Chain = n.GetStringValue(); } },
                { "commonName", n => { CommonName = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "organizationName", n => { OrganizationName = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsCertificateStatus>(); } },
                { "validity", n => { Validity = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.ValidityDate>(global::Microsoft.Graph.Beta.Models.Networkaccess.ValidityDate.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("certificate", Certificate);
            writer.WriteStringValue("certificateSigningRequest", CertificateSigningRequest);
            writer.WriteStringValue("chain", Chain);
            writer.WriteStringValue("commonName", CommonName);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("organizationName", OrganizationName);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.TlsCertificateStatus>("status", Status);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Networkaccess.ValidityDate>("validity", Validity);
        }
    }
}
#pragma warning restore CS0618
