// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.Networkaccess
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CloudApplicationMetadata : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The category property</summary>
        public global::Microsoft.Graph.Beta.Models.Networkaccess.CloudApplicationCategory? Category
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Networkaccess.CloudApplicationCategory?>("category"); }
            set { BackingStore?.Set("category", value); }
        }
        /// <summary>The ID of the application in the SaaS application catalog.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloudApplicationCatalogId
        {
            get { return BackingStore?.Get<string?>("cloudApplicationCatalogId"); }
            set { BackingStore?.Set("cloudApplicationCatalogId", value); }
        }
#nullable restore
#else
        public string CloudApplicationCatalogId
        {
            get { return BackingStore?.Get<string>("cloudApplicationCatalogId"); }
            set { BackingStore?.Set("cloudApplicationCatalogId", value); }
        }
#endif
        /// <summary>The compliance score of the application.</summary>
        public int? ComplianceScore
        {
            get { return BackingStore?.Get<int?>("complianceScore"); }
            set { BackingStore?.Set("complianceScore", value); }
        }
        /// <summary>The general score of the application.</summary>
        public int? GeneralScore
        {
            get { return BackingStore?.Get<int?>("generalScore"); }
            set { BackingStore?.Set("generalScore", value); }
        }
        /// <summary>The legal score of the application.</summary>
        public int? LegalScore
        {
            get { return BackingStore?.Get<int?>("legalScore"); }
            set { BackingStore?.Set("legalScore", value); }
        }
        /// <summary>The username that was used to log into the application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LoginUser
        {
            get { return BackingStore?.Get<string?>("loginUser"); }
            set { BackingStore?.Set("loginUser", value); }
        }
#nullable restore
#else
        public string LoginUser
        {
            get { return BackingStore?.Get<string>("loginUser"); }
            set { BackingStore?.Set("loginUser", value); }
        }
#endif
        /// <summary>The name of the application (e.g., ChatGPT, Salesforce, Bing).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name
        {
            get { return BackingStore?.Get<string?>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#nullable restore
#else
        public string Name
        {
            get { return BackingStore?.Get<string>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The risk score of the application.</summary>
        public int? RiskScore
        {
            get { return BackingStore?.Get<int?>("riskScore"); }
            set { BackingStore?.Set("riskScore", value); }
        }
        /// <summary>The security score of the application.</summary>
        public int? SecurityScore
        {
            get { return BackingStore?.Get<int?>("securityScore"); }
            set { BackingStore?.Set("securityScore", value); }
        }
        /// <summary>The subactivity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subactivity
        {
            get { return BackingStore?.Get<string?>("subactivity"); }
            set { BackingStore?.Set("subactivity", value); }
        }
#nullable restore
#else
        public string Subactivity
        {
            get { return BackingStore?.Get<string>("subactivity"); }
            set { BackingStore?.Set("subactivity", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.Networkaccess.CloudApplicationMetadata"/> and sets the default values.
        /// </summary>
        public CloudApplicationMetadata()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Networkaccess.CloudApplicationMetadata"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.Networkaccess.CloudApplicationMetadata CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Networkaccess.CloudApplicationMetadata();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "category", n => { Category = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.CloudApplicationCategory>(); } },
                { "cloudApplicationCatalogId", n => { CloudApplicationCatalogId = n.GetStringValue(); } },
                { "complianceScore", n => { ComplianceScore = n.GetIntValue(); } },
                { "generalScore", n => { GeneralScore = n.GetIntValue(); } },
                { "legalScore", n => { LegalScore = n.GetIntValue(); } },
                { "loginUser", n => { LoginUser = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "riskScore", n => { RiskScore = n.GetIntValue(); } },
                { "securityScore", n => { SecurityScore = n.GetIntValue(); } },
                { "subactivity", n => { Subactivity = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Networkaccess.CloudApplicationCategory>("category", Category);
            writer.WriteStringValue("cloudApplicationCatalogId", CloudApplicationCatalogId);
            writer.WriteIntValue("complianceScore", ComplianceScore);
            writer.WriteIntValue("generalScore", GeneralScore);
            writer.WriteIntValue("legalScore", LegalScore);
            writer.WriteStringValue("loginUser", LoginUser);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteIntValue("riskScore", RiskScore);
            writer.WriteIntValue("securityScore", SecurityScore);
            writer.WriteStringValue("subactivity", Subactivity);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
