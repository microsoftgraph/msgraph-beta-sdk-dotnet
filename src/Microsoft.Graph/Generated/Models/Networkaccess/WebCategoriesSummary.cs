// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models.Networkaccess
{
    #pragma warning disable CS1591
    public class WebCategoriesSummary : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The action property</summary>
        public Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicyAction? Action
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicyAction?>("action"); }
            set { BackingStore?.Set("action", value); }
        }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The number of unique devices that were seen.</summary>
        public long? DeviceCount
        {
            get { return BackingStore?.Get<long?>("deviceCount"); }
            set { BackingStore?.Set("deviceCount", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The number of transactions that were seen.</summary>
        public long? TransactionCount
        {
            get { return BackingStore?.Get<long?>("transactionCount"); }
            set { BackingStore?.Set("transactionCount", value); }
        }
        /// <summary>The number of unique Microsoft Entra ID users that were seen.</summary>
        public long? UserCount
        {
            get { return BackingStore?.Get<long?>("userCount"); }
            set { BackingStore?.Set("userCount", value); }
        }
        /// <summary>The webCategory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.Networkaccess.WebCategory? WebCategory
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Networkaccess.WebCategory?>("webCategory"); }
            set { BackingStore?.Set("webCategory", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.Networkaccess.WebCategory WebCategory
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.Networkaccess.WebCategory>("webCategory"); }
            set { BackingStore?.Set("webCategory", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.Networkaccess.WebCategoriesSummary"/> and sets the default values.
        /// </summary>
        public WebCategoriesSummary()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.Networkaccess.WebCategoriesSummary"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Microsoft.Graph.Beta.Models.Networkaccess.WebCategoriesSummary CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.Networkaccess.WebCategoriesSummary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "action", n => { Action = n.GetEnumValue<Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicyAction>(); } },
                { "deviceCount", n => { DeviceCount = n.GetLongValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "transactionCount", n => { TransactionCount = n.GetLongValue(); } },
                { "userCount", n => { UserCount = n.GetLongValue(); } },
                { "webCategory", n => { WebCategory = n.GetObjectValue<Microsoft.Graph.Beta.Models.Networkaccess.WebCategory>(Microsoft.Graph.Beta.Models.Networkaccess.WebCategory.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.Networkaccess.FilteringPolicyAction>("action", Action);
            writer.WriteLongValue("deviceCount", DeviceCount);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteLongValue("transactionCount", TransactionCount);
            writer.WriteLongValue("userCount", UserCount);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.Networkaccess.WebCategory>("webCategory", WebCategory);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
