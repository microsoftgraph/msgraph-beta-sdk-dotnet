// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models.Networkaccess {
    public class Connectivity : Microsoft.Graph.Beta.Models.Entity, IParsable 
    {
        /// <summary>Branches represent locations for connectivity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<BranchSite>? Branches {
            get { return BackingStore?.Get<List<BranchSite>?>("branches"); }
            set { BackingStore?.Set("branches", value); }
        }
#nullable restore
#else
        public List<BranchSite> Branches {
            get { return BackingStore?.Get<List<BranchSite>>("branches"); }
            set { BackingStore?.Set("branches", value); }
        }
#endif
        /// <summary>The remoteNetworks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<RemoteNetwork>? RemoteNetworks {
            get { return BackingStore?.Get<List<RemoteNetwork>?>("remoteNetworks"); }
            set { BackingStore?.Set("remoteNetworks", value); }
        }
#nullable restore
#else
        public List<RemoteNetwork> RemoteNetworks {
            get { return BackingStore?.Get<List<RemoteNetwork>>("remoteNetworks"); }
            set { BackingStore?.Set("remoteNetworks", value); }
        }
#endif
        /// <summary>The webCategories property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WebCategory>? WebCategories {
            get { return BackingStore?.Get<List<WebCategory>?>("webCategories"); }
            set { BackingStore?.Set("webCategories", value); }
        }
#nullable restore
#else
        public List<WebCategory> WebCategories {
            get { return BackingStore?.Get<List<WebCategory>>("webCategories"); }
            set { BackingStore?.Set("webCategories", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Connectivity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Connectivity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Connectivity();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"branches", n => { Branches = n.GetCollectionOfObjectValues<BranchSite>(BranchSite.CreateFromDiscriminatorValue)?.ToList(); } },
                {"remoteNetworks", n => { RemoteNetworks = n.GetCollectionOfObjectValues<RemoteNetwork>(RemoteNetwork.CreateFromDiscriminatorValue)?.ToList(); } },
                {"webCategories", n => { WebCategories = n.GetCollectionOfObjectValues<WebCategory>(WebCategory.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<BranchSite>("branches", Branches);
            writer.WriteCollectionOfObjectValues<RemoteNetwork>("remoteNetworks", RemoteNetworks);
            writer.WriteCollectionOfObjectValues<WebCategory>("webCategories", WebCategories);
        }
    }
}
