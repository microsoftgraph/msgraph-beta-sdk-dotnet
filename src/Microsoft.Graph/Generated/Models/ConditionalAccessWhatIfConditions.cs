// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class ConditionalAccessWhatIfConditions : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>The authenticationFlow property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.AuthenticationFlow? AuthenticationFlow
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AuthenticationFlow?>("authenticationFlow"); }
            set { BackingStore?.Set("authenticationFlow", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.AuthenticationFlow AuthenticationFlow
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.AuthenticationFlow>("authenticationFlow"); }
            set { BackingStore?.Set("authenticationFlow", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The clientAppType property</summary>
        public Microsoft.Graph.Beta.Models.ConditionalAccessClientApp? ClientAppType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ConditionalAccessClientApp?>("clientAppType"); }
            set { BackingStore?.Set("clientAppType", value); }
        }
        /// <summary>The country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country
        {
            get { return BackingStore?.Get<string?>("country"); }
            set { BackingStore?.Set("country", value); }
        }
#nullable restore
#else
        public string Country
        {
            get { return BackingStore?.Get<string>("country"); }
            set { BackingStore?.Set("country", value); }
        }
#endif
        /// <summary>The deviceInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.DeviceInfo? DeviceInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.DeviceInfo?>("deviceInfo"); }
            set { BackingStore?.Set("deviceInfo", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.DeviceInfo DeviceInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.DeviceInfo>("deviceInfo"); }
            set { BackingStore?.Set("deviceInfo", value); }
        }
#endif
        /// <summary>The devicePlatform property</summary>
        public Microsoft.Graph.Beta.Models.ConditionalAccessDevicePlatform? DevicePlatform
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ConditionalAccessDevicePlatform?>("devicePlatform"); }
            set { BackingStore?.Set("devicePlatform", value); }
        }
        /// <summary>The insiderRiskLevel property</summary>
        public Microsoft.Graph.Beta.Models.InsiderRiskLevel? InsiderRiskLevel
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.InsiderRiskLevel?>("insiderRiskLevel"); }
            set { BackingStore?.Set("insiderRiskLevel", value); }
        }
        /// <summary>The ipAddress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress
        {
            get { return BackingStore?.Get<string?>("ipAddress"); }
            set { BackingStore?.Set("ipAddress", value); }
        }
#nullable restore
#else
        public string IpAddress
        {
            get { return BackingStore?.Get<string>("ipAddress"); }
            set { BackingStore?.Set("ipAddress", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The servicePrincipalRiskLevel property</summary>
        public Microsoft.Graph.Beta.Models.RiskLevel? ServicePrincipalRiskLevel
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RiskLevel?>("servicePrincipalRiskLevel"); }
            set { BackingStore?.Set("servicePrincipalRiskLevel", value); }
        }
        /// <summary>The signInRiskLevel property</summary>
        public Microsoft.Graph.Beta.Models.RiskLevel? SignInRiskLevel
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RiskLevel?>("signInRiskLevel"); }
            set { BackingStore?.Set("signInRiskLevel", value); }
        }
        /// <summary>The userRiskLevel property</summary>
        public Microsoft.Graph.Beta.Models.RiskLevel? UserRiskLevel
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RiskLevel?>("userRiskLevel"); }
            set { BackingStore?.Set("userRiskLevel", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.ConditionalAccessWhatIfConditions"/> and sets the default values.
        /// </summary>
        public ConditionalAccessWhatIfConditions()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.ConditionalAccessWhatIfConditions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Microsoft.Graph.Beta.Models.ConditionalAccessWhatIfConditions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.ConditionalAccessWhatIfConditions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authenticationFlow", n => { AuthenticationFlow = n.GetObjectValue<Microsoft.Graph.Beta.Models.AuthenticationFlow>(Microsoft.Graph.Beta.Models.AuthenticationFlow.CreateFromDiscriminatorValue); } },
                { "clientAppType", n => { ClientAppType = n.GetEnumValue<Microsoft.Graph.Beta.Models.ConditionalAccessClientApp>(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "deviceInfo", n => { DeviceInfo = n.GetObjectValue<Microsoft.Graph.Beta.Models.DeviceInfo>(Microsoft.Graph.Beta.Models.DeviceInfo.CreateFromDiscriminatorValue); } },
                { "devicePlatform", n => { DevicePlatform = n.GetEnumValue<Microsoft.Graph.Beta.Models.ConditionalAccessDevicePlatform>(); } },
                { "insiderRiskLevel", n => { InsiderRiskLevel = n.GetEnumValue<Microsoft.Graph.Beta.Models.InsiderRiskLevel>(); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "servicePrincipalRiskLevel", n => { ServicePrincipalRiskLevel = n.GetEnumValue<Microsoft.Graph.Beta.Models.RiskLevel>(); } },
                { "signInRiskLevel", n => { SignInRiskLevel = n.GetEnumValue<Microsoft.Graph.Beta.Models.RiskLevel>(); } },
                { "userRiskLevel", n => { UserRiskLevel = n.GetEnumValue<Microsoft.Graph.Beta.Models.RiskLevel>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.AuthenticationFlow>("authenticationFlow", AuthenticationFlow);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.ConditionalAccessClientApp>("clientAppType", ClientAppType);
            writer.WriteStringValue("country", Country);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.DeviceInfo>("deviceInfo", DeviceInfo);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.ConditionalAccessDevicePlatform>("devicePlatform", DevicePlatform);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.InsiderRiskLevel>("insiderRiskLevel", InsiderRiskLevel);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.RiskLevel>("servicePrincipalRiskLevel", ServicePrincipalRiskLevel);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.RiskLevel>("signInRiskLevel", SignInRiskLevel);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.RiskLevel>("userRiskLevel", UserRiskLevel);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
