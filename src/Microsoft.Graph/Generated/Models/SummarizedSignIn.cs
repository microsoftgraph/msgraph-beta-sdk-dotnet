// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Graph.Beta.Models.Agentic;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SummarizedSignIn : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Represents details about the agentic sign-in. Includes the type of agent as well as parent appId in some cases. Supports $filter (eq) for agentType.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Agentic.AgentSignIn? Agent
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Agentic.AgentSignIn?>("agent"); }
            set { BackingStore?.Set("agent", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Agentic.AgentSignIn Agent
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Agentic.AgentSignIn>("agent"); }
            set { BackingStore?.Set("agent", value); }
        }
#endif
        /// <summary>The aggregated day for which the summary applies to. This property always represents the entire day. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? AggregationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("aggregationDateTime"); }
            set { BackingStore?.Set("aggregationDateTime", value); }
        }
        /// <summary>The application name displayed in the Microsoft Entra admin center. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppDisplayName
        {
            get { return BackingStore?.Get<string?>("appDisplayName"); }
            set { BackingStore?.Set("appDisplayName", value); }
        }
#nullable restore
#else
        public string AppDisplayName
        {
            get { return BackingStore?.Get<string>("appDisplayName"); }
            set { BackingStore?.Set("appDisplayName", value); }
        }
#endif
        /// <summary>The application identifier (client ID) in Microsoft Entra ID. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId
        {
            get { return BackingStore?.Get<string?>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#nullable restore
#else
        public string AppId
        {
            get { return BackingStore?.Get<string>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#endif
        /// <summary>The status of the conditional access policy triggered. The possible values are: success, failure, notApplied, unknownFutureValue. Supports $filter (eq).</summary>
        public global::Microsoft.Graph.Beta.Models.ConditionalAccessStatus? ConditionalAccessStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ConditionalAccessStatus?>("conditionalAccessStatus"); }
            set { BackingStore?.Set("conditionalAccessStatus", value); }
        }
        /// <summary>The earliest sign-in event included in this summary. This property always represents the entire day. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? FirstSignInDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("firstSignInDateTime"); }
            set { BackingStore?.Set("firstSignInDateTime", value); }
        }
        /// <summary>The IP address a user or autonomous agent used to reach a resource provider, used to determine Conditional Access compliance for some policies. For example, when a user interacts with Exchange Online, the IP address that Microsoft Exchange receives from the user can be recorded here. This value is often null. Supports $filter (eq, startswith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress
        {
            get { return BackingStore?.Get<string?>("ipAddress"); }
            set { BackingStore?.Set("ipAddress", value); }
        }
#nullable restore
#else
        public string IpAddress
        {
            get { return BackingStore?.Get<string>("ipAddress"); }
            set { BackingStore?.Set("ipAddress", value); }
        }
#endif
        /// <summary>Contains information about the managed identity used for the sign in, including its type, associated Azure Resource Manager resource ID, and federated token information. Supports $filter (eq) for msiType.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ManagedIdentity? ManagedServiceIdentity
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ManagedIdentity?>("managedServiceIdentity"); }
            set { BackingStore?.Set("managedServiceIdentity", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ManagedIdentity ManagedServiceIdentity
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ManagedIdentity>("managedServiceIdentity"); }
            set { BackingStore?.Set("managedServiceIdentity", value); }
        }
#endif
        /// <summary>The name of the resource that the user signed in to. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceDisplayName
        {
            get { return BackingStore?.Get<string?>("resourceDisplayName"); }
            set { BackingStore?.Set("resourceDisplayName", value); }
        }
#nullable restore
#else
        public string ResourceDisplayName
        {
            get { return BackingStore?.Get<string>("resourceDisplayName"); }
            set { BackingStore?.Set("resourceDisplayName", value); }
        }
#endif
        /// <summary>The application identifier of the resource application that the user signed in to. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceId
        {
            get { return BackingStore?.Get<string?>("resourceId"); }
            set { BackingStore?.Set("resourceId", value); }
        }
#nullable restore
#else
        public string ResourceId
        {
            get { return BackingStore?.Get<string>("resourceId"); }
            set { BackingStore?.Set("resourceId", value); }
        }
#endif
        /// <summary>The application identifier of the specific service principal instance of the application identifier used for sign-in. This field is populated when you&apos;re signing in using an application and is different than the appId property. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePrincipalId
        {
            get { return BackingStore?.Get<string?>("servicePrincipalId"); }
            set { BackingStore?.Set("servicePrincipalId", value); }
        }
#nullable restore
#else
        public string ServicePrincipalId
        {
            get { return BackingStore?.Get<string>("servicePrincipalId"); }
            set { BackingStore?.Set("servicePrincipalId", value); }
        }
#endif
        /// <summary>The application name used for sign-in. This field is populated when you&apos;re signing in using an application. Supports $filter (eq, startswith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePrincipalName
        {
            get { return BackingStore?.Get<string?>("servicePrincipalName"); }
            set { BackingStore?.Set("servicePrincipalName", value); }
        }
#nullable restore
#else
        public string ServicePrincipalName
        {
            get { return BackingStore?.Get<string>("servicePrincipalName"); }
            set { BackingStore?.Set("servicePrincipalName", value); }
        }
#endif
        /// <summary>The total number of sign-in events included in the summary.</summary>
        public long? SignInCount
        {
            get { return BackingStore?.Get<long?>("signInCount"); }
            set { BackingStore?.Set("signInCount", value); }
        }
        /// <summary>The sign-in status. Includes the error code and description of the error (for a sign-in failure). Supports $filter (eq) for errorCode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.SignInStatus? Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SignInStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.SignInStatus Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.SignInStatus>("status"); }
            set { BackingStore?.Set("status", value); }
        }
#endif
        /// <summary>The tenant identifier of the user initiating the sign-in. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId
        {
            get { return BackingStore?.Get<string?>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#nullable restore
#else
        public string TenantId
        {
            get { return BackingStore?.Get<string>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#endif
        /// <summary>User principal name of the user that initiated the sign-in. This value is always in lowercase. For guest users whose values in the user object typically contain #EXT# before the domain part, this property stores the value in both lowercase and the &apos;true&apos; format. For example, while the user object stores AdeleVance_fabrikam.com#EXT#@contoso.com, the sign-in logs store adelevance@fabrikam.com. Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName
        {
            get { return BackingStore?.Get<string?>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#nullable restore
#else
        public string UserPrincipalName
        {
            get { return BackingStore?.Get<string>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.SummarizedSignIn"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.SummarizedSignIn CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.SummarizedSignIn();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "agent", n => { Agent = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Agentic.AgentSignIn>(global::Microsoft.Graph.Beta.Models.Agentic.AgentSignIn.CreateFromDiscriminatorValue); } },
                { "aggregationDateTime", n => { AggregationDateTime = n.GetDateTimeOffsetValue(); } },
                { "appDisplayName", n => { AppDisplayName = n.GetStringValue(); } },
                { "appId", n => { AppId = n.GetStringValue(); } },
                { "conditionalAccessStatus", n => { ConditionalAccessStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ConditionalAccessStatus>(); } },
                { "firstSignInDateTime", n => { FirstSignInDateTime = n.GetDateTimeOffsetValue(); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "managedServiceIdentity", n => { ManagedServiceIdentity = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ManagedIdentity>(global::Microsoft.Graph.Beta.Models.ManagedIdentity.CreateFromDiscriminatorValue); } },
                { "resourceDisplayName", n => { ResourceDisplayName = n.GetStringValue(); } },
                { "resourceId", n => { ResourceId = n.GetStringValue(); } },
                { "servicePrincipalId", n => { ServicePrincipalId = n.GetStringValue(); } },
                { "servicePrincipalName", n => { ServicePrincipalName = n.GetStringValue(); } },
                { "signInCount", n => { SignInCount = n.GetLongValue(); } },
                { "status", n => { Status = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.SignInStatus>(global::Microsoft.Graph.Beta.Models.SignInStatus.CreateFromDiscriminatorValue); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Agentic.AgentSignIn>("agent", Agent);
            writer.WriteDateTimeOffsetValue("aggregationDateTime", AggregationDateTime);
            writer.WriteStringValue("appDisplayName", AppDisplayName);
            writer.WriteStringValue("appId", AppId);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ConditionalAccessStatus>("conditionalAccessStatus", ConditionalAccessStatus);
            writer.WriteDateTimeOffsetValue("firstSignInDateTime", FirstSignInDateTime);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ManagedIdentity>("managedServiceIdentity", ManagedServiceIdentity);
            writer.WriteStringValue("resourceDisplayName", ResourceDisplayName);
            writer.WriteStringValue("resourceId", ResourceId);
            writer.WriteStringValue("servicePrincipalId", ServicePrincipalId);
            writer.WriteStringValue("servicePrincipalName", ServicePrincipalName);
            writer.WriteLongValue("signInCount", SignInCount);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.SignInStatus>("status", Status);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
        }
    }
}
#pragma warning restore CS0618
