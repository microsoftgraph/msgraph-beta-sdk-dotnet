// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class CustomClaimTransformation : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The input attribute that provides the source for the transformation. This parameter is required if it&apos;s the first or only transformation in the list of transformations to be applied. Subsequent transformations use the output of the prior transformation as input.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TransformationAttribute? Input
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TransformationAttribute?>("input"); }
            set { BackingStore?.Set("input", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TransformationAttribute Input
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TransformationAttribute>("input"); }
            set { BackingStore?.Set("input", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.CustomClaimTransformation"/> and sets the default values.
        /// </summary>
        public CustomClaimTransformation()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.CustomClaimTransformation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Microsoft.Graph.Beta.Models.CustomClaimTransformation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.containsTransformation" => new Microsoft.Graph.Beta.Models.ContainsTransformation(),
                "#microsoft.graph.endsWithTransformation" => new Microsoft.Graph.Beta.Models.EndsWithTransformation(),
                "#microsoft.graph.extractAlphaTransformation" => new Microsoft.Graph.Beta.Models.ExtractAlphaTransformation(),
                "#microsoft.graph.extractMailPrefixTransformation" => new Microsoft.Graph.Beta.Models.ExtractMailPrefixTransformation(),
                "#microsoft.graph.extractNumberTransformation" => new Microsoft.Graph.Beta.Models.ExtractNumberTransformation(),
                "#microsoft.graph.extractTransformation" => new Microsoft.Graph.Beta.Models.ExtractTransformation(),
                "#microsoft.graph.ifEmptyTransformation" => new Microsoft.Graph.Beta.Models.IfEmptyTransformation(),
                "#microsoft.graph.ifNotEmptyTransformation" => new Microsoft.Graph.Beta.Models.IfNotEmptyTransformation(),
                "#microsoft.graph.joinTransformation" => new Microsoft.Graph.Beta.Models.JoinTransformation(),
                "#microsoft.graph.regexReplaceTransformation" => new Microsoft.Graph.Beta.Models.RegexReplaceTransformation(),
                "#microsoft.graph.startsWithTransformation" => new Microsoft.Graph.Beta.Models.StartsWithTransformation(),
                "#microsoft.graph.substringTransformation" => new Microsoft.Graph.Beta.Models.SubstringTransformation(),
                "#microsoft.graph.toLowercaseTransformation" => new Microsoft.Graph.Beta.Models.ToLowercaseTransformation(),
                "#microsoft.graph.toUppercaseTransformation" => new Microsoft.Graph.Beta.Models.ToUppercaseTransformation(),
                "#microsoft.graph.trimTransformation" => new Microsoft.Graph.Beta.Models.TrimTransformation(),
                _ => new Microsoft.Graph.Beta.Models.CustomClaimTransformation(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "input", n => { Input = n.GetObjectValue<Microsoft.Graph.Beta.Models.TransformationAttribute>(Microsoft.Graph.Beta.Models.TransformationAttribute.CreateFromDiscriminatorValue); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TransformationAttribute>("input", Input);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
