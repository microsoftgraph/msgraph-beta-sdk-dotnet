// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class FormsSettings : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Controls whether users can add images from Bing to forms.</summary>
        public bool? IsBingImageSearchEnabled
        {
            get { return BackingStore?.Get<bool?>("isBingImageSearchEnabled"); }
            set { BackingStore?.Set("isBingImageSearchEnabled", value); }
        }
        /// <summary>Controls whether users can send a link to a form to an external user.</summary>
        public bool? IsExternalSendFormEnabled
        {
            get { return BackingStore?.Get<bool?>("isExternalSendFormEnabled"); }
            set { BackingStore?.Set("isExternalSendFormEnabled", value); }
        }
        /// <summary>Controls whether users can collaborate on a form layout and structure with an external user.</summary>
        public bool? IsExternalShareCollaborationEnabled
        {
            get { return BackingStore?.Get<bool?>("isExternalShareCollaborationEnabled"); }
            set { BackingStore?.Set("isExternalShareCollaborationEnabled", value); }
        }
        /// <summary>Controls whether users can share form results with external users.</summary>
        public bool? IsExternalShareResultEnabled
        {
            get { return BackingStore?.Get<bool?>("isExternalShareResultEnabled"); }
            set { BackingStore?.Set("isExternalShareResultEnabled", value); }
        }
        /// <summary>Controls whether users can share form templates with external users.</summary>
        public bool? IsExternalShareTemplateEnabled
        {
            get { return BackingStore?.Get<bool?>("isExternalShareTemplateEnabled"); }
            set { BackingStore?.Set("isExternalShareTemplateEnabled", value); }
        }
        /// <summary>Controls whether phishing protection is run on forms created by users, blocking the creation of forms if common phishing questions are detected.</summary>
        public bool? IsInOrgFormsPhishingScanEnabled
        {
            get { return BackingStore?.Get<bool?>("isInOrgFormsPhishingScanEnabled"); }
            set { BackingStore?.Set("isInOrgFormsPhishingScanEnabled", value); }
        }
        /// <summary>Controls whether the names of users who fill out forms are recorded.</summary>
        public bool? IsRecordIdentityByDefaultEnabled
        {
            get { return BackingStore?.Get<bool?>("isRecordIdentityByDefaultEnabled"); }
            set { BackingStore?.Set("isRecordIdentityByDefaultEnabled", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.FormsSettings"/> and sets the default values.
        /// </summary>
        public FormsSettings()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.FormsSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Microsoft.Graph.Beta.Models.FormsSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.FormsSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "isBingImageSearchEnabled", n => { IsBingImageSearchEnabled = n.GetBoolValue(); } },
                { "isExternalSendFormEnabled", n => { IsExternalSendFormEnabled = n.GetBoolValue(); } },
                { "isExternalShareCollaborationEnabled", n => { IsExternalShareCollaborationEnabled = n.GetBoolValue(); } },
                { "isExternalShareResultEnabled", n => { IsExternalShareResultEnabled = n.GetBoolValue(); } },
                { "isExternalShareTemplateEnabled", n => { IsExternalShareTemplateEnabled = n.GetBoolValue(); } },
                { "isInOrgFormsPhishingScanEnabled", n => { IsInOrgFormsPhishingScanEnabled = n.GetBoolValue(); } },
                { "isRecordIdentityByDefaultEnabled", n => { IsRecordIdentityByDefaultEnabled = n.GetBoolValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("isBingImageSearchEnabled", IsBingImageSearchEnabled);
            writer.WriteBoolValue("isExternalSendFormEnabled", IsExternalSendFormEnabled);
            writer.WriteBoolValue("isExternalShareCollaborationEnabled", IsExternalShareCollaborationEnabled);
            writer.WriteBoolValue("isExternalShareResultEnabled", IsExternalShareResultEnabled);
            writer.WriteBoolValue("isExternalShareTemplateEnabled", IsExternalShareTemplateEnabled);
            writer.WriteBoolValue("isInOrgFormsPhishingScanEnabled", IsInOrgFormsPhishingScanEnabled);
            writer.WriteBoolValue("isRecordIdentityByDefaultEnabled", IsRecordIdentityByDefaultEnabled);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
