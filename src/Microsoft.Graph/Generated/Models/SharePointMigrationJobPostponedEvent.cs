// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SharePointMigrationJobPostponedEvent : global::Microsoft.Graph.Beta.Models.SharePointMigrationEvent, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The jobsInQueue property</summary>
        public long? JobsInQueue
        {
            get { return BackingStore?.Get<long?>("jobsInQueue"); }
            set { BackingStore?.Set("jobsInQueue", value); }
        }
        /// <summary>The nextPickupDateTime property</summary>
        public DateTimeOffset? NextPickupDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("nextPickupDateTime"); }
            set { BackingStore?.Set("nextPickupDateTime", value); }
        }
        /// <summary>The reason property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason
        {
            get { return BackingStore?.Get<string?>("reason"); }
            set { BackingStore?.Set("reason", value); }
        }
#nullable restore
#else
        public string Reason
        {
            get { return BackingStore?.Get<string>("reason"); }
            set { BackingStore?.Set("reason", value); }
        }
#endif
        /// <summary>The totalRetryCount property</summary>
        public int? TotalRetryCount
        {
            get { return BackingStore?.Get<int?>("totalRetryCount"); }
            set { BackingStore?.Set("totalRetryCount", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.SharePointMigrationJobPostponedEvent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.SharePointMigrationJobPostponedEvent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.SharePointMigrationJobPostponedEvent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "jobsInQueue", n => { JobsInQueue = n.GetLongValue(); } },
                { "nextPickupDateTime", n => { NextPickupDateTime = n.GetDateTimeOffsetValue(); } },
                { "reason", n => { Reason = n.GetStringValue(); } },
                { "totalRetryCount", n => { TotalRetryCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteLongValue("jobsInQueue", JobsInQueue);
            writer.WriteDateTimeOffsetValue("nextPickupDateTime", NextPickupDateTime);
            writer.WriteStringValue("reason", Reason);
            writer.WriteIntValue("totalRetryCount", TotalRetryCount);
        }
    }
}
#pragma warning restore CS0618
