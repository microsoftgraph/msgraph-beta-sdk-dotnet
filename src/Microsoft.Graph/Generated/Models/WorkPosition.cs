// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class WorkPosition : Microsoft.Graph.Beta.Models.ItemFacet, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Categories that the user has associated with this position.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Categories
        {
            get { return BackingStore?.Get<List<string>?>("categories"); }
            set { BackingStore?.Set("categories", value); }
        }
#nullable restore
#else
        public List<string> Categories
        {
            get { return BackingStore?.Get<List<string>>("categories"); }
            set { BackingStore?.Set("categories", value); }
        }
#endif
        /// <summary>Colleagues that are associated with this position.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Beta.Models.RelatedPerson>? Colleagues
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.RelatedPerson>?>("colleagues"); }
            set { BackingStore?.Set("colleagues", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Beta.Models.RelatedPerson> Colleagues
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Beta.Models.RelatedPerson>>("colleagues"); }
            set { BackingStore?.Set("colleagues", value); }
        }
#endif
        /// <summary>The detail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PositionDetail? Detail
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PositionDetail?>("detail"); }
            set { BackingStore?.Set("detail", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PositionDetail Detail
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PositionDetail>("detail"); }
            set { BackingStore?.Set("detail", value); }
        }
#endif
        /// <summary>Denotes whether or not the position is current.</summary>
        public bool? IsCurrent
        {
            get { return BackingStore?.Get<bool?>("isCurrent"); }
            set { BackingStore?.Set("isCurrent", value); }
        }
        /// <summary>Contains detail of the user&apos;s manager in this position.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.RelatedPerson? Manager
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RelatedPerson?>("manager"); }
            set { BackingStore?.Set("manager", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.RelatedPerson Manager
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.RelatedPerson>("manager"); }
            set { BackingStore?.Set("manager", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.WorkPosition"/> and sets the default values.
        /// </summary>
        public WorkPosition() : base()
        {
            OdataType = "#microsoft.graph.workPosition";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.WorkPosition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.WorkPosition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.WorkPosition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "categories", n => { Categories = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "colleagues", n => { Colleagues = n.GetCollectionOfObjectValues<Microsoft.Graph.Beta.Models.RelatedPerson>(Microsoft.Graph.Beta.Models.RelatedPerson.CreateFromDiscriminatorValue)?.ToList(); } },
                { "detail", n => { Detail = n.GetObjectValue<Microsoft.Graph.Beta.Models.PositionDetail>(Microsoft.Graph.Beta.Models.PositionDetail.CreateFromDiscriminatorValue); } },
                { "isCurrent", n => { IsCurrent = n.GetBoolValue(); } },
                { "manager", n => { Manager = n.GetObjectValue<Microsoft.Graph.Beta.Models.RelatedPerson>(Microsoft.Graph.Beta.Models.RelatedPerson.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfPrimitiveValues<string>("categories", Categories);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Beta.Models.RelatedPerson>("colleagues", Colleagues);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PositionDetail>("detail", Detail);
            writer.WriteBoolValue("isCurrent", IsCurrent);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.RelatedPerson>("manager", Manager);
        }
    }
}
