// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class ChatMessageInfo : Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Body of the chatMessage. This will still contain markers for @mentions and attachments even though the object doesn&apos;t return @mentions and attachments.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ItemBody? Body
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ItemBody?>("body"); }
            set { BackingStore?.Set("body", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ItemBody Body
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ItemBody>("body"); }
            set { BackingStore?.Set("body", value); }
        }
#endif
        /// <summary>Date time object representing the time at which message was created.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Read-only.  If present, represents details of an event that happened in a chat, a channel, or a team, for example, members were added, and so on. For event messages, the messageType property is set to systemEventMessage.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.EventMessageDetail? EventDetail
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.EventMessageDetail?>("eventDetail"); }
            set { BackingStore?.Set("eventDetail", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.EventMessageDetail EventDetail
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.EventMessageDetail>("eventDetail"); }
            set { BackingStore?.Set("eventDetail", value); }
        }
#endif
        /// <summary>Information about the sender of the message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ChatMessageFromIdentitySet? From
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ChatMessageFromIdentitySet?>("from"); }
            set { BackingStore?.Set("from", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ChatMessageFromIdentitySet From
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ChatMessageFromIdentitySet>("from"); }
            set { BackingStore?.Set("from", value); }
        }
#endif
        /// <summary>If set to true, the original message has been deleted.</summary>
        public bool? IsDeleted
        {
            get { return BackingStore?.Get<bool?>("isDeleted"); }
            set { BackingStore?.Set("isDeleted", value); }
        }
        /// <summary>The messageType property</summary>
        public Microsoft.Graph.Beta.Models.ChatMessageType? MessageType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ChatMessageType?>("messageType"); }
            set { BackingStore?.Set("messageType", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.ChatMessageInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.ChatMessageInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.ChatMessageInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "body", n => { Body = n.GetObjectValue<Microsoft.Graph.Beta.Models.ItemBody>(Microsoft.Graph.Beta.Models.ItemBody.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "eventDetail", n => { EventDetail = n.GetObjectValue<Microsoft.Graph.Beta.Models.EventMessageDetail>(Microsoft.Graph.Beta.Models.EventMessageDetail.CreateFromDiscriminatorValue); } },
                { "from", n => { From = n.GetObjectValue<Microsoft.Graph.Beta.Models.ChatMessageFromIdentitySet>(Microsoft.Graph.Beta.Models.ChatMessageFromIdentitySet.CreateFromDiscriminatorValue); } },
                { "isDeleted", n => { IsDeleted = n.GetBoolValue(); } },
                { "messageType", n => { MessageType = n.GetEnumValue<Microsoft.Graph.Beta.Models.ChatMessageType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.ItemBody>("body", Body);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.EventMessageDetail>("eventDetail", EventDetail);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.ChatMessageFromIdentitySet>("from", From);
            writer.WriteBoolValue("isDeleted", IsDeleted);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.ChatMessageType>("messageType", MessageType);
        }
    }
}
