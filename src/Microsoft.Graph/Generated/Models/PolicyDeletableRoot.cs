// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PolicyDeletableRoot : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Represents the partner-specific configuration for cross-tenant access and tenant restrictions. Cross-tenant access settings include inbound and outbound settings of Microsoft Entra B2B collaboration and B2B direct connect.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.CrossTenantAccessPolicyConfigurationPartner>? CrossTenantPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CrossTenantAccessPolicyConfigurationPartner>?>("crossTenantPartners"); }
            set { BackingStore?.Set("crossTenantPartners", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.CrossTenantAccessPolicyConfigurationPartner> CrossTenantPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CrossTenantAccessPolicyConfigurationPartner>>("crossTenantPartners"); }
            set { BackingStore?.Set("crossTenantPartners", value); }
        }
#endif
        /// <summary>Defines the cross-tenant policy for synchronization of users from a partner tenant. Use this user synchronization policy to streamline collaboration between users in a multi-tenant organization by automating the creation, update, and deletion of users from one tenant to another.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.CrossTenantIdentitySyncPolicyPartner>? CrossTenantSyncPolicyPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CrossTenantIdentitySyncPolicyPartner>?>("crossTenantSyncPolicyPartners"); }
            set { BackingStore?.Set("crossTenantSyncPolicyPartners", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.CrossTenantIdentitySyncPolicyPartner> CrossTenantSyncPolicyPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CrossTenantIdentitySyncPolicyPartner>>("crossTenantSyncPolicyPartners"); }
            set { BackingStore?.Set("crossTenantSyncPolicyPartners", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.PolicyDeletableRoot"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.PolicyDeletableRoot CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.PolicyDeletableRoot();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "crossTenantPartners", n => { CrossTenantPartners = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CrossTenantAccessPolicyConfigurationPartner>(global::Microsoft.Graph.Beta.Models.CrossTenantAccessPolicyConfigurationPartner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "crossTenantSyncPolicyPartners", n => { CrossTenantSyncPolicyPartners = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CrossTenantIdentitySyncPolicyPartner>(global::Microsoft.Graph.Beta.Models.CrossTenantIdentitySyncPolicyPartner.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CrossTenantAccessPolicyConfigurationPartner>("crossTenantPartners", CrossTenantPartners);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CrossTenantIdentitySyncPolicyPartner>("crossTenantSyncPolicyPartners", CrossTenantSyncPolicyPartners);
        }
    }
}
#pragma warning restore CS0618
