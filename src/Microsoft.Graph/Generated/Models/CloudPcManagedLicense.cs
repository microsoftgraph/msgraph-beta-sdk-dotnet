// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CloudPcManagedLicense : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The date and time when the license becomes active. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ne, gt, ge, lt, le). Read-only.</summary>
        public DateTimeOffset? ActiveDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("activeDateTime"); }
            set { BackingStore?.Set("activeDateTime", value); }
        }
        /// <summary>The number of licenses that are allocated to assignments. The total number of allotted licenses can&apos;t be greater than the total license count. The allowed range is from 0 to the value of licensesCount. Supports $filter (eq, ne, gt, ge, lt, le). Read-only. Nullable.</summary>
        public int? AllotmentLicensesCount
        {
            get { return BackingStore?.Get<int?>("allotmentLicensesCount"); }
            set { BackingStore?.Set("allotmentLicensesCount", value); }
        }
        /// <summary>The number of licenses currently assigned to users. The allowed range is from 0 to the value of licensesCount. Supports $filter (eq, ne, gt, ge, lt, le). Read-only.</summary>
        public int? AssignedCount
        {
            get { return BackingStore?.Get<int?>("assignedCount"); }
            set { BackingStore?.Set("assignedCount", value); }
        }
        /// <summary>The display name of the license. For example, Cloud PC Enterprise 4vCPU/16GB/256GB. Supports $filter (eq, ne, in, startsWith). Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The date and time when the license expires. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ne, gt, ge, lt, le). Read-only.</summary>
        public DateTimeOffset? ExpirationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("expirationDateTime"); }
            set { BackingStore?.Set("expirationDateTime", value); }
        }
        /// <summary>The start date of the current license term. This date is the date of the initial purchase or the most recent renewal. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ne, gt, ge, lt, le). Read-only.</summary>
        public DateTimeOffset? LatestLicenseStartDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("latestLicenseStartDateTime"); }
            set { BackingStore?.Set("latestLicenseStartDateTime", value); }
        }
        /// <summary>The total number of licenses purchased. The allowed range is fropm 0 to 2,147,483,647. Supports $filter (eq, ne, gt, ge, lt, le). Read-only.</summary>
        public int? LicensesCount
        {
            get { return BackingStore?.Get<int?>("licensesCount"); }
            set { BackingStore?.Set("licensesCount", value); }
        }
        /// <summary>The licenseType property</summary>
        public global::Microsoft.Graph.Beta.Models.CloudPcManagedLicenseType? LicenseType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CloudPcManagedLicenseType?>("licenseType"); }
            set { BackingStore?.Set("licenseType", value); }
        }
        /// <summary>The date and time of the next billing cycle. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ne, gt, ge, lt, le). Read-only.</summary>
        public DateTimeOffset? NextBillingDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("nextBillingDateTime"); }
            set { BackingStore?.Set("nextBillingDateTime", value); }
        }
        /// <summary>The unique identifier for the service plan that defines the specific stock keeping unit (SKU) of the license. For example, this ID maps to a specific offering like Cloud PC Enterprise 4vCPU/16GB/256GB. For example, 3a94476b-504b-41a4-9f6a-18c5199a55e9. Supports $filter (eq). Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePlanId
        {
            get { return BackingStore?.Get<string?>("servicePlanId"); }
            set { BackingStore?.Set("servicePlanId", value); }
        }
#nullable restore
#else
        public string ServicePlanId
        {
            get { return BackingStore?.Get<string>("servicePlanId"); }
            set { BackingStore?.Set("servicePlanId", value); }
        }
#endif
        /// <summary>The status property</summary>
        public global::Microsoft.Graph.Beta.Models.CloudPcManagedLicenseStatus? Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CloudPcManagedLicenseStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
        /// <summary>The ID of the Azure commercial subscription to which the license belongs. This unique identifier specifies the subscription where the organization purchased and manages the license. For example, 0d5b1a2b-4d6e-4b8e-88e2-3e7a5b9d0f1a. Supports $filter (eq). Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionId
        {
            get { return BackingStore?.Get<string?>("subscriptionId"); }
            set { BackingStore?.Set("subscriptionId", value); }
        }
#nullable restore
#else
        public string SubscriptionId
        {
            get { return BackingStore?.Get<string>("subscriptionId"); }
            set { BackingStore?.Set("subscriptionId", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CloudPcManagedLicense"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.CloudPcManagedLicense CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CloudPcManagedLicense();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "activeDateTime", n => { ActiveDateTime = n.GetDateTimeOffsetValue(); } },
                { "allotmentLicensesCount", n => { AllotmentLicensesCount = n.GetIntValue(); } },
                { "assignedCount", n => { AssignedCount = n.GetIntValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "expirationDateTime", n => { ExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "latestLicenseStartDateTime", n => { LatestLicenseStartDateTime = n.GetDateTimeOffsetValue(); } },
                { "licenseType", n => { LicenseType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CloudPcManagedLicenseType>(); } },
                { "licensesCount", n => { LicensesCount = n.GetIntValue(); } },
                { "nextBillingDateTime", n => { NextBillingDateTime = n.GetDateTimeOffsetValue(); } },
                { "servicePlanId", n => { ServicePlanId = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CloudPcManagedLicenseStatus>(); } },
                { "subscriptionId", n => { SubscriptionId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("activeDateTime", ActiveDateTime);
            writer.WriteIntValue("allotmentLicensesCount", AllotmentLicensesCount);
            writer.WriteIntValue("assignedCount", AssignedCount);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteDateTimeOffsetValue("expirationDateTime", ExpirationDateTime);
            writer.WriteDateTimeOffsetValue("latestLicenseStartDateTime", LatestLicenseStartDateTime);
            writer.WriteIntValue("licensesCount", LicensesCount);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CloudPcManagedLicenseType>("licenseType", LicenseType);
            writer.WriteDateTimeOffsetValue("nextBillingDateTime", NextBillingDateTime);
            writer.WriteStringValue("servicePlanId", ServicePlanId);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CloudPcManagedLicenseStatus>("status", Status);
            writer.WriteStringValue("subscriptionId", SubscriptionId);
        }
    }
}
#pragma warning restore CS0618
