// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AccessPackageAssignmentRequest : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The access package associated with the accessPackageAssignmentRequest. An access package defines the collections of resource roles and the policies for how one or more users can get access to those resources. Read-only. Nullable. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.AccessPackage? AccessPackage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AccessPackage?>("accessPackage"); }
            set { BackingStore?.Set("accessPackage", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.AccessPackage AccessPackage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AccessPackage>("accessPackage"); }
            set { BackingStore?.Set("accessPackage", value); }
        }
#endif
        /// <summary>For a requestType of UserAdd or AdminAdd, an access package assignment requested to be created. For a requestType of UserRemove, AdminRemove, or SystemRemove, this property has the id property of an existing assignment to be removed. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.AccessPackageAssignment? AccessPackageAssignment
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AccessPackageAssignment?>("accessPackageAssignment"); }
            set { BackingStore?.Set("accessPackageAssignment", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.AccessPackageAssignment AccessPackageAssignment
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AccessPackageAssignment>("accessPackageAssignment"); }
            set { BackingStore?.Set("accessPackageAssignment", value); }
        }
#endif
        /// <summary>Answers provided by the requestor to accessPackageQuestions asked of them at the time of request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AccessPackageAnswer>? Answers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AccessPackageAnswer>?>("answers"); }
            set { BackingStore?.Set("answers", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AccessPackageAnswer> Answers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AccessPackageAnswer>>("answers"); }
            set { BackingStore?.Set("answers", value); }
        }
#endif
        /// <summary>The date of the end of processing, either successful or failure, of a request. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.</summary>
        public DateTimeOffset? CompletedDate
        {
            get { return BackingStore?.Get<DateTimeOffset?>("completedDate"); }
            set { BackingStore?.Set("completedDate", value); }
        }
        /// <summary>The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Information about all the custom extension calls that were made during the access package assignment request workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.CustomExtensionCalloutInstance>? CustomExtensionCalloutInstances
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CustomExtensionCalloutInstance>?>("customExtensionCalloutInstances"); }
            set { BackingStore?.Set("customExtensionCalloutInstances", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.CustomExtensionCalloutInstance> CustomExtensionCalloutInstances
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CustomExtensionCalloutInstance>>("customExtensionCalloutInstances"); }
            set { BackingStore?.Set("customExtensionCalloutInstances", value); }
        }
#endif
        /// <summary>A collection of custom workflow extension instances being run on an assignment request. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.CustomExtensionHandlerInstance>? CustomExtensionHandlerInstances
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CustomExtensionHandlerInstance>?>("customExtensionHandlerInstances"); }
            set { BackingStore?.Set("customExtensionHandlerInstances", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.CustomExtensionHandlerInstance> CustomExtensionHandlerInstances
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.CustomExtensionHandlerInstance>>("customExtensionHandlerInstances"); }
            set { BackingStore?.Set("customExtensionHandlerInstances", value); }
        }
#endif
        /// <summary>The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? ExpirationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("expirationDateTime"); }
            set { BackingStore?.Set("expirationDateTime", value); }
        }
        /// <summary>The history property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.RequestActivity>? History
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RequestActivity>?>("history"); }
            set { BackingStore?.Set("history", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.RequestActivity> History
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.RequestActivity>>("history"); }
            set { BackingStore?.Set("history", value); }
        }
#endif
        /// <summary>True if the request isn&apos;t to be processed for assignment.</summary>
        public bool? IsValidationOnly
        {
            get { return BackingStore?.Get<bool?>("isValidationOnly"); }
            set { BackingStore?.Set("isValidationOnly", value); }
        }
        /// <summary>The requestor&apos;s supplied justification.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Justification
        {
            get { return BackingStore?.Get<string?>("justification"); }
            set { BackingStore?.Set("justification", value); }
        }
#nullable restore
#else
        public string Justification
        {
            get { return BackingStore?.Get<string>("justification"); }
            set { BackingStore?.Set("justification", value); }
        }
#endif
        /// <summary>The subject who requested or, if a direct assignment, was assigned. Read-only. Nullable. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.AccessPackageSubject? Requestor
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AccessPackageSubject?>("requestor"); }
            set { BackingStore?.Set("requestor", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.AccessPackageSubject Requestor
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.AccessPackageSubject>("requestor"); }
            set { BackingStore?.Set("requestor", value); }
        }
#endif
        /// <summary>One of PendingApproval, Canceled,  Denied, Delivering, Delivered, PartiallyDelivered, DeliveryFailed, Submitted, or Scheduled. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestState
        {
            get { return BackingStore?.Get<string?>("requestState"); }
            set { BackingStore?.Set("requestState", value); }
        }
#nullable restore
#else
        public string RequestState
        {
            get { return BackingStore?.Get<string>("requestState"); }
            set { BackingStore?.Set("requestState", value); }
        }
#endif
        /// <summary>More information on the request processing status. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestStatus
        {
            get { return BackingStore?.Get<string?>("requestStatus"); }
            set { BackingStore?.Set("requestStatus", value); }
        }
#nullable restore
#else
        public string RequestStatus
        {
            get { return BackingStore?.Get<string>("requestStatus"); }
            set { BackingStore?.Set("requestStatus", value); }
        }
#endif
        /// <summary>One of UserAdd, UserExtend, UserUpdate, UserRemove, AdminAdd, AdminRemove, or SystemRemove. A request from the user has a requestType of UserAdd, UserUpdate, or UserRemove. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestType
        {
            get { return BackingStore?.Get<string?>("requestType"); }
            set { BackingStore?.Set("requestType", value); }
        }
#nullable restore
#else
        public string RequestType
        {
            get { return BackingStore?.Get<string>("requestType"); }
            set { BackingStore?.Set("requestType", value); }
        }
#endif
        /// <summary>The range of dates that access is to be assigned to the requestor. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.RequestSchedule? Schedule
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RequestSchedule?>("schedule"); }
            set { BackingStore?.Set("schedule", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.RequestSchedule Schedule
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RequestSchedule>("schedule"); }
            set { BackingStore?.Set("schedule", value); }
        }
#endif
        /// <summary>The details of the verifiable credential that the requestor presented, such as the issuer and claims. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.VerifiedCredentialData>? VerifiedCredentialsData
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.VerifiedCredentialData>?>("verifiedCredentialsData"); }
            set { BackingStore?.Set("verifiedCredentialsData", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.VerifiedCredentialData> VerifiedCredentialsData
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.VerifiedCredentialData>>("verifiedCredentialsData"); }
            set { BackingStore?.Set("verifiedCredentialsData", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.AccessPackageAssignmentRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.AccessPackageAssignmentRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.AccessPackageAssignmentRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accessPackage", n => { AccessPackage = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.AccessPackage>(global::Microsoft.Graph.Beta.Models.AccessPackage.CreateFromDiscriminatorValue); } },
                { "accessPackageAssignment", n => { AccessPackageAssignment = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.AccessPackageAssignment>(global::Microsoft.Graph.Beta.Models.AccessPackageAssignment.CreateFromDiscriminatorValue); } },
                { "answers", n => { Answers = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AccessPackageAnswer>(global::Microsoft.Graph.Beta.Models.AccessPackageAnswer.CreateFromDiscriminatorValue)?.AsList(); } },
                { "completedDate", n => { CompletedDate = n.GetDateTimeOffsetValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "customExtensionCalloutInstances", n => { CustomExtensionCalloutInstances = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CustomExtensionCalloutInstance>(global::Microsoft.Graph.Beta.Models.CustomExtensionCalloutInstance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "customExtensionHandlerInstances", n => { CustomExtensionHandlerInstances = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CustomExtensionHandlerInstance>(global::Microsoft.Graph.Beta.Models.CustomExtensionHandlerInstance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "expirationDateTime", n => { ExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "history", n => { History = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RequestActivity>(global::Microsoft.Graph.Beta.Models.RequestActivity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "isValidationOnly", n => { IsValidationOnly = n.GetBoolValue(); } },
                { "justification", n => { Justification = n.GetStringValue(); } },
                { "requestState", n => { RequestState = n.GetStringValue(); } },
                { "requestStatus", n => { RequestStatus = n.GetStringValue(); } },
                { "requestType", n => { RequestType = n.GetStringValue(); } },
                { "requestor", n => { Requestor = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.AccessPackageSubject>(global::Microsoft.Graph.Beta.Models.AccessPackageSubject.CreateFromDiscriminatorValue); } },
                { "schedule", n => { Schedule = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.RequestSchedule>(global::Microsoft.Graph.Beta.Models.RequestSchedule.CreateFromDiscriminatorValue); } },
                { "verifiedCredentialsData", n => { VerifiedCredentialsData = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.VerifiedCredentialData>(global::Microsoft.Graph.Beta.Models.VerifiedCredentialData.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.AccessPackage>("accessPackage", AccessPackage);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.AccessPackageAssignment>("accessPackageAssignment", AccessPackageAssignment);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AccessPackageAnswer>("answers", Answers);
            writer.WriteDateTimeOffsetValue("completedDate", CompletedDate);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CustomExtensionCalloutInstance>("customExtensionCalloutInstances", CustomExtensionCalloutInstances);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.CustomExtensionHandlerInstance>("customExtensionHandlerInstances", CustomExtensionHandlerInstances);
            writer.WriteDateTimeOffsetValue("expirationDateTime", ExpirationDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.RequestActivity>("history", History);
            writer.WriteBoolValue("isValidationOnly", IsValidationOnly);
            writer.WriteStringValue("justification", Justification);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.AccessPackageSubject>("requestor", Requestor);
            writer.WriteStringValue("requestState", RequestState);
            writer.WriteStringValue("requestStatus", RequestStatus);
            writer.WriteStringValue("requestType", RequestType);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.RequestSchedule>("schedule", Schedule);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.VerifiedCredentialData>("verifiedCredentialsData", VerifiedCredentialsData);
        }
    }
}
#pragma warning restore CS0618
