// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class Group : global::Microsoft.Graph.Beta.Models.DirectoryObject, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The list of users or groups allowed to create posts or calendar events in this group. If this list is non-empty, then only users or groups listed here can post.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? AcceptedSenders
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("acceptedSenders"); }
            set { BackingStore?.Set("acceptedSenders", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> AcceptedSenders
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("acceptedSenders"); }
            set { BackingStore?.Set("acceptedSenders", value); }
        }
#endif
        /// <summary>Indicates the type of access to the group. Possible values are none, private, secret, and public.</summary>
        public global::Microsoft.Graph.Beta.Models.GroupAccessType? AccessType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.GroupAccessType?>("accessType"); }
            set { BackingStore?.Set("accessType", value); }
        }
        /// <summary>Indicates if people external to the organization can send messages to the group. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).</summary>
        public bool? AllowExternalSenders
        {
            get { return BackingStore?.Get<bool?>("allowExternalSenders"); }
            set { BackingStore?.Set("allowExternalSenders", value); }
        }
        /// <summary>Represents the app roles a group has been granted for an application. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>? AppRoleAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>?>("appRoleAssignments"); }
            set { BackingStore?.Set("appRoleAssignments", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AppRoleAssignment> AppRoleAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>>("appRoleAssignments"); }
            set { BackingStore?.Set("appRoleAssignments", value); }
        }
#endif
        /// <summary>The list of sensitivity label pairs (label ID, label name) associated with a Microsoft 365 group. Returned only on $select. This property can be updated only in delegated scenarios where the caller requires both the Microsoft Graph permission and a supported administrator role.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AssignedLabel>? AssignedLabels
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignedLabel>?>("assignedLabels"); }
            set { BackingStore?.Set("assignedLabels", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AssignedLabel> AssignedLabels
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignedLabel>>("assignedLabels"); }
            set { BackingStore?.Set("assignedLabels", value); }
        }
#endif
        /// <summary>The licenses that are assigned to the group. Returned only on $select. Supports $filter (eq). Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.AssignedLicense>? AssignedLicenses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignedLicense>?>("assignedLicenses"); }
            set { BackingStore?.Set("assignedLicenses", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.AssignedLicense> AssignedLicenses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.AssignedLicense>>("assignedLicenses"); }
            set { BackingStore?.Set("assignedLicenses", value); }
        }
#endif
        /// <summary>Indicates if new members added to the group are auto-subscribed to receive email notifications. You can set this property in a PATCH request for the group; don&apos;t set it in the initial POST request that creates the group. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).</summary>
        public bool? AutoSubscribeNewMembers
        {
            get { return BackingStore?.Get<bool?>("autoSubscribeNewMembers"); }
            set { BackingStore?.Set("autoSubscribeNewMembers", value); }
        }
        /// <summary>The group&apos;s calendar. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Calendar? Calendar
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Calendar?>("calendar"); }
            set { BackingStore?.Set("calendar", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Calendar Calendar
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Calendar>("calendar"); }
            set { BackingStore?.Set("calendar", value); }
        }
#endif
        /// <summary>The calendar view for the calendar. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Event>? CalendarView
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Event>?>("calendarView"); }
            set { BackingStore?.Set("calendarView", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Event> CalendarView
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Event>>("calendarView"); }
            set { BackingStore?.Set("calendarView", value); }
        }
#endif
        /// <summary>Describes a classification for the group (such as low, medium or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Classification
        {
            get { return BackingStore?.Get<string?>("classification"); }
            set { BackingStore?.Set("classification", value); }
        }
#nullable restore
#else
        public string Classification
        {
            get { return BackingStore?.Get<string>("classification"); }
            set { BackingStore?.Set("classification", value); }
        }
#endif
        /// <summary>The group&apos;s conversations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Conversation>? Conversations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Conversation>?>("conversations"); }
            set { BackingStore?.Set("conversations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Conversation> Conversations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Conversation>>("conversations"); }
            set { BackingStore?.Set("conversations", value); }
        }
#endif
        /// <summary>App ID of the app used to create the group. Can be null for some groups. Returned by default. Read-only. Supports $filter (eq, ne, not, in, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedByAppId
        {
            get { return BackingStore?.Get<string?>("createdByAppId"); }
            set { BackingStore?.Set("createdByAppId", value); }
        }
#nullable restore
#else
        public string CreatedByAppId
        {
            get { return BackingStore?.Get<string>("createdByAppId"); }
            set { BackingStore?.Set("createdByAppId", value); }
        }
#endif
        /// <summary>Timestamp of when the group was created. The value can&apos;t be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The user (or application) that created the group. Note: This isn&apos;t set if the user is an administrator. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.DirectoryObject? CreatedOnBehalfOf
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DirectoryObject?>("createdOnBehalfOf"); }
            set { BackingStore?.Set("createdOnBehalfOf", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.DirectoryObject CreatedOnBehalfOf
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.DirectoryObject>("createdOnBehalfOf"); }
            set { BackingStore?.Set("createdOnBehalfOf", value); }
        }
#endif
        /// <summary>An optional description for the group. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The display name for the group. Required. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The group&apos;s default drive. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Drive? Drive
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Drive?>("drive"); }
            set { BackingStore?.Set("drive", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Drive Drive
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Drive>("drive"); }
            set { BackingStore?.Set("drive", value); }
        }
#endif
        /// <summary>The group&apos;s drives. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Drive>? Drives
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Drive>?>("drives"); }
            set { BackingStore?.Set("drives", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Drive> Drives
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Drive>>("drives"); }
            set { BackingStore?.Set("drives", value); }
        }
#endif
        /// <summary>Endpoints for the group. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Endpoint>? Endpoints
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Endpoint>?>("endpoints"); }
            set { BackingStore?.Set("endpoints", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Endpoint> Endpoints
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Endpoint>>("endpoints"); }
            set { BackingStore?.Set("endpoints", value); }
        }
#endif
        /// <summary>The group&apos;s events.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Event>? Events
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Event>?>("events"); }
            set { BackingStore?.Set("events", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Event> Events
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Event>>("events"); }
            set { BackingStore?.Set("events", value); }
        }
#endif
        /// <summary>Timestamp of when the group is set to expire. It is null for security groups, but for Microsoft 365 groups, it represents when the group is set to expire as defined in the groupLifecyclePolicy. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.</summary>
        public DateTimeOffset? ExpirationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("expirationDateTime"); }
            set { BackingStore?.Set("expirationDateTime", value); }
        }
        /// <summary>The collection of open extensions defined for the group. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Extension>? Extensions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Extension>?>("extensions"); }
            set { BackingStore?.Set("extensions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Extension> Extensions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Extension>>("extensions"); }
            set { BackingStore?.Set("extensions", value); }
        }
#endif
        /// <summary>The collection of lifecycle policies for this group. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.GroupLifecyclePolicy>? GroupLifecyclePolicies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.GroupLifecyclePolicy>?>("groupLifecyclePolicies"); }
            set { BackingStore?.Set("groupLifecyclePolicies", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.GroupLifecyclePolicy> GroupLifecyclePolicies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.GroupLifecyclePolicy>>("groupLifecyclePolicies"); }
            set { BackingStore?.Set("groupLifecyclePolicies", value); }
        }
#endif
        /// <summary>Specifies the group type and its membership. If the collection contains Unified, the group is a Microsoft 365 group; otherwise, it&apos;s either a security group or a distribution group. For details, see groups overview.If the collection includes DynamicMembership, the group has dynamic membership; otherwise, membership is static. Returned by default. Supports $filter (eq, not).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? GroupTypes
        {
            get { return BackingStore?.Get<List<string>?>("groupTypes"); }
            set { BackingStore?.Set("groupTypes", value); }
        }
#nullable restore
#else
        public List<string> GroupTypes
        {
            get { return BackingStore?.Get<List<string>>("groupTypes"); }
            set { BackingStore?.Set("groupTypes", value); }
        }
#endif
        /// <summary>Indicates whether there are members in this group that have license errors from its group-based license assignment. This property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with license errors (that is, filter for this property being true).  Supports $filter (eq).</summary>
        public bool? HasMembersWithLicenseErrors
        {
            get { return BackingStore?.Get<bool?>("hasMembersWithLicenseErrors"); }
            set { BackingStore?.Set("hasMembersWithLicenseErrors", value); }
        }
        /// <summary>true if the group isn&apos;t displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups; false otherwise. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).</summary>
        public bool? HideFromAddressLists
        {
            get { return BackingStore?.Get<bool?>("hideFromAddressLists"); }
            set { BackingStore?.Set("hideFromAddressLists", value); }
        }
        /// <summary>true if the group isn&apos;t displayed in Outlook clients, such as Outlook for Windows and Outlook on the web, false otherwise. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).</summary>
        public bool? HideFromOutlookClients
        {
            get { return BackingStore?.Get<bool?>("hideFromOutlookClients"); }
            set { BackingStore?.Set("hideFromOutlookClients", value); }
        }
        /// <summary>Identifies the info segments assigned to the group. Returned by default. Supports $filter (eq, not, ge, le, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? InfoCatalogs
        {
            get { return BackingStore?.Get<List<string>?>("infoCatalogs"); }
            set { BackingStore?.Set("infoCatalogs", value); }
        }
#nullable restore
#else
        public List<string> InfoCatalogs
        {
            get { return BackingStore?.Get<List<string>>("infoCatalogs"); }
            set { BackingStore?.Set("infoCatalogs", value); }
        }
#endif
        /// <summary>When a group is associated with a team, this property determines whether the team is in read-only mode. To read this property, use the /group/{groupId}/team endpoint or the Get team API. To update this property, use the archiveTeam and unarchiveTeam APIs.</summary>
        public bool? IsArchived
        {
            get { return BackingStore?.Get<bool?>("isArchived"); }
            set { BackingStore?.Set("isArchived", value); }
        }
        /// <summary>Indicates whether this group can be assigned to a Microsoft Entra role. Optional. This property can only be set while creating the group and is immutable. If set to true, the securityEnabled property must also be set to true,  visibility must be Hidden, and the group cannot be a dynamic group (that is, groupTypes can&apos;t contain DynamicMembership). Only callers with at least the Privileged Role Administrator role can set this property. The caller must also be assigned the RoleManagement.ReadWrite.Directory permission to set this property or update the membership of such groups. For more, see Using a group to manage Microsoft Entra role assignmentsUsing this feature requires a Microsoft Entra ID P1 license. Returned by default. Supports $filter (eq, ne, not).</summary>
        public bool? IsAssignableToRole
        {
            get { return BackingStore?.Get<bool?>("isAssignableToRole"); }
            set { BackingStore?.Set("isAssignableToRole", value); }
        }
        /// <summary>Indicates whether the user marked the group as favorite.</summary>
        public bool? IsFavorite
        {
            get { return BackingStore?.Get<bool?>("isFavorite"); }
            set { BackingStore?.Set("isFavorite", value); }
        }
        /// <summary>Indicates whether the group is a member of a restricted management administrative unit. The default value is false. Read-only.  To manage a group member of a restricted management administrative unit, the administrator or calling app must be assigned a Microsoft Entra role at the scope of the restricted management administrative unit.</summary>
        public bool? IsManagementRestricted
        {
            get { return BackingStore?.Get<bool?>("isManagementRestricted"); }
            set { BackingStore?.Set("isManagementRestricted", value); }
        }
        /// <summary>Indicates whether the signed-in user is subscribed to receive email conversations. The default value is true. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).</summary>
        public bool? IsSubscribedByMail
        {
            get { return BackingStore?.Get<bool?>("isSubscribedByMail"); }
            set { BackingStore?.Set("isSubscribedByMail", value); }
        }
        /// <summary>Indicates the status of the group license assignment to all group members. Possible values: QueuedForProcessing, ProcessingInProgress, and ProcessingComplete. Returned only on $select. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.LicenseProcessingState? LicenseProcessingState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.LicenseProcessingState?>("licenseProcessingState"); }
            set { BackingStore?.Set("licenseProcessingState", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.LicenseProcessingState LicenseProcessingState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.LicenseProcessingState>("licenseProcessingState"); }
            set { BackingStore?.Set("licenseProcessingState", value); }
        }
#endif
        /// <summary>The SMTP address for the group, for example, &apos;serviceadmins@contoso.com&apos;. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mail
        {
            get { return BackingStore?.Get<string?>("mail"); }
            set { BackingStore?.Set("mail", value); }
        }
#nullable restore
#else
        public string Mail
        {
            get { return BackingStore?.Get<string>("mail"); }
            set { BackingStore?.Set("mail", value); }
        }
#endif
        /// <summary>Specifies whether the group is mail-enabled. Required. Returned by default. Supports $filter (eq, ne, not, and eq on null values).</summary>
        public bool? MailEnabled
        {
            get { return BackingStore?.Get<bool?>("mailEnabled"); }
            set { BackingStore?.Set("mailEnabled", value); }
        }
        /// <summary>The mail alias for the group, unique for Microsoft 365 groups in the organization. Maximum length is 64 characters. This property can contain only characters in the ASCII character set 0 - 127 except the following: @ () / [] &apos; ; : &lt;&gt; , SPACE. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MailNickname
        {
            get { return BackingStore?.Get<string?>("mailNickname"); }
            set { BackingStore?.Set("mailNickname", value); }
        }
#nullable restore
#else
        public string MailNickname
        {
            get { return BackingStore?.Get<string>("mailNickname"); }
            set { BackingStore?.Set("mailNickname", value); }
        }
#endif
        /// <summary>Groups and administrative units that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? MemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("memberOf"); }
            set { BackingStore?.Set("memberOf", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> MemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("memberOf"); }
            set { BackingStore?.Set("memberOf", value); }
        }
#endif
        /// <summary>Direct group members, who can be users, devices, other groups, or service principals. Supports the List members, Add member, and Remove member operations. Nullable. Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,&apos;Role&apos;)&amp;$select=id,displayName&amp;$expand=members($select=id,userPrincipalName,displayName).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? Members
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("members"); }
            set { BackingStore?.Set("members", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> Members
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("members"); }
            set { BackingStore?.Set("members", value); }
        }
#endif
        /// <summary>The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MembershipRule
        {
            get { return BackingStore?.Get<string?>("membershipRule"); }
            set { BackingStore?.Set("membershipRule", value); }
        }
#nullable restore
#else
        public string MembershipRule
        {
            get { return BackingStore?.Get<string>("membershipRule"); }
            set { BackingStore?.Set("membershipRule", value); }
        }
#endif
        /// <summary>Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default. Supports $filter (eq, ne, not, in).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MembershipRuleProcessingState
        {
            get { return BackingStore?.Get<string?>("membershipRuleProcessingState"); }
            set { BackingStore?.Set("membershipRuleProcessingState", value); }
        }
#nullable restore
#else
        public string MembershipRuleProcessingState
        {
            get { return BackingStore?.Get<string>("membershipRuleProcessingState"); }
            set { BackingStore?.Set("membershipRuleProcessingState", value); }
        }
#endif
        /// <summary>Describes the processing status for rules-based dynamic groups. The property is null for non-rule-based dynamic groups or if the dynamic group processing has been paused. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.MembershipRuleProcessingStatus? MembershipRuleProcessingStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MembershipRuleProcessingStatus?>("membershipRuleProcessingStatus"); }
            set { BackingStore?.Set("membershipRuleProcessingStatus", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.MembershipRuleProcessingStatus MembershipRuleProcessingStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MembershipRuleProcessingStatus>("membershipRuleProcessingStatus"); }
            set { BackingStore?.Set("membershipRuleProcessingStatus", value); }
        }
#endif
        /// <summary>A list of group members with license errors from this group-based license assignment. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? MembersWithLicenseErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("membersWithLicenseErrors"); }
            set { BackingStore?.Set("membersWithLicenseErrors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> MembersWithLicenseErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("membersWithLicenseErrors"); }
            set { BackingStore?.Set("membersWithLicenseErrors", value); }
        }
#endif
        /// <summary>The onenote property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Onenote? Onenote
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Onenote?>("onenote"); }
            set { BackingStore?.Set("onenote", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Onenote Onenote
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Onenote>("onenote"); }
            set { BackingStore?.Set("onenote", value); }
        }
#endif
        /// <summary>Contains the on-premises domain FQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesDomainName
        {
            get { return BackingStore?.Get<string?>("onPremisesDomainName"); }
            set { BackingStore?.Set("onPremisesDomainName", value); }
        }
#nullable restore
#else
        public string OnPremisesDomainName
        {
            get { return BackingStore?.Get<string>("onPremisesDomainName"); }
            set { BackingStore?.Set("onPremisesDomainName", value); }
        }
#endif
        /// <summary>Indicates the last time at which the group was synced with the on-premises directory.The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in).</summary>
        public DateTimeOffset? OnPremisesLastSyncDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("onPremisesLastSyncDateTime"); }
            set { BackingStore?.Set("onPremisesLastSyncDateTime", value); }
        }
        /// <summary>Contains the on-premises netBios name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesNetBiosName
        {
            get { return BackingStore?.Get<string?>("onPremisesNetBiosName"); }
            set { BackingStore?.Set("onPremisesNetBiosName", value); }
        }
#nullable restore
#else
        public string OnPremisesNetBiosName
        {
            get { return BackingStore?.Get<string>("onPremisesNetBiosName"); }
            set { BackingStore?.Set("onPremisesNetBiosName", value); }
        }
#endif
        /// <summary>Errors when using Microsoft synchronization product during provisioning. Returned by default. Supports $filter (eq, not).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>? OnPremisesProvisioningErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>?>("onPremisesProvisioningErrors"); }
            set { BackingStore?.Set("onPremisesProvisioningErrors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError> OnPremisesProvisioningErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>>("onPremisesProvisioningErrors"); }
            set { BackingStore?.Set("onPremisesProvisioningErrors", value); }
        }
#endif
        /// <summary>Contains the on-premises SAM account name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith). Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesSamAccountName
        {
            get { return BackingStore?.Get<string?>("onPremisesSamAccountName"); }
            set { BackingStore?.Set("onPremisesSamAccountName", value); }
        }
#nullable restore
#else
        public string OnPremisesSamAccountName
        {
            get { return BackingStore?.Get<string>("onPremisesSamAccountName"); }
            set { BackingStore?.Set("onPremisesSamAccountName", value); }
        }
#endif
        /// <summary>Contains the on-premises security identifier (SID) for the group synchronized from on-premises to the cloud. Read-only. Returned by default. Supports $filter (eq including on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesSecurityIdentifier
        {
            get { return BackingStore?.Get<string?>("onPremisesSecurityIdentifier"); }
            set { BackingStore?.Set("onPremisesSecurityIdentifier", value); }
        }
#nullable restore
#else
        public string OnPremisesSecurityIdentifier
        {
            get { return BackingStore?.Get<string>("onPremisesSecurityIdentifier"); }
            set { BackingStore?.Set("onPremisesSecurityIdentifier", value); }
        }
#endif
        /// <summary>true if this group is synced from an on-premises directory; false if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Returned by default. Read-only. Supports $filter (eq, ne, not, in, and eq on null values).</summary>
        public bool? OnPremisesSyncEnabled
        {
            get { return BackingStore?.Get<bool?>("onPremisesSyncEnabled"); }
            set { BackingStore?.Set("onPremisesSyncEnabled", value); }
        }
        /// <summary>The organizationId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrganizationId
        {
            get { return BackingStore?.Get<string?>("organizationId"); }
            set { BackingStore?.Set("organizationId", value); }
        }
#nullable restore
#else
        public string OrganizationId
        {
            get { return BackingStore?.Get<string>("organizationId"); }
            set { BackingStore?.Set("organizationId", value); }
        }
#endif
        /// <summary>The owners of the group who can be users or service principals. Nullable. If this property isn&apos;t specified when creating a Microsoft 365 group, the calling user is automatically assigned as the group owner.  Supports $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1); Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,&apos;Role&apos;)&amp;$select=id,displayName&amp;$expand=owners($select=id,userPrincipalName,displayName).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? Owners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("owners"); }
            set { BackingStore?.Set("owners", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> Owners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("owners"); }
            set { BackingStore?.Set("owners", value); }
        }
#endif
        /// <summary>The permissions granted for a group to a specific application. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>? PermissionGrants
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>?>("permissionGrants"); }
            set { BackingStore?.Set("permissionGrants", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant> PermissionGrants
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>>("permissionGrants"); }
            set { BackingStore?.Set("permissionGrants", value); }
        }
#endif
        /// <summary>The group&apos;s profile photo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ProfilePhoto? Photo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ProfilePhoto?>("photo"); }
            set { BackingStore?.Set("photo", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ProfilePhoto Photo
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ProfilePhoto>("photo"); }
            set { BackingStore?.Set("photo", value); }
        }
#endif
        /// <summary>The profile photos owned by the group. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ProfilePhoto>? Photos
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ProfilePhoto>?>("photos"); }
            set { BackingStore?.Set("photos", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ProfilePhoto> Photos
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ProfilePhoto>>("photos"); }
            set { BackingStore?.Set("photos", value); }
        }
#endif
        /// <summary>Selective Planner services available to the group. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PlannerGroup? Planner
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerGroup?>("planner"); }
            set { BackingStore?.Set("planner", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PlannerGroup Planner
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlannerGroup>("planner"); }
            set { BackingStore?.Set("planner", value); }
        }
#endif
        /// <summary>The preferred data location for the Microsoft 365 group. By default, the group inherits the group creator&apos;s preferred data location. To set this property, the calling app must be granted the Directory.ReadWrite.All permission and the user be assigned at least one of the following Microsoft Entra roles:  User Account Administrator Directory Writer  Exchange Administrator  SharePoint Administrator  For more information about this property, see OneDrive Online Multi-Geo and Create a Microsoft 365 group with a specific PDL. Nullable. Returned by default.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredDataLocation
        {
            get { return BackingStore?.Get<string?>("preferredDataLocation"); }
            set { BackingStore?.Set("preferredDataLocation", value); }
        }
#nullable restore
#else
        public string PreferredDataLocation
        {
            get { return BackingStore?.Get<string>("preferredDataLocation"); }
            set { BackingStore?.Set("preferredDataLocation", value); }
        }
#endif
        /// <summary>The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example, en-US. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredLanguage
        {
            get { return BackingStore?.Get<string?>("preferredLanguage"); }
            set { BackingStore?.Set("preferredLanguage", value); }
        }
#nullable restore
#else
        public string PreferredLanguage
        {
            get { return BackingStore?.Get<string>("preferredLanguage"); }
            set { BackingStore?.Set("preferredLanguage", value); }
        }
#endif
        /// <summary>Email addresses for the group that direct to the same group mailbox. For example: [&apos;SMTP: bob@contoso.com&apos;, &apos;smtp: bob@sales.contoso.com&apos;]. The any operator is required for filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ProxyAddresses
        {
            get { return BackingStore?.Get<List<string>?>("proxyAddresses"); }
            set { BackingStore?.Set("proxyAddresses", value); }
        }
#nullable restore
#else
        public List<string> ProxyAddresses
        {
            get { return BackingStore?.Get<List<string>>("proxyAddresses"); }
            set { BackingStore?.Set("proxyAddresses", value); }
        }
#endif
        /// <summary>The list of users or groups not allowed to create posts or calendar events in this group. Nullable</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? RejectedSenders
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("rejectedSenders"); }
            set { BackingStore?.Set("rejectedSenders", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> RejectedSenders
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("rejectedSenders"); }
            set { BackingStore?.Set("rejectedSenders", value); }
        }
#endif
        /// <summary>Timestamp of when the group was last renewed. This cannot be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.</summary>
        public DateTimeOffset? RenewedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("renewedDateTime"); }
            set { BackingStore?.Set("renewedDateTime", value); }
        }
        /// <summary>Specifies the group behaviors that can be set for a Microsoft 365 group during creation. This property can be set only as part of creation (POST). For the list of possible values, see Microsoft 365 group behaviors and provisioning options.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ResourceBehaviorOptions
        {
            get { return BackingStore?.Get<List<string>?>("resourceBehaviorOptions"); }
            set { BackingStore?.Set("resourceBehaviorOptions", value); }
        }
#nullable restore
#else
        public List<string> ResourceBehaviorOptions
        {
            get { return BackingStore?.Get<List<string>>("resourceBehaviorOptions"); }
            set { BackingStore?.Set("resourceBehaviorOptions", value); }
        }
#endif
        /// <summary>Specifies the group resources that are associated with the Microsoft 365 group. The possible value is Team. For more information, see Microsoft 365 group behaviors and provisioning options. Returned by default. Supports $filter (eq, not, startsWith.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ResourceProvisioningOptions
        {
            get { return BackingStore?.Get<List<string>?>("resourceProvisioningOptions"); }
            set { BackingStore?.Set("resourceProvisioningOptions", value); }
        }
#nullable restore
#else
        public List<string> ResourceProvisioningOptions
        {
            get { return BackingStore?.Get<List<string>>("resourceProvisioningOptions"); }
            set { BackingStore?.Set("resourceProvisioningOptions", value); }
        }
#endif
        /// <summary>Specifies whether the group is a security group. Required.Returned by default. Supports $filter (eq, ne, not, in).</summary>
        public bool? SecurityEnabled
        {
            get { return BackingStore?.Get<bool?>("securityEnabled"); }
            set { BackingStore?.Set("securityEnabled", value); }
        }
        /// <summary>Security identifier of the group, used in Windows scenarios. Read-only. Returned by default.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecurityIdentifier
        {
            get { return BackingStore?.Get<string?>("securityIdentifier"); }
            set { BackingStore?.Set("securityIdentifier", value); }
        }
#nullable restore
#else
        public string SecurityIdentifier
        {
            get { return BackingStore?.Get<string>("securityIdentifier"); }
            set { BackingStore?.Set("securityIdentifier", value); }
        }
#endif
        /// <summary>Errors published by a federated service describing a non-transient, service-specific error regarding the properties or link from a group object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>? ServiceProvisioningErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>?>("serviceProvisioningErrors"); }
            set { BackingStore?.Set("serviceProvisioningErrors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError> ServiceProvisioningErrors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>>("serviceProvisioningErrors"); }
            set { BackingStore?.Set("serviceProvisioningErrors", value); }
        }
#endif
        /// <summary>Settings that can govern this group&apos;s behavior, like whether members can invite guest users to the group. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectorySetting>? Settings
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectorySetting>?>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectorySetting> Settings
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectorySetting>>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#endif
        /// <summary>The list of SharePoint sites in this group. Access the default site with /sites/root.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Site>? Sites
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Site>?>("sites"); }
            set { BackingStore?.Set("sites", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Site> Sites
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Site>>("sites"); }
            set { BackingStore?.Set("sites", value); }
        }
#endif
        /// <summary>The team associated with this group.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.Team? Team
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Team?>("team"); }
            set { BackingStore?.Set("team", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.Team Team
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Team>("team"); }
            set { BackingStore?.Set("team", value); }
        }
#endif
        /// <summary>Specifies a Microsoft 365 group&apos;s color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange or Red. Returned by default.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Theme
        {
            get { return BackingStore?.Get<string?>("theme"); }
            set { BackingStore?.Set("theme", value); }
        }
#nullable restore
#else
        public string Theme
        {
            get { return BackingStore?.Get<string>("theme"); }
            set { BackingStore?.Set("theme", value); }
        }
#endif
        /// <summary>The group&apos;s conversation threads. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ConversationThread>? Threads
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ConversationThread>?>("threads"); }
            set { BackingStore?.Set("threads", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ConversationThread> Threads
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ConversationThread>>("threads"); }
            set { BackingStore?.Set("threads", value); }
        }
#endif
        /// <summary>The groups a group is a member of, either directly or through nested membership. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? TransitiveMemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("transitiveMemberOf"); }
            set { BackingStore?.Set("transitiveMemberOf", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> TransitiveMemberOf
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("transitiveMemberOf"); }
            set { BackingStore?.Set("transitiveMemberOf", value); }
        }
#endif
        /// <summary>The direct and transitive members of a group. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject>? TransitiveMembers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>?>("transitiveMembers"); }
            set { BackingStore?.Set("transitiveMembers", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.DirectoryObject> TransitiveMembers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.DirectoryObject>>("transitiveMembers"); }
            set { BackingStore?.Set("transitiveMembers", value); }
        }
#endif
        /// <summary>The unique identifier that can be assigned to a group and used as an alternate key. Immutable. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueName
        {
            get { return BackingStore?.Get<string?>("uniqueName"); }
            set { BackingStore?.Set("uniqueName", value); }
        }
#nullable restore
#else
        public string UniqueName
        {
            get { return BackingStore?.Get<string>("uniqueName"); }
            set { BackingStore?.Set("uniqueName", value); }
        }
#endif
        /// <summary>Count of conversations delivered one or more new posts since the signed-in user&apos;s last visit to the group. This property is the same as unseenCount. Returned only on $select.</summary>
        public int? UnseenConversationsCount
        {
            get { return BackingStore?.Get<int?>("unseenConversationsCount"); }
            set { BackingStore?.Set("unseenConversationsCount", value); }
        }
        /// <summary>Count of conversations that have received new posts since the signed-in user last visited the group. This property is the same as unseenConversationsCount.Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).</summary>
        public int? UnseenCount
        {
            get { return BackingStore?.Get<int?>("unseenCount"); }
            set { BackingStore?.Set("unseenCount", value); }
        }
        /// <summary>Count of new posts that have been delivered to the group&apos;s conversations since the signed-in user&apos;s last visit to the group. Returned only on $select.</summary>
        public int? UnseenMessagesCount
        {
            get { return BackingStore?.Get<int?>("unseenMessagesCount"); }
            set { BackingStore?.Set("unseenMessagesCount", value); }
        }
        /// <summary>Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or HiddenMembership. HiddenMembership can be set only for Microsoft 365 groups when the groups are created. It can&apos;t be updated later. Other values of visibility can be updated after group creation. If visibility value isn&apos;t specified during group creation on Microsoft Graph, a security group is created as Private by default, and Microsoft 365 group is Public. Groups assignable to roles are always Private. To learn more, see group visibility options. Returned by default. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Visibility
        {
            get { return BackingStore?.Get<string?>("visibility"); }
            set { BackingStore?.Set("visibility", value); }
        }
#nullable restore
#else
        public string Visibility
        {
            get { return BackingStore?.Get<string>("visibility"); }
            set { BackingStore?.Set("visibility", value); }
        }
#endif
        /// <summary>Specifies whether or not a group is configured to write back group object properties to on-premises Active Directory. These properties are used when group writeback is configured in the Microsoft Entra Connect sync client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.GroupWritebackConfiguration? WritebackConfiguration
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.GroupWritebackConfiguration?>("writebackConfiguration"); }
            set { BackingStore?.Set("writebackConfiguration", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.GroupWritebackConfiguration WritebackConfiguration
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.GroupWritebackConfiguration>("writebackConfiguration"); }
            set { BackingStore?.Set("writebackConfiguration", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.Group"/> and sets the default values.
        /// </summary>
        public Group() : base()
        {
            OdataType = "#microsoft.graph.group";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Group"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Group CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Group();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "acceptedSenders", n => { AcceptedSenders = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "accessType", n => { AccessType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.GroupAccessType>(); } },
                { "allowExternalSenders", n => { AllowExternalSenders = n.GetBoolValue(); } },
                { "appRoleAssignments", n => { AppRoleAssignments = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>(global::Microsoft.Graph.Beta.Models.AppRoleAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "assignedLabels", n => { AssignedLabels = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignedLabel>(global::Microsoft.Graph.Beta.Models.AssignedLabel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "assignedLicenses", n => { AssignedLicenses = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignedLicense>(global::Microsoft.Graph.Beta.Models.AssignedLicense.CreateFromDiscriminatorValue)?.AsList(); } },
                { "autoSubscribeNewMembers", n => { AutoSubscribeNewMembers = n.GetBoolValue(); } },
                { "calendar", n => { Calendar = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Calendar>(global::Microsoft.Graph.Beta.Models.Calendar.CreateFromDiscriminatorValue); } },
                { "calendarView", n => { CalendarView = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Event>(global::Microsoft.Graph.Beta.Models.Event.CreateFromDiscriminatorValue)?.AsList(); } },
                { "classification", n => { Classification = n.GetStringValue(); } },
                { "conversations", n => { Conversations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Conversation>(global::Microsoft.Graph.Beta.Models.Conversation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "createdByAppId", n => { CreatedByAppId = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "createdOnBehalfOf", n => { CreatedOnBehalfOf = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "drive", n => { Drive = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Drive>(global::Microsoft.Graph.Beta.Models.Drive.CreateFromDiscriminatorValue); } },
                { "drives", n => { Drives = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Drive>(global::Microsoft.Graph.Beta.Models.Drive.CreateFromDiscriminatorValue)?.AsList(); } },
                { "endpoints", n => { Endpoints = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Endpoint>(global::Microsoft.Graph.Beta.Models.Endpoint.CreateFromDiscriminatorValue)?.AsList(); } },
                { "events", n => { Events = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Event>(global::Microsoft.Graph.Beta.Models.Event.CreateFromDiscriminatorValue)?.AsList(); } },
                { "expirationDateTime", n => { ExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "extensions", n => { Extensions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Extension>(global::Microsoft.Graph.Beta.Models.Extension.CreateFromDiscriminatorValue)?.AsList(); } },
                { "groupLifecyclePolicies", n => { GroupLifecyclePolicies = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.GroupLifecyclePolicy>(global::Microsoft.Graph.Beta.Models.GroupLifecyclePolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "groupTypes", n => { GroupTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "hasMembersWithLicenseErrors", n => { HasMembersWithLicenseErrors = n.GetBoolValue(); } },
                { "hideFromAddressLists", n => { HideFromAddressLists = n.GetBoolValue(); } },
                { "hideFromOutlookClients", n => { HideFromOutlookClients = n.GetBoolValue(); } },
                { "infoCatalogs", n => { InfoCatalogs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "isArchived", n => { IsArchived = n.GetBoolValue(); } },
                { "isAssignableToRole", n => { IsAssignableToRole = n.GetBoolValue(); } },
                { "isFavorite", n => { IsFavorite = n.GetBoolValue(); } },
                { "isManagementRestricted", n => { IsManagementRestricted = n.GetBoolValue(); } },
                { "isSubscribedByMail", n => { IsSubscribedByMail = n.GetBoolValue(); } },
                { "licenseProcessingState", n => { LicenseProcessingState = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.LicenseProcessingState>(global::Microsoft.Graph.Beta.Models.LicenseProcessingState.CreateFromDiscriminatorValue); } },
                { "mail", n => { Mail = n.GetStringValue(); } },
                { "mailEnabled", n => { MailEnabled = n.GetBoolValue(); } },
                { "mailNickname", n => { MailNickname = n.GetStringValue(); } },
                { "memberOf", n => { MemberOf = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "members", n => { Members = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "membersWithLicenseErrors", n => { MembersWithLicenseErrors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "membershipRule", n => { MembershipRule = n.GetStringValue(); } },
                { "membershipRuleProcessingState", n => { MembershipRuleProcessingState = n.GetStringValue(); } },
                { "membershipRuleProcessingStatus", n => { MembershipRuleProcessingStatus = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.MembershipRuleProcessingStatus>(global::Microsoft.Graph.Beta.Models.MembershipRuleProcessingStatus.CreateFromDiscriminatorValue); } },
                { "onPremisesDomainName", n => { OnPremisesDomainName = n.GetStringValue(); } },
                { "onPremisesLastSyncDateTime", n => { OnPremisesLastSyncDateTime = n.GetDateTimeOffsetValue(); } },
                { "onPremisesNetBiosName", n => { OnPremisesNetBiosName = n.GetStringValue(); } },
                { "onPremisesProvisioningErrors", n => { OnPremisesProvisioningErrors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>(global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError.CreateFromDiscriminatorValue)?.AsList(); } },
                { "onPremisesSamAccountName", n => { OnPremisesSamAccountName = n.GetStringValue(); } },
                { "onPremisesSecurityIdentifier", n => { OnPremisesSecurityIdentifier = n.GetStringValue(); } },
                { "onPremisesSyncEnabled", n => { OnPremisesSyncEnabled = n.GetBoolValue(); } },
                { "onenote", n => { Onenote = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Onenote>(global::Microsoft.Graph.Beta.Models.Onenote.CreateFromDiscriminatorValue); } },
                { "organizationId", n => { OrganizationId = n.GetStringValue(); } },
                { "owners", n => { Owners = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "permissionGrants", n => { PermissionGrants = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>(global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant.CreateFromDiscriminatorValue)?.AsList(); } },
                { "photo", n => { Photo = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ProfilePhoto>(global::Microsoft.Graph.Beta.Models.ProfilePhoto.CreateFromDiscriminatorValue); } },
                { "photos", n => { Photos = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ProfilePhoto>(global::Microsoft.Graph.Beta.Models.ProfilePhoto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "planner", n => { Planner = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PlannerGroup>(global::Microsoft.Graph.Beta.Models.PlannerGroup.CreateFromDiscriminatorValue); } },
                { "preferredDataLocation", n => { PreferredDataLocation = n.GetStringValue(); } },
                { "preferredLanguage", n => { PreferredLanguage = n.GetStringValue(); } },
                { "proxyAddresses", n => { ProxyAddresses = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "rejectedSenders", n => { RejectedSenders = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "renewedDateTime", n => { RenewedDateTime = n.GetDateTimeOffsetValue(); } },
                { "resourceBehaviorOptions", n => { ResourceBehaviorOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "resourceProvisioningOptions", n => { ResourceProvisioningOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "securityEnabled", n => { SecurityEnabled = n.GetBoolValue(); } },
                { "securityIdentifier", n => { SecurityIdentifier = n.GetStringValue(); } },
                { "serviceProvisioningErrors", n => { ServiceProvisioningErrors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>(global::Microsoft.Graph.Beta.Models.ServiceProvisioningError.CreateFromDiscriminatorValue)?.AsList(); } },
                { "settings", n => { Settings = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectorySetting>(global::Microsoft.Graph.Beta.Models.DirectorySetting.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sites", n => { Sites = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Site>(global::Microsoft.Graph.Beta.Models.Site.CreateFromDiscriminatorValue)?.AsList(); } },
                { "team", n => { Team = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.Team>(global::Microsoft.Graph.Beta.Models.Team.CreateFromDiscriminatorValue); } },
                { "theme", n => { Theme = n.GetStringValue(); } },
                { "threads", n => { Threads = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ConversationThread>(global::Microsoft.Graph.Beta.Models.ConversationThread.CreateFromDiscriminatorValue)?.AsList(); } },
                { "transitiveMemberOf", n => { TransitiveMemberOf = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "transitiveMembers", n => { TransitiveMembers = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>(global::Microsoft.Graph.Beta.Models.DirectoryObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "uniqueName", n => { UniqueName = n.GetStringValue(); } },
                { "unseenConversationsCount", n => { UnseenConversationsCount = n.GetIntValue(); } },
                { "unseenCount", n => { UnseenCount = n.GetIntValue(); } },
                { "unseenMessagesCount", n => { UnseenMessagesCount = n.GetIntValue(); } },
                { "visibility", n => { Visibility = n.GetStringValue(); } },
                { "writebackConfiguration", n => { WritebackConfiguration = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.GroupWritebackConfiguration>(global::Microsoft.Graph.Beta.Models.GroupWritebackConfiguration.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("acceptedSenders", AcceptedSenders);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.GroupAccessType>("accessType", AccessType);
            writer.WriteBoolValue("allowExternalSenders", AllowExternalSenders);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AppRoleAssignment>("appRoleAssignments", AppRoleAssignments);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignedLabel>("assignedLabels", AssignedLabels);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.AssignedLicense>("assignedLicenses", AssignedLicenses);
            writer.WriteBoolValue("autoSubscribeNewMembers", AutoSubscribeNewMembers);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Calendar>("calendar", Calendar);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Event>("calendarView", CalendarView);
            writer.WriteStringValue("classification", Classification);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Conversation>("conversations", Conversations);
            writer.WriteStringValue("createdByAppId", CreatedByAppId);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.DirectoryObject>("createdOnBehalfOf", CreatedOnBehalfOf);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Drive>("drive", Drive);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Drive>("drives", Drives);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Endpoint>("endpoints", Endpoints);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Event>("events", Events);
            writer.WriteDateTimeOffsetValue("expirationDateTime", ExpirationDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Extension>("extensions", Extensions);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.GroupLifecyclePolicy>("groupLifecyclePolicies", GroupLifecyclePolicies);
            writer.WriteCollectionOfPrimitiveValues<string>("groupTypes", GroupTypes);
            writer.WriteBoolValue("hasMembersWithLicenseErrors", HasMembersWithLicenseErrors);
            writer.WriteBoolValue("hideFromAddressLists", HideFromAddressLists);
            writer.WriteBoolValue("hideFromOutlookClients", HideFromOutlookClients);
            writer.WriteCollectionOfPrimitiveValues<string>("infoCatalogs", InfoCatalogs);
            writer.WriteBoolValue("isArchived", IsArchived);
            writer.WriteBoolValue("isAssignableToRole", IsAssignableToRole);
            writer.WriteBoolValue("isFavorite", IsFavorite);
            writer.WriteBoolValue("isManagementRestricted", IsManagementRestricted);
            writer.WriteBoolValue("isSubscribedByMail", IsSubscribedByMail);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.LicenseProcessingState>("licenseProcessingState", LicenseProcessingState);
            writer.WriteStringValue("mail", Mail);
            writer.WriteBoolValue("mailEnabled", MailEnabled);
            writer.WriteStringValue("mailNickname", MailNickname);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("memberOf", MemberOf);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("members", Members);
            writer.WriteStringValue("membershipRule", MembershipRule);
            writer.WriteStringValue("membershipRuleProcessingState", MembershipRuleProcessingState);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.MembershipRuleProcessingStatus>("membershipRuleProcessingStatus", MembershipRuleProcessingStatus);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("membersWithLicenseErrors", MembersWithLicenseErrors);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Onenote>("onenote", Onenote);
            writer.WriteStringValue("onPremisesDomainName", OnPremisesDomainName);
            writer.WriteDateTimeOffsetValue("onPremisesLastSyncDateTime", OnPremisesLastSyncDateTime);
            writer.WriteStringValue("onPremisesNetBiosName", OnPremisesNetBiosName);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.OnPremisesProvisioningError>("onPremisesProvisioningErrors", OnPremisesProvisioningErrors);
            writer.WriteStringValue("onPremisesSamAccountName", OnPremisesSamAccountName);
            writer.WriteStringValue("onPremisesSecurityIdentifier", OnPremisesSecurityIdentifier);
            writer.WriteBoolValue("onPremisesSyncEnabled", OnPremisesSyncEnabled);
            writer.WriteStringValue("organizationId", OrganizationId);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("owners", Owners);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ResourceSpecificPermissionGrant>("permissionGrants", PermissionGrants);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.ProfilePhoto>("photo", Photo);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ProfilePhoto>("photos", Photos);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PlannerGroup>("planner", Planner);
            writer.WriteStringValue("preferredDataLocation", PreferredDataLocation);
            writer.WriteStringValue("preferredLanguage", PreferredLanguage);
            writer.WriteCollectionOfPrimitiveValues<string>("proxyAddresses", ProxyAddresses);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("rejectedSenders", RejectedSenders);
            writer.WriteDateTimeOffsetValue("renewedDateTime", RenewedDateTime);
            writer.WriteCollectionOfPrimitiveValues<string>("resourceBehaviorOptions", ResourceBehaviorOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("resourceProvisioningOptions", ResourceProvisioningOptions);
            writer.WriteBoolValue("securityEnabled", SecurityEnabled);
            writer.WriteStringValue("securityIdentifier", SecurityIdentifier);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ServiceProvisioningError>("serviceProvisioningErrors", ServiceProvisioningErrors);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectorySetting>("settings", Settings);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Site>("sites", Sites);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.Team>("team", Team);
            writer.WriteStringValue("theme", Theme);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ConversationThread>("threads", Threads);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("transitiveMemberOf", TransitiveMemberOf);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.DirectoryObject>("transitiveMembers", TransitiveMembers);
            writer.WriteStringValue("uniqueName", UniqueName);
            writer.WriteIntValue("unseenConversationsCount", UnseenConversationsCount);
            writer.WriteIntValue("unseenCount", UnseenCount);
            writer.WriteIntValue("unseenMessagesCount", UnseenMessagesCount);
            writer.WriteStringValue("visibility", Visibility);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.GroupWritebackConfiguration>("writebackConfiguration", WritebackConfiguration);
        }
    }
}
#pragma warning restore CS0618
