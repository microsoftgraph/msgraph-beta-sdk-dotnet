// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Workspace : global::Microsoft.Graph.Beta.Models.Place, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The name or identifier of the building where the workspace is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Building
        {
            get { return BackingStore?.Get<string?>("building"); }
            set { BackingStore?.Set("building", value); }
        }
#nullable restore
#else
        public string Building
        {
            get { return BackingStore?.Get<string>("building"); }
            set { BackingStore?.Set("building", value); }
        }
#endif
        /// <summary>The maximum number of individual desks within a workspace.</summary>
        public int? Capacity
        {
            get { return BackingStore?.Get<int?>("capacity"); }
            set { BackingStore?.Set("capacity", value); }
        }
        /// <summary>The name of the display device (for example, monitor or projector) that is available in the workspace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayDeviceName
        {
            get { return BackingStore?.Get<string?>("displayDeviceName"); }
            set { BackingStore?.Set("displayDeviceName", value); }
        }
#nullable restore
#else
        public string DisplayDeviceName
        {
            get { return BackingStore?.Get<string>("displayDeviceName"); }
            set { BackingStore?.Set("displayDeviceName", value); }
        }
#endif
        /// <summary>The email address that is associated with the workspace. This email address is used for booking.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress
        {
            get { return BackingStore?.Get<string?>("emailAddress"); }
            set { BackingStore?.Set("emailAddress", value); }
        }
#nullable restore
#else
        public string EmailAddress
        {
            get { return BackingStore?.Get<string>("emailAddress"); }
            set { BackingStore?.Set("emailAddress", value); }
        }
#endif
        /// <summary>A human-readable label for the floor; for example, Ground Floor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FloorLabel
        {
            get { return BackingStore?.Get<string?>("floorLabel"); }
            set { BackingStore?.Set("floorLabel", value); }
        }
#nullable restore
#else
        public string FloorLabel
        {
            get { return BackingStore?.Get<string>("floorLabel"); }
            set { BackingStore?.Set("floorLabel", value); }
        }
#endif
        /// <summary>The numeric floor level within the building. For example, 1 for first floor, 2 for second floor, and so on.</summary>
        public int? FloorNumber
        {
            get { return BackingStore?.Get<int?>("floorNumber"); }
            set { BackingStore?.Set("floorNumber", value); }
        }
        /// <summary>The mode for a workspace. The supported modes are:reservablePlaceMode - Workspaces that can be booked in advance using desk pool reservation tools.dropInPlaceMode - First come, first served desks. When you plug into a peripheral on one of these desks in the workspace, the desk is booked for you, assuming that the peripheral has been associated with the desk in the Microsoft Teams Rooms Pro management portal.offlinePlaceMode - Workspaces that are taken down for maintenance or marked as not reservable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.PlaceMode? Mode
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlaceMode?>("mode"); }
            set { BackingStore?.Set("mode", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.PlaceMode Mode
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.PlaceMode>("mode"); }
            set { BackingStore?.Set("mode", value); }
        }
#endif
        /// <summary>A short, friendly name for the workspace, often used for easier identification or display in the UI.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nickname
        {
            get { return BackingStore?.Get<string?>("nickname"); }
            set { BackingStore?.Set("nickname", value); }
        }
#nullable restore
#else
        public string Nickname
        {
            get { return BackingStore?.Get<string>("nickname"); }
            set { BackingStore?.Set("nickname", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.Workspace"/> and sets the default values.
        /// </summary>
        public Workspace() : base()
        {
            OdataType = "#microsoft.graph.workspace";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.Workspace"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.Workspace CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.Workspace();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "building", n => { Building = n.GetStringValue(); } },
                { "capacity", n => { Capacity = n.GetIntValue(); } },
                { "displayDeviceName", n => { DisplayDeviceName = n.GetStringValue(); } },
                { "emailAddress", n => { EmailAddress = n.GetStringValue(); } },
                { "floorLabel", n => { FloorLabel = n.GetStringValue(); } },
                { "floorNumber", n => { FloorNumber = n.GetIntValue(); } },
                { "mode", n => { Mode = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.PlaceMode>(global::Microsoft.Graph.Beta.Models.PlaceMode.CreateFromDiscriminatorValue); } },
                { "nickname", n => { Nickname = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("building", Building);
            writer.WriteIntValue("capacity", Capacity);
            writer.WriteStringValue("displayDeviceName", DisplayDeviceName);
            writer.WriteStringValue("emailAddress", EmailAddress);
            writer.WriteStringValue("floorLabel", FloorLabel);
            writer.WriteIntValue("floorNumber", FloorNumber);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.PlaceMode>("mode", Mode);
            writer.WriteStringValue("nickname", Nickname);
        }
    }
}
#pragma warning restore CS0618
