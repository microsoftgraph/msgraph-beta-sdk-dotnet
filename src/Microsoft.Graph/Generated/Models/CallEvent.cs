// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CallEvent : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The event type of the call. Possible values are: callStarted, callEnded, unknownFutureValue, rosterUpdated. You must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: rosterUpdated.</summary>
        public global::Microsoft.Graph.Beta.Models.CallEventType? CallEventType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CallEventType?>("callEventType"); }
            set { BackingStore?.Set("callEventType", value); }
        }
        /// <summary>The date and time when the event occurred. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? EventDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("eventDateTime"); }
            set { BackingStore?.Set("eventDateTime", value); }
        }
        /// <summary>Participants collection for the call event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.Participant>? Participants
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Participant>?>("participants"); }
            set { BackingStore?.Set("participants", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.Participant> Participants
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.Participant>>("participants"); }
            set { BackingStore?.Set("participants", value); }
        }
#endif
        /// <summary>The recordingState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.RecordingState? RecordingState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RecordingState?>("recordingState"); }
            set { BackingStore?.Set("recordingState", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.RecordingState RecordingState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.RecordingState>("recordingState"); }
            set { BackingStore?.Set("recordingState", value); }
        }
#endif
        /// <summary>The transcriptionState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.TranscriptionState? TranscriptionState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TranscriptionState?>("transcriptionState"); }
            set { BackingStore?.Set("transcriptionState", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.TranscriptionState TranscriptionState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.TranscriptionState>("transcriptionState"); }
            set { BackingStore?.Set("transcriptionState", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CallEvent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.CallEvent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.emergencyCallEvent" => new global::Microsoft.Graph.Beta.Models.EmergencyCallEvent(),
                _ => new global::Microsoft.Graph.Beta.Models.CallEvent(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "callEventType", n => { CallEventType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CallEventType>(); } },
                { "eventDateTime", n => { EventDateTime = n.GetDateTimeOffsetValue(); } },
                { "participants", n => { Participants = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Participant>(global::Microsoft.Graph.Beta.Models.Participant.CreateFromDiscriminatorValue)?.AsList(); } },
                { "recordingState", n => { RecordingState = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.RecordingState>(global::Microsoft.Graph.Beta.Models.RecordingState.CreateFromDiscriminatorValue); } },
                { "transcriptionState", n => { TranscriptionState = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.TranscriptionState>(global::Microsoft.Graph.Beta.Models.TranscriptionState.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CallEventType>("callEventType", CallEventType);
            writer.WriteDateTimeOffsetValue("eventDateTime", EventDateTime);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.Participant>("participants", Participants);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.RecordingState>("recordingState", RecordingState);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.TranscriptionState>("transcriptionState", TranscriptionState);
        }
    }
}
#pragma warning restore CS0618
