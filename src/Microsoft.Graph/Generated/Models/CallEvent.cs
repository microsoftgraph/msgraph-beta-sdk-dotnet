// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class CallEvent : Entity, IParsable {
        /// <summary>The callEventType property</summary>
        public Microsoft.Graph.Beta.Models.CallEventType? CallEventType {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.CallEventType?>("callEventType"); }
            set { BackingStore?.Set("callEventType", value); }
        }
        /// <summary>The direction property</summary>
        public CallDirection? Direction {
            get { return BackingStore?.Get<CallDirection?>("direction"); }
            set { BackingStore?.Set("direction", value); }
        }
        /// <summary>The joinCallUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JoinCallUrl {
            get { return BackingStore?.Get<string?>("joinCallUrl"); }
            set { BackingStore?.Set("joinCallUrl", value); }
        }
#nullable restore
#else
        public string JoinCallUrl {
            get { return BackingStore?.Get<string>("joinCallUrl"); }
            set { BackingStore?.Set("joinCallUrl", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new CallEvent CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CallEvent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"callEventType", n => { CallEventType = n.GetEnumValue<CallEventType>(); } },
                {"direction", n => { Direction = n.GetEnumValue<CallDirection>(); } },
                {"joinCallUrl", n => { JoinCallUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<CallEventType>("callEventType", CallEventType);
            writer.WriteEnumValue<CallDirection>("direction", Direction);
            writer.WriteStringValue("joinCallUrl", JoinCallUrl);
        }
    }
}
