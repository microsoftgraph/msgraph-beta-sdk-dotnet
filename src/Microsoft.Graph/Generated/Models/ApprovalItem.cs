// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class ApprovalItem : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Indicates whether the approval item can be canceled.</summary>
        public bool? AllowCancel
        {
            get { return BackingStore?.Get<bool?>("allowCancel"); }
            set { BackingStore?.Set("allowCancel", value); }
        }
        /// <summary>Indicates whether email notification is enabled.</summary>
        public bool? AllowEmailNotification
        {
            get { return BackingStore?.Get<bool?>("allowEmailNotification"); }
            set { BackingStore?.Set("allowEmailNotification", value); }
        }
        /// <summary>The workflow type of the approval item. The possible values are: basic, basicAwaitAll, custom, customAwaitAll. Required.</summary>
        public global::Microsoft.Graph.Beta.Models.ApprovalItemType? ApprovalType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ApprovalItemType?>("approvalType"); }
            set { BackingStore?.Set("approvalType", value); }
        }
        /// <summary>The identity of the principals to whom the approval item was initially assigned. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet>? Approvers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet>?>("approvers"); }
            set { BackingStore?.Set("approvers", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet> Approvers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet>>("approvers"); }
            set { BackingStore?.Set("approvers", value); }
        }
#endif
        /// <summary>Approval request completion date and time. Read-only.</summary>
        public DateTimeOffset? CompletedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("completedDateTime"); }
            set { BackingStore?.Set("completedDateTime", value); }
        }
        /// <summary>Creation date and time of the approval request. Read-only.</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The description of the approval request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The displayName of the approval request. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The identity set of the principal who owns the approval item. Only provide a value for this property when creating an approval item on behalf of the principal. If the owner field isn&apos;t provided, the user information from the user context is used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet? Owner
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet?>("owner"); }
            set { BackingStore?.Set("owner", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet Owner
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet>("owner"); }
            set { BackingStore?.Set("owner", value); }
        }
#endif
        /// <summary>A collection of requests created for each approver on the approval item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ApprovalItemRequest>? Requests
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ApprovalItemRequest>?>("requests"); }
            set { BackingStore?.Set("requests", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ApprovalItemRequest> Requests
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ApprovalItemRequest>>("requests"); }
            set { BackingStore?.Set("requests", value); }
        }
#endif
        /// <summary>Approval response prompts. Only provide a value for this property when creating a custom approval item. For custom approval items, supply two response prompt strings. The default response prompts are &apos;Approve&apos; and &apos;Reject&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ResponsePrompts
        {
            get { return BackingStore?.Get<List<string>?>("responsePrompts"); }
            set { BackingStore?.Set("responsePrompts", value); }
        }
#nullable restore
#else
        public List<string> ResponsePrompts
        {
            get { return BackingStore?.Get<List<string>>("responsePrompts"); }
            set { BackingStore?.Set("responsePrompts", value); }
        }
#endif
        /// <summary>A collection of responses created for the approval item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ApprovalItemResponse>? Responses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ApprovalItemResponse>?>("responses"); }
            set { BackingStore?.Set("responses", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ApprovalItemResponse> Responses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ApprovalItemResponse>>("responses"); }
            set { BackingStore?.Set("responses", value); }
        }
#endif
        /// <summary>The result field is only populated once the approval item is in its final state. The result of the approval item is based on the approvalType. For basic approval items, the result is either &apos;Approved&apos; or &apos;Rejected&apos;. For custom approval items, the result could either be a single response or multiple responses separated by a semi-colon. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Result
        {
            get { return BackingStore?.Get<string?>("result"); }
            set { BackingStore?.Set("result", value); }
        }
#nullable restore
#else
        public string Result
        {
            get { return BackingStore?.Get<string>("result"); }
            set { BackingStore?.Set("result", value); }
        }
#endif
        /// <summary>The approval item state. The possible values are: canceled, created, pending, completed. Read-only.</summary>
        public global::Microsoft.Graph.Beta.Models.ApprovalItemState? State
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ApprovalItemState?>("state"); }
            set { BackingStore?.Set("state", value); }
        }
        /// <summary>Represents user viewpoints data on the ApprovalItem. The data includes the users roles regarding the approval item. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.ApprovalItemViewPoint? ViewPoint
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ApprovalItemViewPoint?>("viewPoint"); }
            set { BackingStore?.Set("viewPoint", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.ApprovalItemViewPoint ViewPoint
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.ApprovalItemViewPoint>("viewPoint"); }
            set { BackingStore?.Set("viewPoint", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.ApprovalItem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.ApprovalItem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.ApprovalItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowCancel", n => { AllowCancel = n.GetBoolValue(); } },
                { "allowEmailNotification", n => { AllowEmailNotification = n.GetBoolValue(); } },
                { "approvalType", n => { ApprovalType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ApprovalItemType>(); } },
                { "approvers", n => { Approvers = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet>(global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet.CreateFromDiscriminatorValue)?.AsList(); } },
                { "completedDateTime", n => { CompletedDateTime = n.GetDateTimeOffsetValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "owner", n => { Owner = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet>(global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet.CreateFromDiscriminatorValue); } },
                { "requests", n => { Requests = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ApprovalItemRequest>(global::Microsoft.Graph.Beta.Models.ApprovalItemRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "responsePrompts", n => { ResponsePrompts = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "responses", n => { Responses = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ApprovalItemResponse>(global::Microsoft.Graph.Beta.Models.ApprovalItemResponse.CreateFromDiscriminatorValue)?.AsList(); } },
                { "result", n => { Result = n.GetStringValue(); } },
                { "state", n => { State = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.ApprovalItemState>(); } },
                { "viewPoint", n => { ViewPoint = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.ApprovalItemViewPoint>(global::Microsoft.Graph.Beta.Models.ApprovalItemViewPoint.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("allowEmailNotification", AllowEmailNotification);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.ApprovalItemType>("approvalType", ApprovalType);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ApprovalIdentitySet>("approvers", Approvers);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ApprovalItemRequest>("requests", Requests);
            writer.WriteCollectionOfPrimitiveValues<string>("responsePrompts", ResponsePrompts);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ApprovalItemResponse>("responses", Responses);
        }
    }
}
#pragma warning restore CS0618
