// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class Attendee : Microsoft.Graph.Beta.Models.AttendeeBase, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>An alternate date/time proposed by the attendee for a meeting request to start and end. If the attendee hasn&apos;t proposed another time, then this property isn&apos;t included in a response of a GET event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.TimeSlot? ProposedNewTime
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TimeSlot?>("proposedNewTime"); }
            set { BackingStore?.Set("proposedNewTime", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.TimeSlot ProposedNewTime
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.TimeSlot>("proposedNewTime"); }
            set { BackingStore?.Set("proposedNewTime", value); }
        }
#endif
        /// <summary>The attendee&apos;s response (none, accepted, declined, etc.) for the event and date-time that the response was sent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.ResponseStatus? Status
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ResponseStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.ResponseStatus Status
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.ResponseStatus>("status"); }
            set { BackingStore?.Set("status", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Models.Attendee"/> and sets the default values.
        /// </summary>
        public Attendee() : base()
        {
            OdataType = "#microsoft.graph.attendee";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.Attendee"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.Attendee CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Beta.Models.Attendee();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "proposedNewTime", n => { ProposedNewTime = n.GetObjectValue<Microsoft.Graph.Beta.Models.TimeSlot>(Microsoft.Graph.Beta.Models.TimeSlot.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetObjectValue<Microsoft.Graph.Beta.Models.ResponseStatus>(Microsoft.Graph.Beta.Models.ResponseStatus.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.TimeSlot>("proposedNewTime", ProposedNewTime);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.ResponseStatus>("status", Status);
        }
    }
}
