// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CertificateAuthorityDetail : global::Microsoft.Graph.Beta.Models.DirectoryObject, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The certificate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? Certificate
        {
            get { return BackingStore?.Get<byte[]?>("certificate"); }
            set { BackingStore?.Set("certificate", value); }
        }
#nullable restore
#else
        public byte[] Certificate
        {
            get { return BackingStore?.Get<byte[]>("certificate"); }
            set { BackingStore?.Set("certificate", value); }
        }
#endif
        /// <summary>The certificateAuthorityType property</summary>
        public global::Microsoft.Graph.Beta.Models.CertificateAuthorityType? CertificateAuthorityType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.CertificateAuthorityType?>("certificateAuthorityType"); }
            set { BackingStore?.Set("certificateAuthorityType", value); }
        }
        /// <summary>The certificateRevocationListUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateRevocationListUrl
        {
            get { return BackingStore?.Get<string?>("certificateRevocationListUrl"); }
            set { BackingStore?.Set("certificateRevocationListUrl", value); }
        }
#nullable restore
#else
        public string CertificateRevocationListUrl
        {
            get { return BackingStore?.Get<string>("certificateRevocationListUrl"); }
            set { BackingStore?.Set("certificateRevocationListUrl", value); }
        }
#endif
        /// <summary>The createdDateTime property</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The deltacertificateRevocationListUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeltacertificateRevocationListUrl
        {
            get { return BackingStore?.Get<string?>("deltacertificateRevocationListUrl"); }
            set { BackingStore?.Set("deltacertificateRevocationListUrl", value); }
        }
#nullable restore
#else
        public string DeltacertificateRevocationListUrl
        {
            get { return BackingStore?.Get<string>("deltacertificateRevocationListUrl"); }
            set { BackingStore?.Set("deltacertificateRevocationListUrl", value); }
        }
#endif
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName
        {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName
        {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The expirationDateTime property</summary>
        public DateTimeOffset? ExpirationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("expirationDateTime"); }
            set { BackingStore?.Set("expirationDateTime", value); }
        }
        /// <summary>The isIssuerHintEnabled property</summary>
        public bool? IsIssuerHintEnabled
        {
            get { return BackingStore?.Get<bool?>("isIssuerHintEnabled"); }
            set { BackingStore?.Set("isIssuerHintEnabled", value); }
        }
        /// <summary>The issuer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer
        {
            get { return BackingStore?.Get<string?>("issuer"); }
            set { BackingStore?.Set("issuer", value); }
        }
#nullable restore
#else
        public string Issuer
        {
            get { return BackingStore?.Get<string>("issuer"); }
            set { BackingStore?.Set("issuer", value); }
        }
#endif
        /// <summary>The issuerSubjectKeyIdentifier property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuerSubjectKeyIdentifier
        {
            get { return BackingStore?.Get<string?>("issuerSubjectKeyIdentifier"); }
            set { BackingStore?.Set("issuerSubjectKeyIdentifier", value); }
        }
#nullable restore
#else
        public string IssuerSubjectKeyIdentifier
        {
            get { return BackingStore?.Get<string>("issuerSubjectKeyIdentifier"); }
            set { BackingStore?.Set("issuerSubjectKeyIdentifier", value); }
        }
#endif
        /// <summary>The thumbprint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Thumbprint
        {
            get { return BackingStore?.Get<string?>("thumbprint"); }
            set { BackingStore?.Set("thumbprint", value); }
        }
#nullable restore
#else
        public string Thumbprint
        {
            get { return BackingStore?.Get<string>("thumbprint"); }
            set { BackingStore?.Set("thumbprint", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.CertificateAuthorityDetail"/> and sets the default values.
        /// </summary>
        public CertificateAuthorityDetail() : base()
        {
            OdataType = "#microsoft.graph.certificateAuthorityDetail";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CertificateAuthorityDetail"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.CertificateAuthorityDetail CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CertificateAuthorityDetail();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "certificate", n => { Certificate = n.GetByteArrayValue(); } },
                { "certificateAuthorityType", n => { CertificateAuthorityType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.CertificateAuthorityType>(); } },
                { "certificateRevocationListUrl", n => { CertificateRevocationListUrl = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "deltacertificateRevocationListUrl", n => { DeltacertificateRevocationListUrl = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "expirationDateTime", n => { ExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "isIssuerHintEnabled", n => { IsIssuerHintEnabled = n.GetBoolValue(); } },
                { "issuer", n => { Issuer = n.GetStringValue(); } },
                { "issuerSubjectKeyIdentifier", n => { IssuerSubjectKeyIdentifier = n.GetStringValue(); } },
                { "thumbprint", n => { Thumbprint = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteByteArrayValue("certificate", Certificate);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.CertificateAuthorityType>("certificateAuthorityType", CertificateAuthorityType);
            writer.WriteStringValue("certificateRevocationListUrl", CertificateRevocationListUrl);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("deltacertificateRevocationListUrl", DeltacertificateRevocationListUrl);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteDateTimeOffsetValue("expirationDateTime", ExpirationDateTime);
            writer.WriteBoolValue("isIssuerHintEnabled", IsIssuerHintEnabled);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteStringValue("issuerSubjectKeyIdentifier", IssuerSubjectKeyIdentifier);
            writer.WriteStringValue("thumbprint", Thumbprint);
        }
    }
}
#pragma warning restore CS0618
