// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    /// <summary>
    /// Entity that represents device setting state summary for an intent
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class DeviceManagementIntentDeviceSettingStateSummary : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    {
        /// <summary>Number of compliant devices</summary>
        public int? CompliantCount
        {
            get { return BackingStore?.Get<int?>("compliantCount"); }
            set { BackingStore?.Set("compliantCount", value); }
        }
        /// <summary>Number of devices in conflict</summary>
        public int? ConflictCount
        {
            get { return BackingStore?.Get<int?>("conflictCount"); }
            set { BackingStore?.Set("conflictCount", value); }
        }
        /// <summary>Number of error devices</summary>
        public int? ErrorCount
        {
            get { return BackingStore?.Get<int?>("errorCount"); }
            set { BackingStore?.Set("errorCount", value); }
        }
        /// <summary>Number of non compliant devices</summary>
        public int? NonCompliantCount
        {
            get { return BackingStore?.Get<int?>("nonCompliantCount"); }
            set { BackingStore?.Set("nonCompliantCount", value); }
        }
        /// <summary>Number of not applicable devices</summary>
        public int? NotApplicableCount
        {
            get { return BackingStore?.Get<int?>("notApplicableCount"); }
            set { BackingStore?.Set("notApplicableCount", value); }
        }
        /// <summary>Number of remediated devices</summary>
        public int? RemediatedCount
        {
            get { return BackingStore?.Get<int?>("remediatedCount"); }
            set { BackingStore?.Set("remediatedCount", value); }
        }
        /// <summary>Name of a setting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SettingName
        {
            get { return BackingStore?.Get<string?>("settingName"); }
            set { BackingStore?.Set("settingName", value); }
        }
#nullable restore
#else
        public string SettingName
        {
            get { return BackingStore?.Get<string>("settingName"); }
            set { BackingStore?.Set("settingName", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.DeviceManagementIntentDeviceSettingStateSummary"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.DeviceManagementIntentDeviceSettingStateSummary CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.DeviceManagementIntentDeviceSettingStateSummary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "compliantCount", n => { CompliantCount = n.GetIntValue(); } },
                { "conflictCount", n => { ConflictCount = n.GetIntValue(); } },
                { "errorCount", n => { ErrorCount = n.GetIntValue(); } },
                { "nonCompliantCount", n => { NonCompliantCount = n.GetIntValue(); } },
                { "notApplicableCount", n => { NotApplicableCount = n.GetIntValue(); } },
                { "remediatedCount", n => { RemediatedCount = n.GetIntValue(); } },
                { "settingName", n => { SettingName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("compliantCount", CompliantCount);
            writer.WriteIntValue("conflictCount", ConflictCount);
            writer.WriteIntValue("errorCount", ErrorCount);
            writer.WriteIntValue("nonCompliantCount", NonCompliantCount);
            writer.WriteIntValue("notApplicableCount", NotApplicableCount);
            writer.WriteIntValue("remediatedCount", RemediatedCount);
            writer.WriteStringValue("settingName", SettingName);
        }
    }
}
#pragma warning restore CS0618
