// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ReadingAssignmentSubmission : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Accuracy score of the reading progress.</summary>
        public double? AccuracyScore
        {
            get { return BackingStore?.Get<double?>("accuracyScore"); }
            set { BackingStore?.Set("accuracyScore", value); }
        }
        /// <summary>Indicates whether the submission is an attempt by the student or a miscue edit done by the educator. The possible values are Attempt and EditMiscue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Action
        {
            get { return BackingStore?.Get<string?>("action"); }
            set { BackingStore?.Set("action", value); }
        }
#nullable restore
#else
        public string Action
        {
            get { return BackingStore?.Get<string>("action"); }
            set { BackingStore?.Set("action", value); }
        }
#endif
        /// <summary>ID of the assignment with which this submission is associated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssignmentId
        {
            get { return BackingStore?.Get<string?>("assignmentId"); }
            set { BackingStore?.Set("assignmentId", value); }
        }
#nullable restore
#else
        public string AssignmentId
        {
            get { return BackingStore?.Get<string>("assignmentId"); }
            set { BackingStore?.Set("assignmentId", value); }
        }
#endif
        /// <summary>List of words that the student found challenging during the reading session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ChallengingWord>? ChallengingWords
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ChallengingWord>?>("challengingWords"); }
            set { BackingStore?.Set("challengingWords", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ChallengingWord> ChallengingWords
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ChallengingWord>>("challengingWords"); }
            set { BackingStore?.Set("challengingWords", value); }
        }
#endif
        /// <summary>ID of the class this reading progress is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClassId
        {
            get { return BackingStore?.Get<string?>("classId"); }
            set { BackingStore?.Set("classId", value); }
        }
#nullable restore
#else
        public string ClassId
        {
            get { return BackingStore?.Get<string>("classId"); }
            set { BackingStore?.Set("classId", value); }
        }
#endif
        /// <summary>Insertions of the reading progress.</summary>
        public long? Insertions
        {
            get { return BackingStore?.Get<long?>("insertions"); }
            set { BackingStore?.Set("insertions", value); }
        }
        /// <summary>Mispronunciations of the reading progress.</summary>
        public long? Mispronunciations
        {
            get { return BackingStore?.Get<long?>("mispronunciations"); }
            set { BackingStore?.Set("mispronunciations", value); }
        }
        /// <summary>Number of exclamation marks missed in the reading passage.</summary>
        public long? MissedExclamationMarks
        {
            get { return BackingStore?.Get<long?>("missedExclamationMarks"); }
            set { BackingStore?.Set("missedExclamationMarks", value); }
        }
        /// <summary>Number of periods missed in the reading passage.</summary>
        public long? MissedPeriods
        {
            get { return BackingStore?.Get<long?>("missedPeriods"); }
            set { BackingStore?.Set("missedPeriods", value); }
        }
        /// <summary>Number of question marks missed in the reading passage.</summary>
        public long? MissedQuestionMarks
        {
            get { return BackingStore?.Get<long?>("missedQuestionMarks"); }
            set { BackingStore?.Set("missedQuestionMarks", value); }
        }
        /// <summary>Number of short words missed during the reading session.</summary>
        public long? MissedShorts
        {
            get { return BackingStore?.Get<long?>("missedShorts"); }
            set { BackingStore?.Set("missedShorts", value); }
        }
        /// <summary>Score that reflects the student&apos;s use of intonation and expression. Lower scores indicate more monotone reading.</summary>
        public double? MonotoneScore
        {
            get { return BackingStore?.Get<double?>("monotoneScore"); }
            set { BackingStore?.Set("monotoneScore", value); }
        }
        /// <summary>Omissions of the reading progress.</summary>
        public long? Omissions
        {
            get { return BackingStore?.Get<long?>("omissions"); }
            set { BackingStore?.Set("omissions", value); }
        }
        /// <summary>Number of times the student repeated words or phrases during the reading session.</summary>
        public long? Repetitions
        {
            get { return BackingStore?.Get<long?>("repetitions"); }
            set { BackingStore?.Set("repetitions", value); }
        }
        /// <summary>Number of times the student self-corrected their reading errors.</summary>
        public long? SelfCorrections
        {
            get { return BackingStore?.Get<long?>("selfCorrections"); }
            set { BackingStore?.Set("selfCorrections", value); }
        }
        /// <summary>ID of the user this reading progress is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StudentId
        {
            get { return BackingStore?.Get<string?>("studentId"); }
            set { BackingStore?.Set("studentId", value); }
        }
#nullable restore
#else
        public string StudentId
        {
            get { return BackingStore?.Get<string>("studentId"); }
            set { BackingStore?.Set("studentId", value); }
        }
#endif
        /// <summary>Date and time of the submission this reading progress is associated with. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? SubmissionDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("submissionDateTime"); }
            set { BackingStore?.Set("submissionDateTime", value); }
        }
        /// <summary>ID of the submission this reading progress is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmissionId
        {
            get { return BackingStore?.Get<string?>("submissionId"); }
            set { BackingStore?.Set("submissionId", value); }
        }
#nullable restore
#else
        public string SubmissionId
        {
            get { return BackingStore?.Get<string>("submissionId"); }
            set { BackingStore?.Set("submissionId", value); }
        }
#endif
        /// <summary>Number of unexpected pauses made during the reading session.</summary>
        public long? UnexpectedPauses
        {
            get { return BackingStore?.Get<long?>("unexpectedPauses"); }
            set { BackingStore?.Set("unexpectedPauses", value); }
        }
        /// <summary>Words count of the reading progress.</summary>
        public long? WordCount
        {
            get { return BackingStore?.Get<long?>("wordCount"); }
            set { BackingStore?.Set("wordCount", value); }
        }
        /// <summary>Words per minute of the reading progress.</summary>
        public double? WordsPerMinute
        {
            get { return BackingStore?.Get<double?>("wordsPerMinute"); }
            set { BackingStore?.Set("wordsPerMinute", value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.ReadingAssignmentSubmission"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.ReadingAssignmentSubmission CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.ReadingAssignmentSubmission();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accuracyScore", n => { AccuracyScore = n.GetDoubleValue(); } },
                { "action", n => { Action = n.GetStringValue(); } },
                { "assignmentId", n => { AssignmentId = n.GetStringValue(); } },
                { "challengingWords", n => { ChallengingWords = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ChallengingWord>(global::Microsoft.Graph.Beta.Models.ChallengingWord.CreateFromDiscriminatorValue)?.AsList(); } },
                { "classId", n => { ClassId = n.GetStringValue(); } },
                { "insertions", n => { Insertions = n.GetLongValue(); } },
                { "mispronunciations", n => { Mispronunciations = n.GetLongValue(); } },
                { "missedExclamationMarks", n => { MissedExclamationMarks = n.GetLongValue(); } },
                { "missedPeriods", n => { MissedPeriods = n.GetLongValue(); } },
                { "missedQuestionMarks", n => { MissedQuestionMarks = n.GetLongValue(); } },
                { "missedShorts", n => { MissedShorts = n.GetLongValue(); } },
                { "monotoneScore", n => { MonotoneScore = n.GetDoubleValue(); } },
                { "omissions", n => { Omissions = n.GetLongValue(); } },
                { "repetitions", n => { Repetitions = n.GetLongValue(); } },
                { "selfCorrections", n => { SelfCorrections = n.GetLongValue(); } },
                { "studentId", n => { StudentId = n.GetStringValue(); } },
                { "submissionDateTime", n => { SubmissionDateTime = n.GetDateTimeOffsetValue(); } },
                { "submissionId", n => { SubmissionId = n.GetStringValue(); } },
                { "unexpectedPauses", n => { UnexpectedPauses = n.GetLongValue(); } },
                { "wordCount", n => { WordCount = n.GetLongValue(); } },
                { "wordsPerMinute", n => { WordsPerMinute = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDoubleValue("accuracyScore", AccuracyScore);
            writer.WriteStringValue("action", Action);
            writer.WriteStringValue("assignmentId", AssignmentId);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ChallengingWord>("challengingWords", ChallengingWords);
            writer.WriteStringValue("classId", ClassId);
            writer.WriteLongValue("insertions", Insertions);
            writer.WriteLongValue("mispronunciations", Mispronunciations);
            writer.WriteLongValue("missedExclamationMarks", MissedExclamationMarks);
            writer.WriteLongValue("missedPeriods", MissedPeriods);
            writer.WriteLongValue("missedQuestionMarks", MissedQuestionMarks);
            writer.WriteLongValue("missedShorts", MissedShorts);
            writer.WriteDoubleValue("monotoneScore", MonotoneScore);
            writer.WriteLongValue("omissions", Omissions);
            writer.WriteLongValue("repetitions", Repetitions);
            writer.WriteLongValue("selfCorrections", SelfCorrections);
            writer.WriteStringValue("studentId", StudentId);
            writer.WriteDateTimeOffsetValue("submissionDateTime", SubmissionDateTime);
            writer.WriteStringValue("submissionId", SubmissionId);
            writer.WriteLongValue("unexpectedPauses", UnexpectedPauses);
            writer.WriteLongValue("wordCount", WordCount);
            writer.WriteDoubleValue("wordsPerMinute", WordsPerMinute);
        }
    }
}
#pragma warning restore CS0618
