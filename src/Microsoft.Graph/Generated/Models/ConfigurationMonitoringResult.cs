// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ConfigurationMonitoringResult : global::Microsoft.Graph.Beta.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The driftsCount property</summary>
        public int? DriftsCount
        {
            get { return BackingStore?.Get<int?>("driftsCount"); }
            set { BackingStore?.Set("driftsCount", value); }
        }
        /// <summary>The errorDetails property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.ErrorDetail>? ErrorDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ErrorDetail>?>("errorDetails"); }
            set { BackingStore?.Set("errorDetails", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.ErrorDetail> ErrorDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.ErrorDetail>>("errorDetails"); }
            set { BackingStore?.Set("errorDetails", value); }
        }
#endif
        /// <summary>The monitorId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MonitorId
        {
            get { return BackingStore?.Get<string?>("monitorId"); }
            set { BackingStore?.Set("monitorId", value); }
        }
#nullable restore
#else
        public string MonitorId
        {
            get { return BackingStore?.Get<string>("monitorId"); }
            set { BackingStore?.Set("monitorId", value); }
        }
#endif
        /// <summary>The runCompletionDateTime property</summary>
        public DateTimeOffset? RunCompletionDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("runCompletionDateTime"); }
            set { BackingStore?.Set("runCompletionDateTime", value); }
        }
        /// <summary>The runInitiationDateTime property</summary>
        public DateTimeOffset? RunInitiationDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("runInitiationDateTime"); }
            set { BackingStore?.Set("runInitiationDateTime", value); }
        }
        /// <summary>The runStatus property</summary>
        public global::Microsoft.Graph.Beta.Models.MonitorRunStatus? RunStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.MonitorRunStatus?>("runStatus"); }
            set { BackingStore?.Set("runStatus", value); }
        }
        /// <summary>The tenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId
        {
            get { return BackingStore?.Get<string?>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#nullable restore
#else
        public string TenantId
        {
            get { return BackingStore?.Get<string>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.ConfigurationMonitoringResult"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.ConfigurationMonitoringResult CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.ConfigurationMonitoringResult();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "driftsCount", n => { DriftsCount = n.GetIntValue(); } },
                { "errorDetails", n => { ErrorDetails = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.ErrorDetail>(global::Microsoft.Graph.Beta.Models.ErrorDetail.CreateFromDiscriminatorValue)?.AsList(); } },
                { "monitorId", n => { MonitorId = n.GetStringValue(); } },
                { "runCompletionDateTime", n => { RunCompletionDateTime = n.GetDateTimeOffsetValue(); } },
                { "runInitiationDateTime", n => { RunInitiationDateTime = n.GetDateTimeOffsetValue(); } },
                { "runStatus", n => { RunStatus = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.MonitorRunStatus>(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.MonitorRunStatus>("runStatus", RunStatus);
        }
    }
}
#pragma warning restore CS0618
