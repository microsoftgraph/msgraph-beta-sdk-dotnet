// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models.WindowsUpdates
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class QualityUpdateCatalogEntry : global::Microsoft.Graph.Beta.Models.WindowsUpdates.SoftwareUpdateCatalogEntry, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The catalog name of the content. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CatalogName
        {
            get { return BackingStore?.Get<string?>("catalogName"); }
            set { BackingStore?.Set("catalogName", value); }
        }
#nullable restore
#else
        public string CatalogName
        {
            get { return BackingStore?.Get<string>("catalogName"); }
            set { BackingStore?.Set("catalogName", value); }
        }
#endif
        /// <summary>Severity information of the Common Vulnerabilities and Exposures associated with the content.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCveSeverityInformation? CveSeverityInformation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCveSeverityInformation?>("cveSeverityInformation"); }
            set { BackingStore?.Set("cveSeverityInformation", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCveSeverityInformation CveSeverityInformation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCveSeverityInformation>("cveSeverityInformation"); }
            set { BackingStore?.Set("cveSeverityInformation", value); }
        }
#endif
        /// <summary>Indicates whether the content can be deployed as an expedited quality update. Read-only.</summary>
        public bool? IsExpeditable
        {
            get { return BackingStore?.Get<bool?>("isExpeditable"); }
            set { BackingStore?.Set("isExpeditable", value); }
        }
        /// <summary>The operating system product revisions that are released as part of this quality update.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Beta.Models.WindowsUpdates.ProductRevision>? ProductRevisions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.WindowsUpdates.ProductRevision>?>("productRevisions"); }
            set { BackingStore?.Set("productRevisions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Beta.Models.WindowsUpdates.ProductRevision> ProductRevisions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Beta.Models.WindowsUpdates.ProductRevision>>("productRevisions"); }
            set { BackingStore?.Set("productRevisions", value); }
        }
#endif
        /// <summary>The publishing cadence of the quality update. Possible values are: monthly, outOfBand, unknownFutureValue. Read-only.</summary>
        public global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCadence? QualityUpdateCadence
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCadence?>("qualityUpdateCadence"); }
            set { BackingStore?.Set("qualityUpdateCadence", value); }
        }
        /// <summary>The qualityUpdateClassification property</summary>
        public global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateClassification? QualityUpdateClassification
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateClassification?>("qualityUpdateClassification"); }
            set { BackingStore?.Set("qualityUpdateClassification", value); }
        }
        /// <summary>The short name of the content. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortName
        {
            get { return BackingStore?.Get<string?>("shortName"); }
            set { BackingStore?.Set("shortName", value); }
        }
#nullable restore
#else
        public string ShortName
        {
            get { return BackingStore?.Get<string>("shortName"); }
            set { BackingStore?.Set("shortName", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCatalogEntry"/> and sets the default values.
        /// </summary>
        public QualityUpdateCatalogEntry() : base()
        {
            OdataType = "#microsoft.graph.windowsUpdates.qualityUpdateCatalogEntry";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCatalogEntry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCatalogEntry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCatalogEntry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "catalogName", n => { CatalogName = n.GetStringValue(); } },
                { "cveSeverityInformation", n => { CveSeverityInformation = n.GetObjectValue<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCveSeverityInformation>(global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCveSeverityInformation.CreateFromDiscriminatorValue); } },
                { "isExpeditable", n => { IsExpeditable = n.GetBoolValue(); } },
                { "productRevisions", n => { ProductRevisions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.WindowsUpdates.ProductRevision>(global::Microsoft.Graph.Beta.Models.WindowsUpdates.ProductRevision.CreateFromDiscriminatorValue)?.AsList(); } },
                { "qualityUpdateCadence", n => { QualityUpdateCadence = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCadence>(); } },
                { "qualityUpdateClassification", n => { QualityUpdateClassification = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateClassification>(); } },
                { "shortName", n => { ShortName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("catalogName", CatalogName);
            writer.WriteObjectValue<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCveSeverityInformation>("cveSeverityInformation", CveSeverityInformation);
            writer.WriteBoolValue("isExpeditable", IsExpeditable);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Beta.Models.WindowsUpdates.ProductRevision>("productRevisions", ProductRevisions);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateCadence>("qualityUpdateCadence", QualityUpdateCadence);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.WindowsUpdates.QualityUpdateClassification>("qualityUpdateClassification", QualityUpdateClassification);
            writer.WriteStringValue("shortName", ShortName);
        }
    }
}
#pragma warning restore CS0618
