// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models
{
    #pragma warning disable CS1591
    public class PlannerTask : Microsoft.Graph.Beta.Models.PlannerDelta, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The number of checklist items with value set to false, representing incomplete items.</summary>
        public int? ActiveChecklistItemCount
        {
            get { return BackingStore?.Get<int?>("activeChecklistItemCount"); }
            set { BackingStore?.Set("activeChecklistItemCount", value); }
        }
        /// <summary>The categories to which the task is applied. See plannerAppliedCategories resource type for possible values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PlannerAppliedCategories? AppliedCategories
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerAppliedCategories?>("appliedCategories"); }
            set { BackingStore?.Set("appliedCategories", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PlannerAppliedCategories AppliedCategories
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerAppliedCategories>("appliedCategories"); }
            set { BackingStore?.Set("appliedCategories", value); }
        }
#endif
        /// <summary>The archivalInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PlannerArchivalInfo? ArchivalInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerArchivalInfo?>("archivalInfo"); }
            set { BackingStore?.Set("archivalInfo", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PlannerArchivalInfo ArchivalInfo
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerArchivalInfo>("archivalInfo"); }
            set { BackingStore?.Set("archivalInfo", value); }
        }
#endif
        /// <summary>Read-only. Nullable. Used to render the task correctly in the task board view when grouped by assignedTo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PlannerAssignedToTaskBoardTaskFormat? AssignedToTaskBoardFormat
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerAssignedToTaskBoardTaskFormat?>("assignedToTaskBoardFormat"); }
            set { BackingStore?.Set("assignedToTaskBoardFormat", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PlannerAssignedToTaskBoardTaskFormat AssignedToTaskBoardFormat
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerAssignedToTaskBoardTaskFormat>("assignedToTaskBoardFormat"); }
            set { BackingStore?.Set("assignedToTaskBoardFormat", value); }
        }
#endif
        /// <summary>A hint that is used to order items of this type in a list view. For more information, see Using order hints in Planner.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssigneePriority
        {
            get { return BackingStore?.Get<string?>("assigneePriority"); }
            set { BackingStore?.Set("assigneePriority", value); }
        }
#nullable restore
#else
        public string AssigneePriority
        {
            get { return BackingStore?.Get<string>("assigneePriority"); }
            set { BackingStore?.Set("assigneePriority", value); }
        }
#endif
        /// <summary>The set of assignees the task is assigned to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PlannerAssignments? Assignments
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerAssignments?>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PlannerAssignments Assignments
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerAssignments>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#endif
        /// <summary>Bucket ID to which the task belongs. The bucket needs to be in the same plan as the task. The value of the bucketId property is 28 characters long and case-sensitive. Format validation is done on the service.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BucketId
        {
            get { return BackingStore?.Get<string?>("bucketId"); }
            set { BackingStore?.Set("bucketId", value); }
        }
#nullable restore
#else
        public string BucketId
        {
            get { return BackingStore?.Get<string>("bucketId"); }
            set { BackingStore?.Set("bucketId", value); }
        }
#endif
        /// <summary>Read-only. Nullable. Used to render the task correctly in the task board view when grouped by bucket.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PlannerBucketTaskBoardTaskFormat? BucketTaskBoardFormat
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerBucketTaskBoardTaskFormat?>("bucketTaskBoardFormat"); }
            set { BackingStore?.Set("bucketTaskBoardFormat", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PlannerBucketTaskBoardTaskFormat BucketTaskBoardFormat
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerBucketTaskBoardTaskFormat>("bucketTaskBoardFormat"); }
            set { BackingStore?.Set("bucketTaskBoardFormat", value); }
        }
#endif
        /// <summary>The number of checklist items that are present on the task.</summary>
        public int? ChecklistItemCount
        {
            get { return BackingStore?.Get<int?>("checklistItemCount"); }
            set { BackingStore?.Set("checklistItemCount", value); }
        }
        /// <summary>The identity of the user that completed the task.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.IdentitySet? CompletedBy
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentitySet?>("completedBy"); }
            set { BackingStore?.Set("completedBy", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.IdentitySet CompletedBy
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentitySet>("completedBy"); }
            set { BackingStore?.Set("completedBy", value); }
        }
#endif
        /// <summary>Read-only. The date and time at which the &apos;percentComplete&apos; of the task is set to &apos;100&apos;. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? CompletedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("completedDateTime"); }
            set { BackingStore?.Set("completedDateTime", value); }
        }
        /// <summary>The thread ID of the conversation on the task. This is the ID of the conversation thread object created in the group.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConversationThreadId
        {
            get { return BackingStore?.Get<string?>("conversationThreadId"); }
            set { BackingStore?.Set("conversationThreadId", value); }
        }
#nullable restore
#else
        public string ConversationThreadId
        {
            get { return BackingStore?.Get<string>("conversationThreadId"); }
            set { BackingStore?.Set("conversationThreadId", value); }
        }
#endif
        /// <summary>The identity of the user who created the task.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.IdentitySet? CreatedBy
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentitySet?>("createdBy"); }
            set { BackingStore?.Set("createdBy", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.IdentitySet CreatedBy
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.IdentitySet>("createdBy"); }
            set { BackingStore?.Set("createdBy", value); }
        }
#endif
        /// <summary>Read-only. The date and time at which the task is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Information about the origin of the task.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PlannerTaskCreation? CreationSource
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerTaskCreation?>("creationSource"); }
            set { BackingStore?.Set("creationSource", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PlannerTaskCreation CreationSource
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerTaskCreation>("creationSource"); }
            set { BackingStore?.Set("creationSource", value); }
        }
#endif
        /// <summary>Read-only. Nullable. More details about the task.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PlannerTaskDetails? Details
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerTaskDetails?>("details"); }
            set { BackingStore?.Set("details", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PlannerTaskDetails Details
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerTaskDetails>("details"); }
            set { BackingStore?.Set("details", value); }
        }
#endif
        /// <summary>The date and time at which the task is due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? DueDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("dueDateTime"); }
            set { BackingStore?.Set("dueDateTime", value); }
        }
        /// <summary>Read-only. This value is true if the details object of the task has a nonempty description. Otherwise,false.</summary>
        public bool? HasDescription
        {
            get { return BackingStore?.Get<bool?>("hasDescription"); }
            set { BackingStore?.Set("hasDescription", value); }
        }
        /// <summary>The isArchived property</summary>
        public bool? IsArchived
        {
            get { return BackingStore?.Get<bool?>("isArchived"); }
            set { BackingStore?.Set("isArchived", value); }
        }
        /// <summary>A Boolean value that indicates whether to show this task in the MyDay view. true to show the task. Otherwise, false.</summary>
        public bool? IsOnMyDay
        {
            get { return BackingStore?.Get<bool?>("isOnMyDay"); }
            set { BackingStore?.Set("isOnMyDay", value); }
        }
        /// <summary>Read-only. The date on which task is added to or removed from MyDay.</summary>
        public Date? IsOnMyDayLastModifiedDate
        {
            get { return BackingStore?.Get<Date?>("isOnMyDayLastModifiedDate"); }
            set { BackingStore?.Set("isOnMyDayLastModifiedDate", value); }
        }
        /// <summary>The hint used to order items of this type in a list view. For more information, see Using order hints in Plannern.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderHint
        {
            get { return BackingStore?.Get<string?>("orderHint"); }
            set { BackingStore?.Set("orderHint", value); }
        }
#nullable restore
#else
        public string OrderHint
        {
            get { return BackingStore?.Get<string>("orderHint"); }
            set { BackingStore?.Set("orderHint", value); }
        }
#endif
        /// <summary>The percentage of task completion. When set to 100, the task is completed.</summary>
        public int? PercentComplete
        {
            get { return BackingStore?.Get<int?>("percentComplete"); }
            set { BackingStore?.Set("percentComplete", value); }
        }
        /// <summary>Plan ID to which the task belongs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlanId
        {
            get { return BackingStore?.Get<string?>("planId"); }
            set { BackingStore?.Set("planId", value); }
        }
#nullable restore
#else
        public string PlanId
        {
            get { return BackingStore?.Get<string>("planId"); }
            set { BackingStore?.Set("planId", value); }
        }
#endif
        /// <summary>The type of preview that shows up on the task. Possible values are: automatic, noPreview, checklist, description, reference.</summary>
        public Microsoft.Graph.Beta.Models.PlannerPreviewType? PreviewType
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerPreviewType?>("previewType"); }
            set { BackingStore?.Set("previewType", value); }
        }
        /// <summary>The priority of the task. Valid values are between 0 and 10, inclusive. Larger values indicate lower priority. For example, 0 has the highest priority and 10 has the lowest priority. Currently, Planner interprets values 0 and 1 as &apos;urgent&apos;, 2 and 3 and 4 as &apos;important&apos;, 5, 6, and 7 as &apos;medium&apos;, and 8, 9, and 10 as &apos;low&apos;. Currently, Planner sets the value 1 for &apos;urgent&apos;, 3 for &apos;important&apos;, 5 for &apos;medium&apos;, and 9 for &apos;low&apos;.</summary>
        public int? Priority
        {
            get { return BackingStore?.Get<int?>("priority"); }
            set { BackingStore?.Set("priority", value); }
        }
        /// <summary>Read-only. Nullable. Used to render the task correctly in the task board view when grouped by progress.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PlannerProgressTaskBoardTaskFormat? ProgressTaskBoardFormat
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerProgressTaskBoardTaskFormat?>("progressTaskBoardFormat"); }
            set { BackingStore?.Set("progressTaskBoardFormat", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PlannerProgressTaskBoardTaskFormat ProgressTaskBoardFormat
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerProgressTaskBoardTaskFormat>("progressTaskBoardFormat"); }
            set { BackingStore?.Set("progressTaskBoardFormat", value); }
        }
#endif
        /// <summary>Defines active or inactive recurrence for the task. null when the recurrence has never been defined for the task.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Beta.Models.PlannerTaskRecurrence? Recurrence
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerTaskRecurrence?>("recurrence"); }
            set { BackingStore?.Set("recurrence", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Beta.Models.PlannerTaskRecurrence Recurrence
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerTaskRecurrence>("recurrence"); }
            set { BackingStore?.Set("recurrence", value); }
        }
#endif
        /// <summary>Number of external references that exist on the task.</summary>
        public int? ReferenceCount
        {
            get { return BackingStore?.Get<int?>("referenceCount"); }
            set { BackingStore?.Set("referenceCount", value); }
        }
        /// <summary>Indicates all the requirements specified on the plannerTask. Possible values are: none, checklistCompletion, unknownFutureValue, formCompletion, approvalCompletion. Read-only. You must use the Prefer: include-unknown-enum-members request header to get the following values in this evolvable enum: formCompletion, approvalCompletion. The plannerTaskCompletionRequirementDetails in plannerTaskDetails has details of the requirements specified, if any.</summary>
        public Microsoft.Graph.Beta.Models.PlannerTaskCompletionRequirements? SpecifiedCompletionRequirements
        {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.PlannerTaskCompletionRequirements?>("specifiedCompletionRequirements"); }
            set { BackingStore?.Set("specifiedCompletionRequirements", value); }
        }
        /// <summary>Date and time at which the task starts. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? StartDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("startDateTime"); }
            set { BackingStore?.Set("startDateTime", value); }
        }
        /// <summary>Title of the task.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title
        {
            get { return BackingStore?.Get<string?>("title"); }
            set { BackingStore?.Set("title", value); }
        }
#nullable restore
#else
        public string Title
        {
            get { return BackingStore?.Get<string>("title"); }
            set { BackingStore?.Set("title", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.PlannerTask"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Beta.Models.PlannerTask CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.businessScenarioTask" => new Microsoft.Graph.Beta.Models.BusinessScenarioTask(),
                _ => new Microsoft.Graph.Beta.Models.PlannerTask(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "activeChecklistItemCount", n => { ActiveChecklistItemCount = n.GetIntValue(); } },
                { "appliedCategories", n => { AppliedCategories = n.GetObjectValue<Microsoft.Graph.Beta.Models.PlannerAppliedCategories>(Microsoft.Graph.Beta.Models.PlannerAppliedCategories.CreateFromDiscriminatorValue); } },
                { "archivalInfo", n => { ArchivalInfo = n.GetObjectValue<Microsoft.Graph.Beta.Models.PlannerArchivalInfo>(Microsoft.Graph.Beta.Models.PlannerArchivalInfo.CreateFromDiscriminatorValue); } },
                { "assignedToTaskBoardFormat", n => { AssignedToTaskBoardFormat = n.GetObjectValue<Microsoft.Graph.Beta.Models.PlannerAssignedToTaskBoardTaskFormat>(Microsoft.Graph.Beta.Models.PlannerAssignedToTaskBoardTaskFormat.CreateFromDiscriminatorValue); } },
                { "assigneePriority", n => { AssigneePriority = n.GetStringValue(); } },
                { "assignments", n => { Assignments = n.GetObjectValue<Microsoft.Graph.Beta.Models.PlannerAssignments>(Microsoft.Graph.Beta.Models.PlannerAssignments.CreateFromDiscriminatorValue); } },
                { "bucketId", n => { BucketId = n.GetStringValue(); } },
                { "bucketTaskBoardFormat", n => { BucketTaskBoardFormat = n.GetObjectValue<Microsoft.Graph.Beta.Models.PlannerBucketTaskBoardTaskFormat>(Microsoft.Graph.Beta.Models.PlannerBucketTaskBoardTaskFormat.CreateFromDiscriminatorValue); } },
                { "checklistItemCount", n => { ChecklistItemCount = n.GetIntValue(); } },
                { "completedBy", n => { CompletedBy = n.GetObjectValue<Microsoft.Graph.Beta.Models.IdentitySet>(Microsoft.Graph.Beta.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "completedDateTime", n => { CompletedDateTime = n.GetDateTimeOffsetValue(); } },
                { "conversationThreadId", n => { ConversationThreadId = n.GetStringValue(); } },
                { "createdBy", n => { CreatedBy = n.GetObjectValue<Microsoft.Graph.Beta.Models.IdentitySet>(Microsoft.Graph.Beta.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "creationSource", n => { CreationSource = n.GetObjectValue<Microsoft.Graph.Beta.Models.PlannerTaskCreation>(Microsoft.Graph.Beta.Models.PlannerTaskCreation.CreateFromDiscriminatorValue); } },
                { "details", n => { Details = n.GetObjectValue<Microsoft.Graph.Beta.Models.PlannerTaskDetails>(Microsoft.Graph.Beta.Models.PlannerTaskDetails.CreateFromDiscriminatorValue); } },
                { "dueDateTime", n => { DueDateTime = n.GetDateTimeOffsetValue(); } },
                { "hasDescription", n => { HasDescription = n.GetBoolValue(); } },
                { "isArchived", n => { IsArchived = n.GetBoolValue(); } },
                { "isOnMyDay", n => { IsOnMyDay = n.GetBoolValue(); } },
                { "isOnMyDayLastModifiedDate", n => { IsOnMyDayLastModifiedDate = n.GetDateValue(); } },
                { "orderHint", n => { OrderHint = n.GetStringValue(); } },
                { "percentComplete", n => { PercentComplete = n.GetIntValue(); } },
                { "planId", n => { PlanId = n.GetStringValue(); } },
                { "previewType", n => { PreviewType = n.GetEnumValue<Microsoft.Graph.Beta.Models.PlannerPreviewType>(); } },
                { "priority", n => { Priority = n.GetIntValue(); } },
                { "progressTaskBoardFormat", n => { ProgressTaskBoardFormat = n.GetObjectValue<Microsoft.Graph.Beta.Models.PlannerProgressTaskBoardTaskFormat>(Microsoft.Graph.Beta.Models.PlannerProgressTaskBoardTaskFormat.CreateFromDiscriminatorValue); } },
                { "recurrence", n => { Recurrence = n.GetObjectValue<Microsoft.Graph.Beta.Models.PlannerTaskRecurrence>(Microsoft.Graph.Beta.Models.PlannerTaskRecurrence.CreateFromDiscriminatorValue); } },
                { "referenceCount", n => { ReferenceCount = n.GetIntValue(); } },
                { "specifiedCompletionRequirements", n => { SpecifiedCompletionRequirements = n.GetEnumValue<Microsoft.Graph.Beta.Models.PlannerTaskCompletionRequirements>(); } },
                { "startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("activeChecklistItemCount", ActiveChecklistItemCount);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PlannerAppliedCategories>("appliedCategories", AppliedCategories);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PlannerArchivalInfo>("archivalInfo", ArchivalInfo);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PlannerAssignedToTaskBoardTaskFormat>("assignedToTaskBoardFormat", AssignedToTaskBoardFormat);
            writer.WriteStringValue("assigneePriority", AssigneePriority);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PlannerAssignments>("assignments", Assignments);
            writer.WriteStringValue("bucketId", BucketId);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PlannerBucketTaskBoardTaskFormat>("bucketTaskBoardFormat", BucketTaskBoardFormat);
            writer.WriteIntValue("checklistItemCount", ChecklistItemCount);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.IdentitySet>("completedBy", CompletedBy);
            writer.WriteDateTimeOffsetValue("completedDateTime", CompletedDateTime);
            writer.WriteStringValue("conversationThreadId", ConversationThreadId);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.IdentitySet>("createdBy", CreatedBy);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PlannerTaskCreation>("creationSource", CreationSource);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PlannerTaskDetails>("details", Details);
            writer.WriteDateTimeOffsetValue("dueDateTime", DueDateTime);
            writer.WriteBoolValue("hasDescription", HasDescription);
            writer.WriteBoolValue("isArchived", IsArchived);
            writer.WriteBoolValue("isOnMyDay", IsOnMyDay);
            writer.WriteDateValue("isOnMyDayLastModifiedDate", IsOnMyDayLastModifiedDate);
            writer.WriteStringValue("orderHint", OrderHint);
            writer.WriteIntValue("percentComplete", PercentComplete);
            writer.WriteStringValue("planId", PlanId);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.PlannerPreviewType>("previewType", PreviewType);
            writer.WriteIntValue("priority", Priority);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PlannerProgressTaskBoardTaskFormat>("progressTaskBoardFormat", ProgressTaskBoardFormat);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.PlannerTaskRecurrence>("recurrence", Recurrence);
            writer.WriteIntValue("referenceCount", ReferenceCount);
            writer.WriteEnumValue<Microsoft.Graph.Beta.Models.PlannerTaskCompletionRequirements>("specifiedCompletionRequirements", SpecifiedCompletionRequirements);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteStringValue("title", Title);
        }
    }
}
