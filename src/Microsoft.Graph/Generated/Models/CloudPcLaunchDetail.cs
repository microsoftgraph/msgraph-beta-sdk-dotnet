// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CloudPcLaunchDetail : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The unique identifier of the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloudPcId
        {
            get { return BackingStore?.Get<string?>("cloudPcId"); }
            set { BackingStore?.Set("cloudPcId", value); }
        }
#nullable restore
#else
        public string CloudPcId
        {
            get { return BackingStore?.Get<string>("cloudPcId"); }
            set { BackingStore?.Set("cloudPcId", value); }
        }
#endif
        /// <summary>The connect URL of the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloudPcLaunchUrl
        {
            get { return BackingStore?.Get<string?>("cloudPcLaunchUrl"); }
            set { BackingStore?.Set("cloudPcLaunchUrl", value); }
        }
#nullable restore
#else
        public string CloudPcLaunchUrl
        {
            get { return BackingStore?.Get<string>("cloudPcLaunchUrl"); }
            set { BackingStore?.Set("cloudPcLaunchUrl", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>Indicates the reason the Cloud PC isn&apos;t compatible with Windows 365 Switch. Possible values are: osVersionNotSupported, hardwareNotSupported, unknownFutureValue. osVersionNotSupported indicates that the user needs to update their Cloud PC operating system version. hardwareNotSupported indicates that the Cloud PC needs more CPUs or RAM to support the functionality.</summary>
        public global::Microsoft.Graph.Beta.Models.Windows365SwitchCompatibilityFailureReasonType? Windows365SwitchCompatibilityFailureReasonType
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Beta.Models.Windows365SwitchCompatibilityFailureReasonType?>("windows365SwitchCompatibilityFailureReasonType"); }
            set { BackingStore?.Set("windows365SwitchCompatibilityFailureReasonType", value); }
        }
        /// <summary>Indicates whether the Cloud PC supports switch functionality. If the value is true, it supports switch functionality; otherwise, false.</summary>
        public bool? Windows365SwitchCompatible
        {
            get { return BackingStore?.Get<bool?>("windows365SwitchCompatible"); }
            set { BackingStore?.Set("windows365SwitchCompatible", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.Models.CloudPcLaunchDetail"/> and sets the default values.
        /// </summary>
        public CloudPcLaunchDetail()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.CloudPcLaunchDetail"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Beta.Models.CloudPcLaunchDetail CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Beta.Models.CloudPcLaunchDetail();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cloudPcId", n => { CloudPcId = n.GetStringValue(); } },
                { "cloudPcLaunchUrl", n => { CloudPcLaunchUrl = n.GetStringValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "windows365SwitchCompatibilityFailureReasonType", n => { Windows365SwitchCompatibilityFailureReasonType = n.GetEnumValue<global::Microsoft.Graph.Beta.Models.Windows365SwitchCompatibilityFailureReasonType>(); } },
                { "windows365SwitchCompatible", n => { Windows365SwitchCompatible = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("cloudPcId", CloudPcId);
            writer.WriteStringValue("cloudPcLaunchUrl", CloudPcLaunchUrl);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteEnumValue<global::Microsoft.Graph.Beta.Models.Windows365SwitchCompatibilityFailureReasonType>("windows365SwitchCompatibilityFailureReasonType", Windows365SwitchCompatibilityFailureReasonType);
            writer.WriteBoolValue("windows365SwitchCompatible", Windows365SwitchCompatible);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
