// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Graph.Beta.External.IndustryData.DataConnectors;
using Microsoft.Graph.Beta.External.IndustryData.InboundFlows;
using Microsoft.Graph.Beta.External.IndustryData.Operations;
using Microsoft.Graph.Beta.External.IndustryData.OutboundProvisioningFlowSets;
using Microsoft.Graph.Beta.External.IndustryData.ReferenceDefinitions;
using Microsoft.Graph.Beta.External.IndustryData.RoleGroups;
using Microsoft.Graph.Beta.External.IndustryData.Runs;
using Microsoft.Graph.Beta.External.IndustryData.SourceSystems;
using Microsoft.Graph.Beta.External.IndustryData.Years;
using Microsoft.Graph.Beta.Models.IndustryData;
using Microsoft.Graph.Beta.Models.ODataErrors;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Microsoft.Graph.Beta.External.IndustryData
{
    /// <summary>
    /// Provides operations to manage the industryData property of the microsoft.graph.externalConnectors.external entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IndustryDataRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Provides operations to manage the dataConnectors property of the microsoft.graph.industryData.industryDataRoot entity.</summary>
        public global::Microsoft.Graph.Beta.External.IndustryData.DataConnectors.DataConnectorsRequestBuilder DataConnectors
        {
            get => new global::Microsoft.Graph.Beta.External.IndustryData.DataConnectors.DataConnectorsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the inboundFlows property of the microsoft.graph.industryData.industryDataRoot entity.</summary>
        public global::Microsoft.Graph.Beta.External.IndustryData.InboundFlows.InboundFlowsRequestBuilder InboundFlows
        {
            get => new global::Microsoft.Graph.Beta.External.IndustryData.InboundFlows.InboundFlowsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the operations property of the microsoft.graph.industryData.industryDataRoot entity.</summary>
        public global::Microsoft.Graph.Beta.External.IndustryData.Operations.OperationsRequestBuilder Operations
        {
            get => new global::Microsoft.Graph.Beta.External.IndustryData.Operations.OperationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the outboundProvisioningFlowSets property of the microsoft.graph.industryData.industryDataRoot entity.</summary>
        public global::Microsoft.Graph.Beta.External.IndustryData.OutboundProvisioningFlowSets.OutboundProvisioningFlowSetsRequestBuilder OutboundProvisioningFlowSets
        {
            get => new global::Microsoft.Graph.Beta.External.IndustryData.OutboundProvisioningFlowSets.OutboundProvisioningFlowSetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the referenceDefinitions property of the microsoft.graph.industryData.industryDataRoot entity.</summary>
        public global::Microsoft.Graph.Beta.External.IndustryData.ReferenceDefinitions.ReferenceDefinitionsRequestBuilder ReferenceDefinitions
        {
            get => new global::Microsoft.Graph.Beta.External.IndustryData.ReferenceDefinitions.ReferenceDefinitionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the roleGroups property of the microsoft.graph.industryData.industryDataRoot entity.</summary>
        public global::Microsoft.Graph.Beta.External.IndustryData.RoleGroups.RoleGroupsRequestBuilder RoleGroups
        {
            get => new global::Microsoft.Graph.Beta.External.IndustryData.RoleGroups.RoleGroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the runs property of the microsoft.graph.industryData.industryDataRoot entity.</summary>
        public global::Microsoft.Graph.Beta.External.IndustryData.Runs.RunsRequestBuilder Runs
        {
            get => new global::Microsoft.Graph.Beta.External.IndustryData.Runs.RunsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the sourceSystems property of the microsoft.graph.industryData.industryDataRoot entity.</summary>
        public global::Microsoft.Graph.Beta.External.IndustryData.SourceSystems.SourceSystemsRequestBuilder SourceSystems
        {
            get => new global::Microsoft.Graph.Beta.External.IndustryData.SourceSystems.SourceSystemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the years property of the microsoft.graph.industryData.industryDataRoot entity.</summary>
        public global::Microsoft.Graph.Beta.External.IndustryData.Years.YearsRequestBuilder Years
        {
            get => new global::Microsoft.Graph.Beta.External.IndustryData.Years.YearsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IndustryDataRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/external/industryData{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IndustryDataRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/external/industryData{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Get industryData from external
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRoot"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRoot?> GetAsync(Action<RequestConfiguration<global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder.IndustryDataRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRoot> GetAsync(Action<RequestConfiguration<global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder.IndustryDataRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRoot>(requestInfo, global::Microsoft.Graph.Beta.Models.IndustryData.IndustryDataRoot.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get industryData from external
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder.IndustryDataRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder.IndustryDataRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get industryData from external
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IndustryDataRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IndustryDataRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Microsoft.Graph.Beta.External.IndustryData.IndustryDataRequestBuilder.IndustryDataRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
