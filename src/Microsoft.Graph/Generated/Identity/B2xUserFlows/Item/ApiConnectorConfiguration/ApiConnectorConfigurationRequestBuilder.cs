// <auto-generated/>
using Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostAttributeCollection;
using Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostFederationSignup;
using Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PreTokenIssuance;
using Microsoft.Graph.Beta.Models.ODataErrors;
using Microsoft.Graph.Beta.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration
{
    /// <summary>
    /// Builds and executes requests for operations under \identity\b2xUserFlows\{b2xIdentityUserFlow-id}\apiConnectorConfiguration
    /// </summary>
    public class ApiConnectorConfigurationRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Provides operations to manage the postAttributeCollection property of the microsoft.graph.userFlowApiConnectorConfiguration entity.</summary>
        public Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostAttributeCollection.PostAttributeCollectionRequestBuilder PostAttributeCollection
        {
            get => new Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostAttributeCollection.PostAttributeCollectionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the postFederationSignup property of the microsoft.graph.userFlowApiConnectorConfiguration entity.</summary>
        public Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostFederationSignup.PostFederationSignupRequestBuilder PostFederationSignup
        {
            get => new Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostFederationSignup.PostFederationSignupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the preTokenIssuance property of the microsoft.graph.userFlowApiConnectorConfiguration entity.</summary>
        public Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PreTokenIssuance.PreTokenIssuanceRequestBuilder PreTokenIssuance
        {
            get => new Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PreTokenIssuance.PreTokenIssuanceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiConnectorConfigurationRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/identity/b2xUserFlows/{b2xIdentityUserFlow%2Did}/apiConnectorConfiguration{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiConnectorConfigurationRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/identity/b2xUserFlows/{b2xIdentityUserFlow%2Did}/apiConnectorConfiguration{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Get the apiConnectorConfiguration property in a b2xIdentityUserFlow to detail the API connectors enabled for the user flow.
        /// Find more info here <see href="https://learn.microsoft.com/graph/api/b2xidentityuserflow-get-apiconnectorconfiguration?view=graph-rest-beta" />
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Models.UserFlowApiConnectorConfiguration"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Microsoft.Graph.Beta.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Microsoft.Graph.Beta.Models.UserFlowApiConnectorConfiguration?> GetAsync(Action<RequestConfiguration<Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder.ApiConnectorConfigurationRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Microsoft.Graph.Beta.Models.UserFlowApiConnectorConfiguration> GetAsync(Action<RequestConfiguration<Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder.ApiConnectorConfigurationRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", Microsoft.Graph.Beta.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<Microsoft.Graph.Beta.Models.UserFlowApiConnectorConfiguration>(requestInfo, Microsoft.Graph.Beta.Models.UserFlowApiConnectorConfiguration.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the apiConnectorConfiguration property in a b2xIdentityUserFlow to detail the API connectors enabled for the user flow.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder.ApiConnectorConfigurationRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder.ApiConnectorConfigurationRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder WithUrl(string rawUrl)
        {
            return new Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get the apiConnectorConfiguration property in a b2xIdentityUserFlow to detail the API connectors enabled for the user flow.
        /// </summary>
        public class ApiConnectorConfigurationRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class ApiConnectorConfigurationRequestBuilderGetRequestConfiguration : RequestConfiguration<Microsoft.Graph.Beta.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.ApiConnectorConfigurationRequestBuilder.ApiConnectorConfigurationRequestBuilderGetQueryParameters>
        {
        }
    }
}
