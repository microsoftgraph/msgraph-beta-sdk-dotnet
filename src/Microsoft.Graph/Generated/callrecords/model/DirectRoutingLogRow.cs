// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph.CallRecords
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type DirectRoutingLogRow.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(Microsoft.Graph.DerivedTypeConverter))]
    public partial class DirectRoutingLogRow
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectRoutingLogRow"/> class.
        /// </summary>
        public DirectRoutingLogRow()
        {
            this.ODataType = "microsoft.graph.callRecords.directRoutingLogRow";
        }

        /// <summary>
        /// Gets or sets calleeNumber.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "calleeNumber", Required = Newtonsoft.Json.Required.Default)]
        public string CalleeNumber { get; set; }
    
        /// <summary>
        /// Gets or sets callEndSubReason.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "callEndSubReason", Required = Newtonsoft.Json.Required.Default)]
        public Int32? CallEndSubReason { get; set; }
    
        /// <summary>
        /// Gets or sets callerNumber.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "callerNumber", Required = Newtonsoft.Json.Required.Default)]
        public string CallerNumber { get; set; }
    
        /// <summary>
        /// Gets or sets callType.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "callType", Required = Newtonsoft.Json.Required.Default)]
        public string CallType { get; set; }
    
        /// <summary>
        /// Gets or sets correlationId.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "correlationId", Required = Newtonsoft.Json.Required.Default)]
        public string CorrelationId { get; set; }
    
        /// <summary>
        /// Gets or sets duration.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "duration", Required = Newtonsoft.Json.Required.Default)]
        public Int32? Duration { get; set; }
    
        /// <summary>
        /// Gets or sets endDateTime.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "endDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? EndDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets failureDateTime.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "failureDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? FailureDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets finalSipCode.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "finalSipCode", Required = Newtonsoft.Json.Required.Default)]
        public Int32? FinalSipCode { get; set; }
    
        /// <summary>
        /// Gets or sets finalSipCodePhrase.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "finalSipCodePhrase", Required = Newtonsoft.Json.Required.Default)]
        public string FinalSipCodePhrase { get; set; }
    
        /// <summary>
        /// Gets or sets id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "id", Required = Newtonsoft.Json.Required.Default)]
        public string Id { get; set; }
    
        /// <summary>
        /// Gets or sets inviteDateTime.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "inviteDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? InviteDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets mediaBypassEnabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaBypassEnabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? MediaBypassEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets mediaPathLocation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaPathLocation", Required = Newtonsoft.Json.Required.Default)]
        public string MediaPathLocation { get; set; }
    
        /// <summary>
        /// Gets or sets signalingLocation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "signalingLocation", Required = Newtonsoft.Json.Required.Default)]
        public string SignalingLocation { get; set; }
    
        /// <summary>
        /// Gets or sets startDateTime.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? StartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets successfulCall.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "successfulCall", Required = Newtonsoft.Json.Required.Default)]
        public bool? SuccessfulCall { get; set; }
    
        /// <summary>
        /// Gets or sets trunkFullyQualifiedDomainName.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "trunkFullyQualifiedDomainName", Required = Newtonsoft.Json.Required.Default)]
        public string TrunkFullyQualifiedDomainName { get; set; }
    
        /// <summary>
        /// Gets or sets userDisplayName.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "userDisplayName", Required = Newtonsoft.Json.Required.Default)]
        public string UserDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets userId.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "userId", Required = Newtonsoft.Json.Required.Default)]
        public string UserId { get; set; }
    
        /// <summary>
        /// Gets or sets userPrincipalName.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "userPrincipalName", Required = Newtonsoft.Json.Required.Default)]
        public string UserPrincipalName { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
