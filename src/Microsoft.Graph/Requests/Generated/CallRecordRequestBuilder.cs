// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Requests\MethodRequestBuilder.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type CallRecordRequestBuilder.
    /// </summary>
    public partial class CallRecordRequestBuilder : BaseActionMethodRequestBuilder<ICallRecordRequest>, ICallRecordRequestBuilder
    {
        /// <summary>
        /// Constructs a new <see cref="CallRecordRequestBuilder"/>.
        /// </summary>
        /// <param name="requestUrl">The URL for the request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="prompts">A prompts parameter for the OData method call.</param>
        /// <param name="bargeInAllowed">A bargeInAllowed parameter for the OData method call.</param>
        /// <param name="initialSilenceTimeoutInSeconds">A initialSilenceTimeoutInSeconds parameter for the OData method call.</param>
        /// <param name="maxSilenceTimeoutInSeconds">A maxSilenceTimeoutInSeconds parameter for the OData method call.</param>
        /// <param name="maxRecordDurationInSeconds">A maxRecordDurationInSeconds parameter for the OData method call.</param>
        /// <param name="playBeep">A playBeep parameter for the OData method call.</param>
        /// <param name="streamWhileRecording">A streamWhileRecording parameter for the OData method call.</param>
        /// <param name="stopTones">A stopTones parameter for the OData method call.</param>
        /// <param name="clientContext">A clientContext parameter for the OData method call.</param>
        public CallRecordRequestBuilder(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Prompt> prompts,
            bool? bargeInAllowed,
            Int32? initialSilenceTimeoutInSeconds,
            Int32? maxSilenceTimeoutInSeconds,
            Int32? maxRecordDurationInSeconds,
            bool? playBeep,
            bool? streamWhileRecording,
            IEnumerable<string> stopTones,
            string clientContext)
            : base(requestUrl, client)
        {
            this.SetParameter("prompts", prompts, true);
            this.SetParameter("bargeInAllowed", bargeInAllowed, true);
            this.SetParameter("initialSilenceTimeoutInSeconds", initialSilenceTimeoutInSeconds, true);
            this.SetParameter("maxSilenceTimeoutInSeconds", maxSilenceTimeoutInSeconds, true);
            this.SetParameter("maxRecordDurationInSeconds", maxRecordDurationInSeconds, true);
            this.SetParameter("playBeep", playBeep, true);
            this.SetParameter("streamWhileRecording", streamWhileRecording, true);
            this.SetParameter("stopTones", stopTones, true);
            this.SetParameter("clientContext", clientContext, true);
        }

        /// <summary>
        /// A method used by the base class to construct a request class instance.
        /// </summary>
        /// <param name="functionUrl">The request URL to </param>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>An instance of a specific request class.</returns>
        protected override ICallRecordRequest CreateRequest(string functionUrl, IEnumerable<Option> options)
        {
            var request = new CallRecordRequest(functionUrl, this.Client, options);

            if (this.HasParameter("prompts"))
            {
                request.RequestBody.Prompts = this.GetParameter<IEnumerable<Prompt>>("prompts");
            }

            if (this.HasParameter("bargeInAllowed"))
            {
                request.RequestBody.BargeInAllowed = this.GetParameter<bool?>("bargeInAllowed");
            }

            if (this.HasParameter("initialSilenceTimeoutInSeconds"))
            {
                request.RequestBody.InitialSilenceTimeoutInSeconds = this.GetParameter<Int32?>("initialSilenceTimeoutInSeconds");
            }

            if (this.HasParameter("maxSilenceTimeoutInSeconds"))
            {
                request.RequestBody.MaxSilenceTimeoutInSeconds = this.GetParameter<Int32?>("maxSilenceTimeoutInSeconds");
            }

            if (this.HasParameter("maxRecordDurationInSeconds"))
            {
                request.RequestBody.MaxRecordDurationInSeconds = this.GetParameter<Int32?>("maxRecordDurationInSeconds");
            }

            if (this.HasParameter("playBeep"))
            {
                request.RequestBody.PlayBeep = this.GetParameter<bool?>("playBeep");
            }

            if (this.HasParameter("streamWhileRecording"))
            {
                request.RequestBody.StreamWhileRecording = this.GetParameter<bool?>("streamWhileRecording");
            }

            if (this.HasParameter("stopTones"))
            {
                request.RequestBody.StopTones = this.GetParameter<IEnumerable<string>>("stopTones");
            }

            if (this.HasParameter("clientContext"))
            {
                request.RequestBody.ClientContext = this.GetParameter<string>("clientContext");
            }

            return request;
        }
    }
}
