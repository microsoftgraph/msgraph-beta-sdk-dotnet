// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Requests\EntityRequestBuilder.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type SynchronizationSchemaRequestBuilder.
    /// </summary>
    public partial class SynchronizationSchemaRequestBuilder : EntityRequestBuilder, ISynchronizationSchemaRequestBuilder
    {

        /// <summary>
        /// Constructs a new SynchronizationSchemaRequestBuilder.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        public SynchronizationSchemaRequestBuilder(
            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public new ISynchronizationSchemaRequest Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public new ISynchronizationSchemaRequest Request(IEnumerable<Option> options)
        {
            return new SynchronizationSchemaRequest(this.RequestUrl, this.Client, options);
        }
    
        /// <summary>
        /// Gets the request builder for Directories.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationSchemaDirectoriesCollectionRequestBuilder"/>.</returns>
        public ISynchronizationSchemaDirectoriesCollectionRequestBuilder Directories
        {
            get
            {
                return new SynchronizationSchemaDirectoriesCollectionRequestBuilder(this.AppendSegmentToRequestUrl("directories"), this.Client);
            }
        }
    
        /// <summary>
        /// Gets the request builder for SynchronizationSchemaParseExpression.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationSchemaParseExpressionRequestBuilder"/>.</returns>
        public ISynchronizationSchemaParseExpressionRequestBuilder ParseExpression(
            string expression = null,
            ExpressionInputObject testInputObject = null,
            AttributeDefinition targetAttributeDefinition = null)
        {
            return new SynchronizationSchemaParseExpressionRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.parseExpression"),
                this.Client,
                expression,
                testInputObject,
                targetAttributeDefinition);
        }

        /// <summary>
        /// Gets the request builder for SynchronizationSchemaFunctions.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationSchemaFunctionsRequestBuilder"/>.</returns>
        public ISynchronizationSchemaFunctionsRequestBuilder Functions()
        {
            return new SynchronizationSchemaFunctionsRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.functions"),
                this.Client);
        }

        /// <summary>
        /// Gets the request builder for SynchronizationSchemaFilterOperators.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationSchemaFilterOperatorsRequestBuilder"/>.</returns>
        public ISynchronizationSchemaFilterOperatorsRequestBuilder FilterOperators()
        {
            return new SynchronizationSchemaFilterOperatorsRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.filterOperators"),
                this.Client);
        }
    
    }
}
