// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Requests\EntityCollectionRequestBuilder.cs.tt
namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// The type PrintReportsCollectionRequestBuilder.
    /// </summary>
    public partial class PrintReportsCollectionRequestBuilder : BaseRequestBuilder, IPrintReportsCollectionRequestBuilder
    {
        /// <summary>
        /// Constructs a new PrintReportsCollectionRequestBuilder.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        public PrintReportsCollectionRequestBuilder(
            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public IPrintReportsCollectionRequest Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public IPrintReportsCollectionRequest Request(IEnumerable<Option> options)
        {
            return new PrintReportsCollectionRequest(this.RequestUrl, this.Client, options);
        }

        /// <summary>
        /// Gets an <see cref="IReportRootRequestBuilder"/> for the specified PrintReportRoot.
        /// </summary>
        /// <param name="id">The ID for the PrintReportRoot.</param>
        /// <returns>The <see cref="IReportRootRequestBuilder"/>.</returns>
        public IReportRootRequestBuilder this[string id]
        {
            get
            {
                return new ReportRootRequestBuilder(this.AppendSegmentToRequestUrl(id), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetUserArchivedPrintJobs.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetUserArchivedPrintJobsRequestBuilder"/>.</returns>
        public IReportRootGetUserArchivedPrintJobsRequestBuilder GetUserArchivedPrintJobs(
            string userId = null,
            DateTimeOffset? periodStart = null,
            DateTimeOffset? periodEnd = null)
        {
            return new ReportRootGetUserArchivedPrintJobsRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getUserArchivedPrintJobs"),
                this.Client,
                userId,
                periodStart,
                periodEnd);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetGroupArchivedPrintJobs.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetGroupArchivedPrintJobsRequestBuilder"/>.</returns>
        public IReportRootGetGroupArchivedPrintJobsRequestBuilder GetGroupArchivedPrintJobs(
            string groupId = null,
            DateTimeOffset? periodStart = null,
            DateTimeOffset? periodEnd = null)
        {
            return new ReportRootGetGroupArchivedPrintJobsRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getGroupArchivedPrintJobs"),
                this.Client,
                groupId,
                periodStart,
                periodEnd);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetPrinterArchivedPrintJobs.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetPrinterArchivedPrintJobsRequestBuilder"/>.</returns>
        public IReportRootGetPrinterArchivedPrintJobsRequestBuilder GetPrinterArchivedPrintJobs(
            string printerId = null,
            DateTimeOffset? periodStart = null,
            DateTimeOffset? periodEnd = null)
        {
            return new ReportRootGetPrinterArchivedPrintJobsRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getPrinterArchivedPrintJobs"),
                this.Client,
                printerId,
                periodStart,
                periodEnd);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetUserPrintUsageSummary.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetUserPrintUsageSummaryRequestBuilder"/>.</returns>
        public IReportRootGetUserPrintUsageSummaryRequestBuilder GetUserPrintUsageSummary(
            DateTimeOffset periodStart,
            DateTimeOffset periodEnd,
            string userId = null)
        {
            return new ReportRootGetUserPrintUsageSummaryRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getUserPrintUsageSummary"),
                this.Client,
                periodStart,
                periodEnd,
                userId);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetGroupPrintUsageSummary.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetGroupPrintUsageSummaryRequestBuilder"/>.</returns>
        public IReportRootGetGroupPrintUsageSummaryRequestBuilder GetGroupPrintUsageSummary(
            DateTimeOffset periodStart,
            DateTimeOffset periodEnd,
            string groupId = null)
        {
            return new ReportRootGetGroupPrintUsageSummaryRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getGroupPrintUsageSummary"),
                this.Client,
                periodStart,
                periodEnd,
                groupId);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetPrinterUsageSummary.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetPrinterUsageSummaryRequestBuilder"/>.</returns>
        public IReportRootGetPrinterUsageSummaryRequestBuilder GetPrinterUsageSummary(
            DateTimeOffset periodStart,
            DateTimeOffset periodEnd,
            string printerId = null)
        {
            return new ReportRootGetPrinterUsageSummaryRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getPrinterUsageSummary"),
                this.Client,
                periodStart,
                periodEnd,
                printerId);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetPrintUsageSummariesByUser.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetPrintUsageSummariesByUserRequestBuilder"/>.</returns>
        public IReportRootGetPrintUsageSummariesByUserRequestBuilder GetPrintUsageSummariesByUser(
            DateTimeOffset periodStart,
            DateTimeOffset periodEnd)
        {
            return new ReportRootGetPrintUsageSummariesByUserRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getPrintUsageSummariesByUser"),
                this.Client,
                periodStart,
                periodEnd);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetPrintUsageSummariesByGroup.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetPrintUsageSummariesByGroupRequestBuilder"/>.</returns>
        public IReportRootGetPrintUsageSummariesByGroupRequestBuilder GetPrintUsageSummariesByGroup(
            DateTimeOffset periodStart,
            DateTimeOffset periodEnd)
        {
            return new ReportRootGetPrintUsageSummariesByGroupRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getPrintUsageSummariesByGroup"),
                this.Client,
                periodStart,
                periodEnd);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetPrintUsageSummariesByPrinter.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetPrintUsageSummariesByPrinterRequestBuilder"/>.</returns>
        public IReportRootGetPrintUsageSummariesByPrinterRequestBuilder GetPrintUsageSummariesByPrinter(
            DateTimeOffset periodStart,
            DateTimeOffset periodEnd)
        {
            return new ReportRootGetPrintUsageSummariesByPrinterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getPrintUsageSummariesByPrinter"),
                this.Client,
                periodStart,
                periodEnd);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetOverallPrintUsageSummary.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetOverallPrintUsageSummaryRequestBuilder"/>.</returns>
        public IReportRootGetOverallPrintUsageSummaryRequestBuilder GetOverallPrintUsageSummary(
            DateTimeOffset periodStart,
            DateTimeOffset periodEnd,
            Int32 topListsSize)
        {
            return new ReportRootGetOverallPrintUsageSummaryRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getOverallPrintUsageSummary"),
                this.Client,
                periodStart,
                periodEnd,
                topListsSize);
        }

        /// <summary>
        /// Gets the request builder for ReportRootGetPrintUsageSummariesByTimeSpan.
        /// </summary>
        /// <returns>The <see cref="IReportRootGetPrintUsageSummariesByTimeSpanRequestBuilder"/>.</returns>
        public IReportRootGetPrintUsageSummariesByTimeSpanRequestBuilder GetPrintUsageSummariesByTimeSpan(
            DateTimeOffset periodStart,
            DateTimeOffset periodEnd,
            Int32 timeSpanInMinutes)
        {
            return new ReportRootGetPrintUsageSummariesByTimeSpanRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.getPrintUsageSummariesByTimeSpan"),
                this.Client,
                periodStart,
                periodEnd,
                timeSpanInMinutes);
        }
    }
}
