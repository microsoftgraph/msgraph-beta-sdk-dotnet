// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: Templates\CSharp\Requests\EntityRequestBuilder.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type SynchronizationJobRequestBuilder.
    /// </summary>
    public partial class SynchronizationJobRequestBuilder : EntityRequestBuilder, ISynchronizationJobRequestBuilder
    {

        /// <summary>
        /// Constructs a new SynchronizationJobRequestBuilder.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        public SynchronizationJobRequestBuilder(
            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public new ISynchronizationJobRequest Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public new ISynchronizationJobRequest Request(IEnumerable<Option> options)
        {
            return new SynchronizationJobRequest(this.RequestUrl, this.Client, options);
        }
    
        /// <summary>
        /// Gets the request builder for Schema.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationSchemaRequestBuilder"/>.</returns>
        public ISynchronizationSchemaRequestBuilder Schema
        {
            get
            {
                return new SynchronizationSchemaRequestBuilder(this.AppendSegmentToRequestUrl("schema"), this.Client);
            }
        }
    
        /// <summary>
        /// Gets the request builder for SynchronizationJobPause.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationJobPauseRequestBuilder"/>.</returns>
        public ISynchronizationJobPauseRequestBuilder Pause()
        {
            return new SynchronizationJobPauseRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.pause"),
                this.Client);
        }

        /// <summary>
        /// Gets the request builder for SynchronizationJobStart.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationJobStartRequestBuilder"/>.</returns>
        public ISynchronizationJobStartRequestBuilder Start()
        {
            return new SynchronizationJobStartRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.start"),
                this.Client);
        }

        /// <summary>
        /// Gets the request builder for SynchronizationJobStop.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationJobStopRequestBuilder"/>.</returns>
        public ISynchronizationJobStopRequestBuilder Stop()
        {
            return new SynchronizationJobStopRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.stop"),
                this.Client);
        }

        /// <summary>
        /// Gets the request builder for SynchronizationJobApply.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationJobApplyRequestBuilder"/>.</returns>
        public ISynchronizationJobApplyRequestBuilder Apply(
            string objectId,
            string typeName,
            string ruleId = null)
        {
            return new SynchronizationJobApplyRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.apply"),
                this.Client,
                objectId,
                typeName,
                ruleId);
        }

        /// <summary>
        /// Gets the request builder for SynchronizationJobRestart.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationJobRestartRequestBuilder"/>.</returns>
        public ISynchronizationJobRestartRequestBuilder Restart(
            SynchronizationJobRestartCriteria criteria = null)
        {
            return new SynchronizationJobRestartRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.restart"),
                this.Client,
                criteria);
        }

        /// <summary>
        /// Gets the request builder for SynchronizationJobValidateCredentials.
        /// </summary>
        /// <returns>The <see cref="ISynchronizationJobValidateCredentialsRequestBuilder"/>.</returns>
        public ISynchronizationJobValidateCredentialsRequestBuilder ValidateCredentials(
            string applicationIdentifier = null,
            string templateId = null,
            bool? useSavedCredentials = null,
            IEnumerable<SynchronizationSecretKeyStringValuePair> credentials = null)
        {
            return new SynchronizationJobValidateCredentialsRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.validateCredentials"),
                this.Client,
                applicationIdentifier,
                templateId,
                useSavedCredentials,
                credentials);
        }
    
    }
}
